/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:44:30 GMT 2020
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class ComplexFormat_ESTest_EvoSuite extends ComplexFormat_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("]etxLPies+`t;*");
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = complexFormat0.parseObject("\"z$n]4q^k", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Complex complex0 = (Complex)complexFormat0.parseObject("0", parsePosition0);
      assertEquals(0.0, complex0.abs(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      Complex complex0 = complexFormat0.parse("(NaN) - 47i");
      assertNotNull(complex0);
      assertEquals((-47.0), complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      Complex complex0 = complexFormat0.parse("-920.27 - 1,589.64i");
      assertEquals((-1589.64), complex0.getImaginary(), 0.01);
      assertEquals((-920.27), complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      Complex complex0 = complexFormat0.parse("0");
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      complexFormat0.setRealFormat(numberFormat0);
      numberFormat0.setGroupingUsed(false);
      NumberFormat numberFormat1 = complexFormat0.getRealFormat();
      assertEquals(0, numberFormat1.getMaximumFractionDigits());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
      numberFormat0.setMinimumIntegerDigits((-1548));
      NumberFormat numberFormat1 = complexFormat0.getRealFormat();
      assertEquals(RoundingMode.HALF_EVEN, numberFormat1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      NumberFormat numberFormat1 = NumberFormat.getIntegerInstance(locale0);
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0, numberFormat1);
      NumberFormat numberFormat2 = complexFormat0.getImaginaryFormat();
      assertTrue(numberFormat2.isParseIntegerOnly());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
      DecimalFormat decimalFormat0 = (DecimalFormat)complexFormat0.getImaginaryFormat();
      assertEquals("\u00A4#,##0.00", decimalFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      complexFormat0.setImaginaryFormat(numberFormat0);
      NumberFormat numberFormat1 = complexFormat0.getImaginaryFormat();
      assertEquals(RoundingMode.HALF_EVEN, numberFormat1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      complexFormat0.parse("(NaN) + (NaN)i", parsePosition0);
      assertEquals(8, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=14,errorIndex=8]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      ParsePosition parsePosition0 = new ParsePosition(1);
      complexFormat0.parse("", parsePosition0);
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexFormat complexFormat0 = new ComplexFormat();
      String string0 = complexFormat0.format((Object) complex0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "0 + 1i");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-4564));
      complexFormat0.format(complex0, stringBuffer0, fieldPosition0);
      assertEquals(12, stringBuffer0.length());
      assertEquals("0 + 1i0 + 1i", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      Complex complex0 = Complex.ONE;
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(1806);
      complexFormat0.format(complex0, stringBuffer0, fieldPosition0);
      assertEquals("1", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      Complex complex0 = new Complex((-644.149390912062), (-1687.0990423418));
      StringBuffer stringBuffer0 = new StringBuffer("|");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      complexFormat0.format(complex0, stringBuffer0, fieldPosition0);
      assertEquals(19, stringBuffer0.length());
      assertEquals("|-644.15 - 1,687.1i", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      String string0 = complexFormat0.getImaginaryCharacter();
      assertEquals("i", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("<sGnpH*ByCEJX", decimalFormatSymbols0);
      ComplexFormat complexFormat0 = new ComplexFormat("t,", decimalFormat0, decimalFormat0);
      NumberFormat numberFormat0 = complexFormat0.getImaginaryFormat();
      assertEquals(RoundingMode.HALF_EVEN, numberFormat0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = new Locale("aptC:%V*3T`w,I+-", ">k=V)vK8KI");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      ComplexFormat complexFormat0 = new ComplexFormat(">k=V)vK8KI", numberFormat0);
      assertEquals(">k=V)vK8KI", complexFormat0.getImaginaryCharacter());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      ComplexFormat complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      complexFormat0.parse("1", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      Complex complex0 = complexFormat0.parse("(Infinity) + (Infinity)i");
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      Complex complex0 = Complex.NaN;
      StringBuffer stringBuffer0 = new StringBuffer("`:rK/9/;r&%k");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      complexFormat0.format(complex0, stringBuffer0, fieldPosition0);
      assertEquals(26, stringBuffer0.length());
      assertEquals("`:rK/9/;r&%k(NaN) + (NaN)i", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = ComplexFormat.formatComplex(complex0);
      assertEquals("(Infinity) + (Infinity)i", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat("i1Af<#u/u~u>Vb9=1");
      Float float0 = new Float(1181.8F);
      StringBuffer stringBuffer0 = new StringBuffer("");
      FieldPosition fieldPosition0 = new FieldPosition(17);
      complexFormat0.format((Object) float0, stringBuffer0, fieldPosition0);
      assertEquals(7, stringBuffer0.length());
      assertEquals("1,181.8", stringBuffer0.toString());
  }
}

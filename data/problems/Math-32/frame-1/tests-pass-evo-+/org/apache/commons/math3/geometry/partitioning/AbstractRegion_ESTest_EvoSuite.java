/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:34:47 GMT 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Rotation;
import org.apache.commons.math3.geometry.euclidean.threed.SubPlane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class AbstractRegion_ESTest_EvoSuite extends AbstractRegion_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Vector1D vector1D0 = Vector1D.NaN;
      ((AbstractRegion)intervalsSet0).setBarycenter(vector1D0);
      assertEquals(Double.NaN, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet();
      PolyhedronsSet polyhedronsSet1 = polyhedronsSet0.buildNew((BSPTree<Euclidean3D>) null);
      BSPTree<Euclidean3D> bSPTree0 = polyhedronsSet1.getTree(false);
      assertNull(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(Double.POSITIVE_INFINITY, 0.0);
      double double0 = intervalsSet0.getSize();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      double double0 = intervalsSet0.getBoundarySize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 0.0);
      Vector<Euclidean1D> vector0 = intervalsSet0.getBarycenter();
      assertEquals(0.0, vector0.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(1958.8541, 1958.8541);
      Boolean boolean0 = new Boolean(true);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>(boolean0);
      AbstractRegion<Euclidean1D, Euclidean1D> abstractRegion0 = intervalsSet0.buildNew(bSPTree0);
      assertFalse(abstractRegion0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, vector2D0);
      Side side0 = polygonsSet0.side(line0);
      assertEquals(Side.BOTH, side0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.0);
      PolygonsSet polygonsSet0 = line0.wholeSpace();
      polygonsSet0.getBarycenter();
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertTrue(vector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.0);
      PolygonsSet polygonsSet0 = line0.wholeSpace();
      Vector<Euclidean2D> vector0 = polygonsSet0.getBarycenter();
      assertNotNull(vector0);
      
      double double0 = polygonsSet0.getSize();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(0.0, (-1493.297), 4335.8299353, (-1493.297));
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      assertEquals(1, vector2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(false);
      assertNotNull(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NaN;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(true);
      boolean boolean0 = intervalsSet0.isEmpty(bSPTree0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet();
      boolean boolean0 = polyhedronsSet0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Transform<Euclidean1D, Euclidean1D> transform0 = (Transform<Euclidean1D, Euclidean1D>) mock(Transform.class, new ViolatedAssumptionAnswer());
      AbstractRegion<Euclidean1D, Euclidean1D> abstractRegion0 = intervalsSet0.applyTransform(transform0);
      assertFalse(abstractRegion0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 3494.0);
      Vector1D vector1D0 = new Vector1D((-1014.98661645289));
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      SubHyperplane<Euclidean1D> subHyperplane0 = intervalsSet0.intersection(subOrientedPoint0);
      assertNull(subHyperplane0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector1D vector1D0 = new Vector1D((-709.05949877697));
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = new IntervalsSet((-709.05949877697), (-709.05949877697));
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      SubHyperplane<Euclidean1D> subHyperplane0 = intervalsSet0.intersection(subOrientedPoint0);
      assertNull(subHyperplane0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(1958.8541, 1958.8541);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector1D vector1D1 = new Vector1D((-2353.7490199696), vector1D0, 1958.8541, vector1D0, (-3.4028234663852886E38), vector1D0, 0.0, vector1D0);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D1, true);
      Side side0 = intervalsSet0.side(orientedPoint0);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      Side side0 = intervalsSet0.side(orientedPoint0);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = new Vector2D(0.0, 0.0);
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.getVertices();
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(true);
      assertNotNull(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet();
      double double0 = polyhedronsSet0.getSize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 3494.0);
      Vector1D vector1D0 = new Vector1D(3494.0);
      Region.Location region_Location0 = intervalsSet0.checkPoint(vector1D0);
      assertEquals(Region.Location.BOUNDARY, region_Location0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.0);
      SubLine subLine0 = line0.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      PolygonsSet polygonsSet1 = line0.wholeSpace();
      boolean boolean0 = polygonsSet0.contains(polygonsSet1);
      assertFalse(polygonsSet0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.ZERO;
      Line line0 = new Line(vector2D0, 0.0);
      SubLine subLine0 = line0.wholeHyperplane();
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      SubLine subLine1 = new SubLine(vector2D0, vector2D0);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine1);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.NaN;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      linkedList0.add((SubHyperplane<Euclidean2D>) subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection(subLine0);
      assertFalse(linkedList0.contains(subHyperplane0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet((-709.05949877697), 0.0, (-425.3207), 0.07692307692307693, (-930.2335965025942), 0.99);
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Region.Location region_Location0 = polyhedronsSet0.checkPoint(vector3D0);
      assertEquals(Region.Location.OUTSIDE, region_Location0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.copySelf();
      assertFalse(abstractRegion0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet((-709.05949877697), 0.0, (-425.3207), 0.07692307692307693, (-930.2335965025942), 0.99);
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Rotation rotation0 = new Rotation(vector3D0, 0.99);
      PolyhedronsSet polyhedronsSet1 = polyhedronsSet0.rotate(vector3D0, rotation0);
      assertFalse(polyhedronsSet1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = intervalsSet0.contains(intervalsSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(51.958631, 51.958631);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      orientedPoint0.revertSelf();
      Side side0 = intervalsSet0.side(orientedPoint0);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(51.958631, 51.958631);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      Side side0 = intervalsSet0.side(orientedPoint0);
      assertEquals(Side.MINUS, side0);
  }
}

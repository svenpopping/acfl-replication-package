/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:37:12 GMT 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Plane;
import org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;
import org.apache.commons.math3.geometry.euclidean.threed.SubPlane;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.Segment;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor;
import org.apache.commons.math3.geometry.partitioning.BoundarySizeVisitor;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class BSPTree_ESTest_EvoSuite extends BSPTree_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      assertNotNull(bSPTree0);
      
      BSPTree.LeafMerger<Euclidean1D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean1D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn((BSPTree) null).when(bSPTree_LeafMerger0).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.merge(bSPTree0, bSPTree_LeafMerger0);
      assertNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false);
      assertFalse(orientedPoint0.isDirect());
      assertNotNull(orientedPoint0);
      
      IntervalsSet intervalsSet0 = new IntervalsSet(1.0E-10, 0.0);
      assertFalse(intervalsSet0.isEmpty());
      assertNotNull(intervalsSet0);
      
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(subOrientedPoint0.isEmpty());
      assertNotNull(subOrientedPoint0);
      
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split(subOrientedPoint0);
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(subOrientedPoint0.isEmpty());
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotNull(bSPTree1);
      
      BSPTree<Euclidean1D> bSPTree2 = bSPTree1.getPlus();
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(subOrientedPoint0.isEmpty());
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree1, bSPTree2);
      assertNotSame(bSPTree2, bSPTree0);
      assertNotSame(bSPTree2, bSPTree1);
      assertNotNull(bSPTree2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.split((SubHyperplane<Euclidean1D>) null);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotNull(bSPTree1);
      
      BSPTree<Euclidean1D> bSPTree2 = bSPTree1.getMinus();
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree1, bSPTree2);
      assertNotSame(bSPTree2, bSPTree1);
      assertNotSame(bSPTree2, bSPTree0);
      assertNotNull(bSPTree2);
      
      BSPTree<Euclidean1D> bSPTree3 = bSPTree2.getParent();
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree0.equals((Object)bSPTree2));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree1.equals((Object)bSPTree2));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      assertFalse(bSPTree3.equals((Object)bSPTree0));
      assertFalse(bSPTree3.equals((Object)bSPTree2));
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(bSPTree0, bSPTree3);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree1, bSPTree2);
      assertSame(bSPTree1, bSPTree3);
      assertNotSame(bSPTree2, bSPTree3);
      assertNotSame(bSPTree2, bSPTree1);
      assertNotSame(bSPTree2, bSPTree0);
      assertNotSame(bSPTree3, bSPTree0);
      assertNotSame(bSPTree3, bSPTree2);
      assertSame(bSPTree3, bSPTree1);
      assertNotNull(bSPTree3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertNotNull(vector1D0);
      
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(orientedPoint0.isDirect());
      assertNotNull(orientedPoint0);
      
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertNotNull(intervalsSet0);
      
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertFalse(subOrientedPoint0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertNotNull(subOrientedPoint0);
      
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>(subOrientedPoint0, bSPTree0, bSPTree0, bSPTree0);
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertFalse(subOrientedPoint0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertNotNull(bSPTree1);
      
      SubHyperplane<Euclidean1D> subHyperplane0 = bSPTree1.getCut();
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertFalse(subOrientedPoint0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(subHyperplane0.isEmpty());
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertSame(subOrientedPoint0, subHyperplane0);
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotNull(subHyperplane0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Euclidean3D euclidean3D0 = Euclidean3D.getInstance();
      assertEquals(3, euclidean3D0.getDimension());
      assertNotNull(euclidean3D0);
      
      Euclidean2D euclidean2D0 = euclidean3D0.getSubSpace();
      assertEquals(3, euclidean3D0.getDimension());
      assertEquals(2, euclidean2D0.getDimension());
      assertNotNull(euclidean2D0);
      
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(euclidean2D0);
      assertEquals(3, euclidean3D0.getDimension());
      assertEquals(2, euclidean2D0.getDimension());
      assertNotNull(bSPTree0);
      
      Euclidean2D euclidean2D1 = (Euclidean2D)bSPTree0.getAttribute();
      assertEquals(3, euclidean3D0.getDimension());
      assertEquals(2, euclidean2D0.getDimension());
      assertEquals(2, euclidean2D1.getDimension());
      assertSame(euclidean2D0, euclidean2D1);
      assertSame(euclidean2D1, euclidean2D0);
      assertNotNull(euclidean2D1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Euclidean1D euclidean1D0 = Euclidean1D.getInstance();
      assertEquals(1, euclidean1D0.getDimension());
      assertNotNull(euclidean1D0);
      
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, false);
      assertFalse(orientedPoint0.isDirect());
      assertNotNull(orientedPoint0);
      
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      assertFalse(orientedPoint0.isDirect());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertNotNull(subOrientedPoint0);
      
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>(subOrientedPoint0, bSPTree0, bSPTree0, euclidean1D0);
      assertEquals(1, euclidean1D0.getDimension());
      assertFalse(orientedPoint0.isDirect());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertNotNull(bSPTree1);
      
      bSPTree1.insertInTree((BSPTree<Euclidean1D>) null, false);
      assertEquals(1, euclidean1D0.getDimension());
      assertFalse(orientedPoint0.isDirect());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      assertNotNull(bSPTree0);
      
      bSPTree0.insertInTree(bSPTree0, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertNotNull(vector1D0);
      
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertFalse(orientedPoint0.isDirect());
      assertNotNull(orientedPoint0);
      
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertNotNull(intervalsSet0);
      
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(subOrientedPoint0.isEmpty());
      assertNotNull(subOrientedPoint0);
      
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>(subOrientedPoint0, bSPTree0, bSPTree0, bSPTree0);
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(subOrientedPoint0.isEmpty());
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertNotNull(bSPTree1);
      
      BSPTree<Euclidean1D> bSPTree2 = bSPTree1.split(subOrientedPoint0);
      assertEquals(1.0, vector1D0.getNormSq(), 0.01);
      assertFalse(vector1D0.isInfinite());
      assertEquals(1.0, vector1D0.getX(), 0.01);
      assertFalse(vector1D0.isNaN());
      assertFalse(orientedPoint0.isDirect());
      assertFalse(intervalsSet0.isEmpty());
      assertEquals(0.0, subOrientedPoint0.getSize(), 0.01);
      assertFalse(subOrientedPoint0.isEmpty());
      assertFalse(bSPTree0.equals((Object)bSPTree1));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertFalse(bSPTree2.equals((Object)bSPTree1));
      assertFalse(bSPTree2.equals((Object)bSPTree0));
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree0, bSPTree2);
      assertNotSame(bSPTree1, bSPTree2);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotSame(bSPTree2, bSPTree1);
      assertNotSame(bSPTree2, bSPTree0);
      assertNotNull(bSPTree2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      assertNotNull(bSPTree0);
      
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertNotNull(vector2D0);
      
      Vector2D vector2D1 = Vector2D.NEGATIVE_INFINITY;
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
      assertTrue(vector2D1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01);
      assertFalse(vector2D1.isNaN());
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotSame(vector2D1, vector2D0);
      assertNotNull(vector2D1);
      
      Line line0 = new Line(vector2D1, (-0.0013888888689039883));
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
      assertTrue(vector2D1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01);
      assertFalse(vector2D1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotNull(line0);
      
      boolean boolean0 = bSPTree0.insertCut(line0);
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
      assertTrue(vector2D1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01);
      assertFalse(vector2D1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotSame(vector2D1, vector2D0);
      assertTrue(boolean0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
      assertTrue(vector2D1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01);
      assertFalse(vector2D1.isNaN());
      assertFalse(subLine0.isEmpty());
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotNull(subLine0);
      
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.split(subLine0);
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getX(), 0.01);
      assertTrue(vector2D1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, vector2D1.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D1.getNormSq(), 0.01);
      assertFalse(vector2D1.isNaN());
      assertFalse(subLine0.isEmpty());
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getCell((Vector<Euclidean1D>) null);
      assertSame(bSPTree0, bSPTree1);
      assertSame(bSPTree1, bSPTree0);
      assertNotNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      assertNotNull(bSPTree0);
      
      BoundarySizeVisitor<Euclidean1D> boundarySizeVisitor0 = new BoundarySizeVisitor<Euclidean1D>();
      assertEquals(0.0, boundarySizeVisitor0.getSize(), 0.01);
      assertNotNull(boundarySizeVisitor0);
      
      bSPTree0.visit(boundarySizeVisitor0);
      assertEquals(0.0, boundarySizeVisitor0.getSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.copySelf();
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      assertNotNull(bSPTree0);
      
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, 216.4871782427927);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01);
      assertNotNull(line0);
      
      boolean boolean0 = bSPTree0.insertCut(line0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01);
      assertTrue(boolean0);
      
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.copySelf();
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getMinus();
      assertNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      assertNotNull(bSPTree0);
      
      SubHyperplane<Euclidean1D> subHyperplane0 = bSPTree0.getCut();
      assertNull(subHyperplane0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      assertNotNull(bSPTree0);
      
      Object object0 = bSPTree0.getAttribute();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>();
      assertNotNull(bSPTree0);
      
      BSPTree.LeafMerger<Euclidean3D> bSPTree_LeafMerger0 = (BSPTree.LeafMerger<Euclidean3D>) mock(BSPTree.LeafMerger.class, new ViolatedAssumptionAnswer());
      doReturn(bSPTree0).when(bSPTree_LeafMerger0).merge(nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , nullable(org.apache.commons.math3.geometry.partitioning.BSPTree.class) , anyBoolean() , anyBoolean());
      BSPTree<Euclidean3D> bSPTree1 = bSPTree0.merge(bSPTree0, bSPTree_LeafMerger0);
      assertSame(bSPTree0, bSPTree1);
      assertSame(bSPTree1, bSPTree0);
      assertNotNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Euclidean3D euclidean3D0 = Euclidean3D.getInstance();
      assertEquals(3, euclidean3D0.getDimension());
      assertNotNull(euclidean3D0);
      
      Euclidean2D euclidean2D0 = euclidean3D0.getSubSpace();
      assertEquals(3, euclidean3D0.getDimension());
      assertEquals(2, euclidean2D0.getDimension());
      assertNotNull(euclidean2D0);
      
      BSPTree<Euclidean3D> bSPTree0 = new BSPTree<Euclidean3D>(euclidean2D0);
      assertEquals(3, euclidean3D0.getDimension());
      assertEquals(2, euclidean2D0.getDimension());
      assertNotNull(bSPTree0);
      
      BSPTree<Euclidean3D> bSPTree1 = bSPTree0.getPlus();
      assertEquals(3, euclidean3D0.getDimension());
      assertEquals(2, euclidean2D0.getDimension());
      assertNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      assertNotNull(bSPTree0);
      
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertNotNull(vector2D0);
      
      Line line0 = new Line(vector2D0, 216.4871782427927);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01);
      assertNotNull(line0);
      
      boolean boolean0 = bSPTree0.insertCut(line0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, line0.getOriginOffset(), 0.01);
      assertTrue(boolean0);
      
      Vector2D vector2D1 = new Vector2D(3507.1507732555, 216.4871782427927);
      assertEquals(216.4871782427927, vector2D1.getY(), 0.01);
      assertFalse(vector2D1.isInfinite());
      assertEquals(3507.1507732555, vector2D1.getX(), 0.01);
      assertFalse(vector2D1.isNaN());
      assertEquals(1.2346973244690178E7, vector2D1.getNormSq(), 0.01);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotNull(vector2D1);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(216.4871782427927, vector2D1.getY(), 0.01);
      assertFalse(vector2D1.isInfinite());
      assertEquals(3507.1507732555, vector2D1.getX(), 0.01);
      assertFalse(vector2D1.isNaN());
      assertEquals(1.2346973244690178E7, vector2D1.getNormSq(), 0.01);
      assertFalse(subLine0.isEmpty());
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotNull(subLine0);
      
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.split(subLine0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertFalse(vector2D0.isNaN());
      assertTrue(vector2D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(216.4871782427927, vector2D1.getY(), 0.01);
      assertFalse(vector2D1.isInfinite());
      assertEquals(3507.1507732555, vector2D1.getX(), 0.01);
      assertFalse(vector2D1.isNaN());
      assertEquals(1.2346973244690178E7, vector2D1.getNormSq(), 0.01);
      assertFalse(subLine0.isEmpty());
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(bSPTree1.equals((Object)bSPTree0));
      assertNotSame(bSPTree0, bSPTree1);
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(bSPTree1, bSPTree0);
      assertNotNull(bSPTree1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertTrue(vector2D0.isInfinite());
      assertFalse(vector2D0.isNaN());
      assertNotNull(vector2D0);
      
      Vector2D vector2D1 = Vector2D.ZERO;
      assertFalse(vector2D1.isInfinite());
      assertFalse(vector2D1.isNaN());
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotSame(vector2D1, vector2D0);
      assertNotNull(vector2D1);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertTrue(vector2D0.isInfinite());
      assertFalse(vector2D0.isNaN());
      assertFalse(vector2D1.isInfinite());
      assertFalse(vector2D1.isNaN());
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
      assertFalse(subLine0.isEmpty());
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotNull(subLine0);
      
      Line line0 = new Line(vector2D1, 1.0E-10);
      assertFalse(vector2D1.isInfinite());
      assertFalse(vector2D1.isNaN());
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotNull(line0);
      
      Segment segment0 = new Segment(vector2D1, vector2D0, line0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertTrue(vector2D0.isInfinite());
      assertFalse(vector2D0.isNaN());
      assertFalse(vector2D1.isInfinite());
      assertFalse(vector2D1.isNaN());
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertNotNull(segment0);
      
      SubLine subLine1 = new SubLine(segment0);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertTrue(vector2D0.isInfinite());
      assertFalse(vector2D0.isNaN());
      assertFalse(vector2D1.isInfinite());
      assertFalse(vector2D1.isNaN());
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertFalse(subLine1.isEmpty());
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(subLine1.equals((Object)subLine0));
      assertNotNull(subLine1);
      
      AbstractSubHyperplane<Euclidean2D, Euclidean1D> abstractSubHyperplane0 = subLine0.reunite(subLine1);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getX(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getNormSq(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, vector2D0.getY(), 0.01);
      assertTrue(vector2D0.isInfinite());
      assertFalse(vector2D0.isNaN());
      assertFalse(vector2D1.isInfinite());
      assertFalse(vector2D1.isNaN());
      assertEquals(0.0, vector2D1.getY(), 0.01);
      assertEquals(0.0, vector2D1.getX(), 0.01);
      assertEquals(0.0, vector2D1.getNormSq(), 0.01);
      assertFalse(subLine0.isEmpty());
      assertEquals(0.0, line0.getOriginOffset(), 0.01);
      assertFalse(subLine1.isEmpty());
      assertFalse(abstractSubHyperplane0.isEmpty());
      assertFalse(vector2D0.equals((Object)vector2D1));
      assertFalse(vector2D1.equals((Object)vector2D0));
      assertFalse(subLine0.equals((Object)subLine1));
      assertFalse(subLine1.equals((Object)subLine0));
      assertNotSame(vector2D0, vector2D1);
      assertNotSame(vector2D1, vector2D0);
      assertNotSame(subLine0, abstractSubHyperplane0);
      assertNotSame(subLine0, subLine1);
      assertNotSame(subLine1, abstractSubHyperplane0);
      assertNotSame(subLine1, subLine0);
      assertNotNull(abstractSubHyperplane0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PolyhedronsSet polyhedronsSet0 = new PolyhedronsSet((-4077.0787609), 2958.10967751, (-4077.0787609), 2958.10967751, (-20.0), 0.0);
      assertFalse(polyhedronsSet0.isEmpty());
      assertNotNull(polyhedronsSet0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      Line line0 = new Line(vector2D1, 1.0E-10);
      Segment segment0 = new Segment(vector2D1, vector2D1, line0);
      SubLine subLine1 = new SubLine(segment0);
      AbstractSubHyperplane<Euclidean2D, Euclidean1D> abstractSubHyperplane0 = subLine0.reunite(subLine1);
      assertFalse(abstractSubHyperplane0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Vector2D vector2D1 = Vector2D.ZERO;
      SubLine subLine0 = new SubLine(vector2D0, vector2D1);
      Line line0 = new Line(vector2D1, 1.0E-10);
      Segment segment0 = new Segment(vector2D1, vector2D1, line0);
      SubLine subLine1 = new SubLine(segment0);
      subLine1.reunite(subLine0);
      AbstractSubHyperplane<Euclidean2D, Euclidean1D> abstractSubHyperplane0 = subLine0.reunite(subLine1);
      assertFalse(abstractSubHyperplane0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ONE;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      SubOrientedPoint subOrientedPoint0 = new SubOrientedPoint(orientedPoint0, intervalsSet0);
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>();
      BSPTree<Euclidean1D> bSPTree1 = new BSPTree<Euclidean1D>(subOrientedPoint0, bSPTree0, bSPTree0, bSPTree0);
      BSPTree<Euclidean1D> bSPTree2 = bSPTree1.getCell(vector1D0);
      assertNotSame(bSPTree2, bSPTree0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.split(subLine0);
      BSPTree<Euclidean2D> bSPTree2 = bSPTree1.getCell(vector2D0);
      assertNotSame(bSPTree2, bSPTree1);
      assertFalse(subLine0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      BSPTree<Euclidean2D> bSPTree1 = bSPTree0.split(subLine0);
      Line line0 = new Line(vector2D0, vector2D0);
      boolean boolean0 = bSPTree1.insertCut(line0);
      assertFalse(subLine0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      subLine0.reunite(subLine0);
      assertFalse(subLine0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 216.4871782427927);
      boolean boolean0 = bSPTree0.insertCut(line0);
      assertTrue(boolean0);
      
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      bSPTree0.split(subLine0);
      assertFalse(subLine0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(false);
      bSPTree0.setAttribute((Object) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BSPTree<Euclidean1D> bSPTree0 = new BSPTree<Euclidean1D>((Object) null);
      BSPTree<Euclidean1D> bSPTree1 = bSPTree0.getParent();
      assertNull(bSPTree1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:34:55 GMT 2020
 */

package org.apache.commons.math3.geometry.partitioning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.AffineTransform;
import java.util.LinkedList;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.SubOrientedPoint;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet;
import org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D;
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.AbstractRegion;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.apache.commons.math3.geometry.partitioning.Hyperplane;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.Side;
import org.apache.commons.math3.geometry.partitioning.SubHyperplane;
import org.apache.commons.math3.geometry.partitioning.Transform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class AbstractRegion_ESTest_EvoSuite extends AbstractRegion_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      ((AbstractRegion)intervalsSet0).setSize((-891.722512511));
      assertFalse(intervalsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(0.25, 0.0, 0.25, 0.0);
      Vector2D vector2D0 = new Vector2D(0.25, 1.0);
      ((AbstractRegion)polygonsSet0).setBarycenter(vector2D0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      IntervalsSet intervalsSet1 = intervalsSet0.buildNew((BSPTree<Euclidean1D>) null);
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet1.getTree(false);
      assertNull(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(924.4, 924.4);
      double double0 = intervalsSet0.getSize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      double double0 = intervalsSet0.getBoundarySize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(0.25, 0.0, 0.25, 0.0);
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(true);
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.buildNew(bSPTree0);
      assertFalse(abstractRegion0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(boolean0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      AffineTransform affineTransform0 = AffineTransform.getShearInstance((-296.2709787663107), (-296.2709787663107));
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.applyTransform(transform0);
      assertNotSame(polygonsSet0, abstractRegion0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      OrientedPoint orientedPoint0 = new OrientedPoint((Vector1D) null, true);
      Side side0 = intervalsSet0.side(orientedPoint0);
      assertEquals(Side.BOTH, side0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      Vector<Euclidean1D> vector0 = intervalsSet0.getBarycenter();
      assertNotNull(vector0);
      
      double double0 = intervalsSet0.getSize();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(0.25, 0.0, 0.25, 0.0);
      BSPTree<Euclidean2D> bSPTree0 = polygonsSet0.getTree(true);
      boolean boolean0 = polygonsSet0.isEmpty(bSPTree0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(0.25, 0.0, 0.25, 0.0);
      boolean boolean0 = polygonsSet0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      linkedList0.push(subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      polygonsSet0.getBarycenter();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, (-2732.8375232662893), (-2732.8375232662893));
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.applyTransform(transform0);
      assertFalse(abstractRegion0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      linkedList0.push(subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, (-2732.8375232662893), (-2732.8375232662893));
      Transform<Euclidean2D, Euclidean1D> transform0 = Line.getTransform(affineTransform0);
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.applyTransform(transform0);
      assertNotSame(polygonsSet0, abstractRegion0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(1505.59615168, 1505.59615168);
      Vector1D vector1D0 = new Vector1D(1505.59615168);
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      SubOrientedPoint subOrientedPoint0 = orientedPoint0.wholeHyperplane();
      SubHyperplane<Euclidean1D> subHyperplane0 = intervalsSet0.intersection(subOrientedPoint0);
      assertNull(subHyperplane0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(924.4, 924.4);
      Vector1D vector1D0 = Vector1D.NaN;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      orientedPoint0.revertSelf();
      Side side0 = intervalsSet0.side(orientedPoint0);
      assertEquals(Side.PLUS, side0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY);
      double double0 = polygonsSet0.getBoundarySize();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      PolygonsSet polygonsSet0 = new PolygonsSet(0.25, 0.0, 0.25, 0.0);
      Vector2D vector2D0 = Vector2D.POSITIVE_INFINITY;
      Line line0 = new Line(vector2D0, 0.25);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection(subLine0);
      assertFalse(polygonsSet0.isEmpty());
      assertNull(subHyperplane0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(0.0, 0.0);
      intervalsSet0.getBarycenter();
      Vector<Euclidean1D> vector0 = intervalsSet0.getBarycenter();
      assertFalse(vector0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      BSPTree<Euclidean1D> bSPTree0 = intervalsSet0.getTree(true);
      assertNotNull(bSPTree0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(0.0, (-4065.86902589069), 0.0, (-4065.86902589069));
      Vector2D vector2D0 = new Vector2D((-4065.86902589069), 0.0);
      Region.Location region_Location0 = polygonsSet0.checkPoint(vector2D0);
      assertFalse(polygonsSet0.isEmpty());
      assertEquals(Region.Location.BOUNDARY, region_Location0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet(519.2733476131, 1.0);
      LinkedList<SubHyperplane<Euclidean1D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean1D>>();
      IntervalsSet intervalsSet1 = new IntervalsSet(linkedList0);
      boolean boolean0 = intervalsSet0.contains(intervalsSet1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      Vector2D vector2D0 = Vector2D.NEGATIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector2D0, vector2D0);
      linkedList0.push(subLine0);
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection(subLine0);
      assertFalse(linkedList0.contains(subHyperplane0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(0.25, 0.0, 0.25, 0.0);
      AbstractRegion<Euclidean2D, Euclidean1D> abstractRegion0 = polygonsSet0.copySelf();
      assertFalse(abstractRegion0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet();
      PolygonsSet polygonsSet0 = new PolygonsSet(0.25, 0.0, 0.25, 0.0);
      Vector2D vector2D0 = new Vector2D(0.25, 1.0);
      Line line0 = new Line(vector2D0, 0.25);
      SubLine subLine0 = new SubLine(line0, intervalsSet0);
      SubHyperplane<Euclidean2D> subHyperplane0 = polygonsSet0.intersection(subLine0);
      assertNull(subHyperplane0);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      IntervalsSet intervalsSet0 = orientedPoint0.wholeSpace();
      boolean boolean0 = intervalsSet0.contains(intervalsSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(0.25, 0.0, 0.25, 0.0);
      double double0 = polygonsSet0.getBoundarySize();
      assertEquals(1.0, double0, 0.01);
      
      polygonsSet0.getTree(true);
      assertFalse(polygonsSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((-1791.923570237), (-1791.923570237));
      Vector1D vector1D0 = Vector1D.ZERO;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, true);
      Side side0 = intervalsSet0.side(orientedPoint0);
      assertEquals(Side.MINUS, side0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IntervalsSet intervalsSet0 = new IntervalsSet((-1791.923570237), (-1791.923570237));
      Vector1D vector1D0 = Vector1D.ZERO;
      OrientedPoint orientedPoint0 = new OrientedPoint(vector1D0, false);
      Side side0 = intervalsSet0.side(orientedPoint0);
      assertEquals(Side.PLUS, side0);
  }
}

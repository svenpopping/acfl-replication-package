/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:13:40 GMT 2020
 */

package org.jfree.chart;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartTheme;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.Timeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.jdbc.JDBCXYDataset;
import org.jfree.data.statistics.BoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.BoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.OHLCDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.XYZDataset;
import org.jfree.data.xy.YIntervalSeriesCollection;
import sun.util.calendar.ZoneInfo;

public class ChartFactory_ESTest_EvoSuite extends ChartFactory_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JFreeChart jFreeChart0 = ChartFactory.createWaterfallChart(".>BJL)1}R]0u2P", "&amp;", "&amp;", defaultCategoryDataset0, plotOrientation0, true, true, true);
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(15, 0, 2.0F);
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JFreeChart jFreeChart0 = ChartFactory.createWaferMapChart((String) null, waferMapDataset0, plotOrientation0, true, true, false);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JFreeChart jFreeChart0 = ChartFactory.createTimeSeriesChart("[!Jz8S4\n", "[!Jz8S4\n", "[!Jz8S4\n", (XYDataset) null, true, false, false);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      PlotOrientation plotOrientation0 = combinedRangeCategoryPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createStackedXYAreaChart("", "", "_{=E}0L{rbc.", categoryTableXYDataset0, plotOrientation0, true, false, true);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCCategoryDataset jDBCCategoryDataset0 = new JDBCCategoryDataset(connection0);
      JFreeChart jFreeChart0 = ChartFactory.createStackedAreaChart("", "&_0/]lh]np", "&_0/]lh]np", jDBCCategoryDataset0, plotOrientation0, true, false, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      JFreeChart jFreeChart0 = ChartFactory.createRingChart((String) null, (PieDataset) jDBCPieDataset0, true, true, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, (-4198));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      Locale locale0 = Locale.US;
      JFreeChart jFreeChart0 = ChartFactory.createRingChart("OTHER LIBRARIES USED BY ", (PieDataset) defaultPieDataset0, false, false, locale0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JFreeChart jFreeChart0 = ChartFactory.createPolarChart("[!Jz8S4\n", (XYDataset) null, false, false, true);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      JFreeChart jFreeChart0 = ChartFactory.createPieChart3D("+=G'xNd~}>>>k4?}Be9", (PieDataset) jDBCPieDataset0, false, false, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("n,Ds7pW4~y#", (PieDataset) defaultPieDataset0, true, true, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 152, 152);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 152);
      Locale locale0 = new Locale("&k<##lm8\"wfudjqr<6&", "Da@kneGs", "&k<##lm8\"wfudjqr<6&");
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("(C)opyright 2000-2008, by Object Refinery Limited and Contributors", (PieDataset) categoryToPieDataset0, false, false, locale0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) null, (-1), 10);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      JFreeChart jFreeChart0 = ChartFactory.createMultiplePieChart3D("org.jfree.data.time.TimePeriodAnchor", slidingGanttCategoryDataset0, tableOrder0, true, false, false);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      JFreeChart jFreeChart0 = ChartFactory.createHistogram("./L>CPIwD", "&_0/]lh]np", "", defaultTableXYDataset0, plotOrientation0, false, true, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Date[] dateArray0 = new Date[1];
      MockDate mockDate0 = new MockDate();
      dateArray0[0] = (Date) mockDate0;
      double[] doubleArray0 = new double[4];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset("+oj)G[lo<s", dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      JFreeChart jFreeChart0 = ChartFactory.createHighLowChart("=3:'!l'ElZ_h,|OC.y,", "=3:'!l'ElZ_h,|OC.y,", "+oj)G[lo<s", (OHLCDataset) defaultHighLowDataset0, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[6];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(45.0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      JFreeChart jFreeChart0 = ChartFactory.createHighLowChart("Null 'order' argument.", "", (String) null, (OHLCDataset) defaultHighLowDataset0, (Timeline) segmentedTimeline0, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JFreeChart jFreeChart0 = ChartFactory.createCandlestickChart("Rotation.ANTICLOCKWISE", "ItemLabelAnchor.INSIDE5", "Rotation.ANTICLOCKWISE", (OHLCDataset) null, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(15);
      JFreeChart jFreeChart0 = ChartFactory.createBoxAndWhiskerChart("", "ItemLabelAnchor.INSIDE5", "", (BoxAndWhiskerXYDataset) defaultBoxAndWhiskerXYDataset0, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      JFreeChart jFreeChart0 = ChartFactory.createBoxAndWhiskerChart("A", "EI\"~N%$NN#>A!/", (String) null, (BoxAndWhiskerCategoryDataset) defaultBoxAndWhiskerCategoryDataset0, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultKeyedValues2DDataset0, 0, 0);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createAreaChart("%, Bright ", "%, Bright ", "%, Bright ", slidingCategoryDataset0, plotOrientation0, false, true, true);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(10, 10, 0.5F);
      JFreeChart jFreeChart0 = ChartFactory.createWaferMapChart("", waferMapDataset0, plotOrientation0, false, false, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      JFreeChart jFreeChart0 = ChartFactory.createWindPlot("I&Ji;7M8}c$)eXjN", "|@Q", "Legacy", defaultWindDataset0, true, true, false);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      JFreeChart jFreeChart0 = ChartFactory.createWindPlot("Rotation.ANTICLOCKWISE", "bVsdY8x,)>;8/", "bVsdY8x,)>;8/", defaultWindDataset0, false, true, true);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      JFreeChart jFreeChart0 = ChartFactory.createWindPlot("2o,{I9NQ2BB", "S%o2<gy~s#", "FBy,Ffvyd=neXlq", defaultWindDataset0, false, false, true);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createHistogram("JFree", "JFree", "JFree", yIntervalSeriesCollection0, plotOrientation0, true, false, false);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JFreeChart jFreeChart0 = ChartFactory.createBubbleChart("Legacy", "Darkness", "", (XYZDataset) null, plotOrientation0, false, false, true);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createBubbleChart("?A", "", "java.util.Date", (XYZDataset) null, plotOrientation0, true, false, false);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[][] floatArray0 = new float[5][5];
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1.0F, "!w[.HH$1q1Z 4$DXxp[");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, cyclicNumberAxis0, cyclicNumberAxis0);
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createXYStepAreaChart("!w[.HH$1q1Z 4$DXxp[", "org.jfree.chart.axis.SubCategoryAxis", "}9$Q", (XYDataset) null, plotOrientation0, true, true, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JFreeChart jFreeChart0 = ChartFactory.createXYStepChart("david.gilbert@object-refinery.com", "!Zn", (String) null, (XYDataset) null, plotOrientation0, false, false, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JFreeChart jFreeChart0 = ChartFactory.createXYStepChart("+h+!!V(uF", (String) null, "w2E5~62O?G~^QHk_", (XYDataset) null, plotOrientation0, true, true, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JFreeChart jFreeChart0 = ChartFactory.createXYLineChart("`5J/ug({6X?n8", "Copy", (String) null, timeSeriesCollection0, plotOrientation0, false, false, true);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset(zoneInfo0);
      NumberAxis numberAxis0 = new NumberAxis("fC7AGU!1Mu=-qu;ZQ");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(numberAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createStackedXYAreaChart("", "@E", "@E", timeTableXYDataset0, plotOrientation0, false, false, true);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-1917), 10);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingCategoryDataset0, categoryAxis3D0, valueAxis0, lineAndShapeRenderer0);
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      JFreeChart jFreeChart0 = ChartFactory.createStackedXYAreaChart("PIBp#Tp[r;!a`", (String) null, "*_`f*]f!~OKr6t 9`", timeTableXYDataset0, plotOrientation0, false, true, false);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createXYBarChart(">J?^NklP:#hwI", (String) null, true, "Null 'theme' argument.", (IntervalXYDataset) null, plotOrientation0, false, false, true);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries(1.0F, false);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(2541.655961593694);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createXYBarChart("[size=", "[size=", false, "_U[?bB2*-0h", xYSeriesCollection0, plotOrientation0, true, false, false);
      assertTrue(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createXYBarChart("jks@$47k)A4E,", "jks@$47k)A4E,", true, "jks@$47k)A4E,", xYSeriesCollection0, plotOrientation0, true, true, false);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      JFreeChart jFreeChart0 = ChartFactory.createXYBarChart("Darkness", "g2dQN/*fih2b#F#=+F", false, "g2dQN/*fih2b#F#=+F", timeTableXYDataset0, plotOrientation0, true, true, false);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.5F);
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(cyclicNumberAxis0);
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createScatterPlot("s>!Th^&E", "s>!Th^&E", "s>!Th^&E", (XYDataset) null, plotOrientation0, true, false, true);
      assertEquals(15, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JFreeChart jFreeChart0 = ChartFactory.createScatterPlot("+h+!!V(uF", "w2E5~62O?G~^QHk_", ">I]a\"Je4\"!?)OV]r", (XYDataset) null, plotOrientation0, false, true, false);
      assertTrue(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("org.jfree.data.general.WaferMapDataset");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(extendedCategoryAxis0);
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createWaterfallChart((String) null, (String) null, (String) null, defaultStatisticalCategoryDataset0, plotOrientation0, false, true, true);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      JFreeChart jFreeChart0 = ChartFactory.createGanttChart(" (", " (", (String) null, defaultIntervalCategoryDataset0, false, false, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 1, (-543));
      JFreeChart jFreeChart0 = ChartFactory.createGanttChart("s>!Th^&E", "org.jfree.chart.needle.LongNeedle", (String) null, slidingGanttCategoryDataset0, true, true, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PolarPlot polarPlot0 = new PolarPlot();
      PlotOrientation plotOrientation0 = polarPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createLineChart3D("", "", "", taskSeriesCollection0, plotOrientation0, false, false, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JFreeChart jFreeChart0 = ChartFactory.createStackedAreaChart("Library classname must be given.", "1<_y1C", "1<_y1C", taskSeriesCollection0, plotOrientation0, false, true, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float[][] floatArray0 = new float[4][5];
      DateAxis dateAxis0 = new DateAxis(";I&V$s,Ex''");
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot(floatArray0, dateAxis0, dateAxis0);
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createStackedBarChart3D("Legacy", "Darkness", "Legacy", (CategoryDataset) null, plotOrientation0, true, true, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JFreeChart jFreeChart0 = ChartFactory.createStackedBarChart3D("OToht`Lm_x/<8C,", "_Q_70wiMU/il=BA^y", "Unrecognised exception.", taskSeriesCollection0, plotOrientation0, false, false, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(689.88431243665);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createStackedBarChart("EL", "EL", "EL", (CategoryDataset) null, plotOrientation0, false, false, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      JFreeChart jFreeChart0 = ChartFactory.createBarChart("org.jfree.chart.ChartFactory", "1<_y1C", ")", taskSeriesCollection0, plotOrientation0, false, true, false);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultCategoryDataset0, (-1917), 10);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(slidingCategoryDataset0, categoryAxis3D0, valueAxis0, lineAndShapeRenderer0);
      PlotOrientation plotOrientation0 = categoryPlot0.getOrientation();
      JFreeChart jFreeChart0 = ChartFactory.createBarChart("", "Joao Guilherme Del Valle", "", slidingCategoryDataset0, plotOrientation0, false, false, true);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      JFreeChart jFreeChart0 = ChartFactory.createMultiplePieChart3D("", defaultMultiValueCategoryDataset0, tableOrder0, false, true, false);
      assertEquals(0.5F, JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset(taskSeriesCollection0, 60, 1);
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      JFreeChart jFreeChart0 = ChartFactory.createMultiplePieChart3D("|@Q", slidingGanttCategoryDataset0, tableOrder0, false, false, true);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(taskSeriesCollection0);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(taskSeriesCollection0, tableOrder0, 10);
      JFreeChart jFreeChart0 = ChartFactory.createPieChart3D("", (PieDataset) categoryToPieDataset0, true, true, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JFreeChart jFreeChart0 = ChartFactory.createPieChart3D("DfB", (PieDataset) defaultPieDataset0, true, true, locale0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Locale locale0 = new Locale("Invalid series index: ");
      JFreeChart jFreeChart0 = ChartFactory.createPieChart3D("", (PieDataset) jDBCPieDataset0, false, false, locale0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) null);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      JFreeChart jFreeChart0 = ChartFactory.createMultiplePieChart("", (CategoryDataset) null, tableOrder0, true, true, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      JFreeChart jFreeChart0 = ChartFactory.createMultiplePieChart("s4*0kxS3o-tnY.", taskSeriesCollection0, tableOrder0, true, true, false);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      JFreeChart jFreeChart0 = ChartFactory.createMultiplePieChart("1<_y1C", taskSeriesCollection0, tableOrder0, false, false, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(defaultStatisticalCategoryDataset0, 152, 152);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(defaultStatisticalCategoryDataset0);
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(slidingCategoryDataset0, tableOrder0, 152);
      JFreeChart jFreeChart0 = ChartFactory.createRingChart("Rotation.ANTICLOCKWISE", (PieDataset) categoryToPieDataset0, false, true, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      JFreeChart jFreeChart0 = ChartFactory.createRingChart("Legacy", (PieDataset) defaultKeyedValuesDataset0, false, false, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      JFreeChart jFreeChart0 = ChartFactory.createRingChart("M", (PieDataset) null, true, true, locale0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("Tahoma", (PieDataset) defaultPieDataset0, (PieDataset) defaultPieDataset0, 10, true, true, true, false, true, true);
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      jDBCPieDataset0.setValue((Comparable) "Darkness", (double) 0);
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("Darkness", (PieDataset) jDBCPieDataset0, (PieDataset) jDBCPieDataset0, 0, true, false, true, false, false, true);
      assertTrue(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      jDBCPieDataset0.setValue((Comparable) "Darkness", 2541.655961593694);
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("Darkness", (PieDataset) jDBCPieDataset0, (PieDataset) jDBCPieDataset0, 0, true, false, true, false, false, true);
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      jDBCPieDataset0.setValue((Comparable) "Darkness", 2541.655961593694);
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("Darkness", (PieDataset) jDBCPieDataset0, (PieDataset) jDBCPieDataset0, 0, false, false, false, false, false, false);
      assertFalse(jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) "1`(R;cVt_>7f8'X", (double) 1804);
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("1`(R;cVt_>7f8'X", (PieDataset) defaultPieDataset0, (PieDataset) defaultPieDataset0, 1804, false, true, true, true, false, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("1`(R;cVt_>7f8'X", (PieDataset) defaultPieDataset0, (PieDataset) defaultPieDataset0, 1802, false, true, false, true, true, true);
      assertTrue(jFreeChart0.getAntiAlias());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) "1`(R;cVt_>7f8'X", (double) 1804);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("JFree", (PieDataset) defaultPieDataset0, (PieDataset) defaultPieDataset0, 1804, true, false, false, locale0, false, true);
      assertTrue(jFreeChart0.isNotify());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) "1`(R;cVt_>7f8'X", (double) 1804);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) null, tableOrder0, 15);
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("JFree", (PieDataset) defaultPieDataset0, (PieDataset) categoryToPieDataset0, 15, false, true, false, locale0, true, true);
      assertEquals(2, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      defaultPieDataset0.setValue((Comparable) "1`(R;cVt_>7f8'X", (double) 1774);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("JFree", (PieDataset) defaultPieDataset0, (PieDataset) defaultPieDataset0, 1774, false, false, false, locale0, false, true);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("JFree", (PieDataset) defaultPieDataset0, (PieDataset) defaultPieDataset0, 1802, true, false, true, locale0, false, false);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      Locale locale0 = Locale.UK;
      JFreeChart jFreeChart0 = ChartFactory.createPieChart((String) null, (PieDataset) defaultKeyedValuesDataset0, (PieDataset) defaultKeyedValuesDataset0, (-2575), true, false, true, locale0, true, true);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("W", (PieDataset) defaultPieDataset0, false, true, true);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultBoxAndWhiskerCategoryDataset0, tableOrder0, (-4198));
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset(categoryToPieDataset0);
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("[SX(_%/", (PieDataset) defaultPieDataset0, false, false, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCPieDataset jDBCPieDataset0 = new JDBCPieDataset(connection0);
      Locale locale0 = Locale.KOREAN;
      JFreeChart jFreeChart0 = ChartFactory.createPieChart("", (PieDataset) jDBCPieDataset0, true, true, locale0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ChartTheme chartTheme0 = StandardChartTheme.createLegacyTheme();
      ChartFactory.setChartTheme(chartTheme0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset(15);
      JFreeChart jFreeChart0 = ChartFactory.createBoxAndWhiskerChart("", "ItemLabelAnchor.INSIDE5", "", (BoxAndWhiskerXYDataset) defaultBoxAndWhiskerXYDataset0, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      JFreeChart jFreeChart0 = ChartFactory.createBoxAndWhiskerChart("", "", "", (BoxAndWhiskerCategoryDataset) defaultBoxAndWhiskerCategoryDataset0, true);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      JDBCXYDataset jDBCXYDataset0 = new JDBCXYDataset(connection0);
      JFreeChart jFreeChart0 = ChartFactory.createPolarChart("Rotation.ANTICLOCKWISE", jDBCXYDataset0, true, true, false);
      assertEquals(1, jFreeChart0.getSubtitleCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StandardChartTheme standardChartTheme0 = (StandardChartTheme)ChartFactory.getChartTheme();
      ChartFactory.setChartTheme(standardChartTheme0);
      assertEquals("JFree", standardChartTheme0.getName());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Date[] dateArray0 = new Date[0];
      double[] doubleArray0 = new double[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset(10, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      JFreeChart jFreeChart0 = ChartFactory.createHighLowChart("+kk", "Darkness", (String) null, (OHLCDataset) defaultHighLowDataset0, (Timeline) segmentedTimeline0, false);
      assertEquals(0, jFreeChart0.getSubtitleCount());
  }

}

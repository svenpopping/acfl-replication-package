/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:16:17 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.lang.reflect.Array;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JTable;
import javax.swing.border.SoftBevelBorder;
import javax.swing.table.TableColumnModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.javax.swing.MockDefaultListSelectionModel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisState;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesTableModel;
import sun.java2d.SunGraphics2D;

public class Axis_ESTest_EvoSuite extends Axis_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      Comparable<CyclicNumberAxis>[] comparableArray0 = (Comparable<CyclicNumberAxis>[]) Array.newInstance(Comparable.class, 0);
      Comparable<RingPlot>[] comparableArray1 = (Comparable<RingPlot>[]) Array.newInstance(Comparable.class, 4);
      Number[][] numberArray0 = new Number[0][3];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(comparableArray0, comparableArray1, numberArray0, numberArray0);
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer(numberAxis0.DEFAULT_AXIS_LABEL_PAINT, extendedCategoryAxis0.DEFAULT_TICK_MARK_PAINT, numberAxis0.DEFAULT_AXIS_LABEL_PAINT, numberAxis0.DEFAULT_TICK_MARK_PAINT);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultIntervalCategoryDataset0, extendedCategoryAxis0, numberAxis0, waterfallBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart("", categoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(10, 500, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      Rectangle rectangle0 = new Rectangle();
      RectangleEdge rectangleEdge0 = categoryPlot0.getDomainAxisEdge();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      numberAxis0.draw(sunGraphics2D0, 0.0F, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
      assertEquals((-8355712), sunGraphics2D0.pixel);
      assertTrue(numberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("TextBlockAnchor.TOP_CENTER");
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer();
      Paint paint0 = candlestickRenderer0.getBaseOutlinePaint();
      categoryAxis0.setTickMarkPaint(paint0);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RectangleInsets rectangleInsets0 = new RectangleInsets(0.05, 0.05, 0.0, 0.05);
      categoryAxis0.setTickLabelInsets(rectangleInsets0);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(0.05);
      Paint paint0 = candlestickRenderer0.getVolumePaint();
      dateAxis0.setAxisLinePaint(paint0);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.05);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis("x.KPDx]H^}E77|!t", stringArray0);
      JFreeChart jFreeChart0 = new JFreeChart("", symbolAxis0.DEFAULT_TICK_LABEL_FONT, thermometerPlot0, true);
      jFreeChart0.createBufferedImage(1, 10);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("AxisLabelEntity: ");
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      extendedCategoryAxis0.setLabelInsets(rectangleInsets0);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("XgZ|8XV3*");
      Color color0 = (Color)CategoryPlot.DEFAULT_CROSSHAIR_PAINT;
      extendedCategoryAxis0.setLabelPaint(color0);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-3885), 0.2, "14`");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(categoryAxis3D0);
      cyclicNumberAxis0.notifyListeners(axisChangeEvent0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("m<>?dQ}?XUq^;KkO#p");
      logAxis0.fireChangeEvent();
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(69, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.drawAxisLine(sunGraphics2D0, 2, rectangle2D_Double0, rectangleEdge0);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SymbolAxis symbolAxis0 = new SymbolAxis("WKrT20", stringArray0);
      symbolAxis0.configure();
      assertTrue(symbolAxis0.isVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      categoryAxis3D0.getLabelEnclosure((Graphics2D) null, rectangleEdge0);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      DateAxis dateAxis0 = new DateAxis("#@I^ #3t )-h5XPK)]X", timeZone0, locale0);
      dateAxis0.getLabel();
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("2Mxk99%oZ'go1 ");
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.equals(extendedCategoryAxis0);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("FCK GK:<hr}i}");
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(0, sunGraphics2D0.foregroundColor, sunGraphics2D0.foregroundColor);
      TimeSeries timeSeries0 = new TimeSeries(true, "", "Null 'container' argument.");
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, false);
      MockDefaultListSelectionModel mockDefaultListSelectionModel0 = new MockDefaultListSelectionModel();
      JTable jTable0 = new JTable(timeSeriesTableModel0, (TableColumnModel) null, mockDefaultListSelectionModel0);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jTable0, 4277, 90, 0, 1243);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge(93);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      AxisState axisState0 = numberAxis3D0.draw(sunGraphics2D0, 10, rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertEquals(54.0, axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("MA8aR1}4LH");
      NumberAxis3D numberAxis3D1 = (NumberAxis3D)numberAxis3D0.clone();
      assertEquals(0.0F, numberAxis3D1.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D1.isTickLabelsVisible());
      assertTrue(numberAxis3D1.isAxisLineVisible());
      assertFalse(numberAxis3D1.isMinorTickMarksVisible());
      assertTrue(numberAxis3D1.isVisible());
      assertNotSame(numberAxis3D1, numberAxis3D0);
      assertEquals(0.0, numberAxis3D1.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D1.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D1.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("FCK GK:<hr}i}");
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset((Number[][]) null, (Number[][]) null);
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultIntervalCategoryDataset0, tableOrder0, (-2338));
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      categoryAxis3D0.addChangeListener(ringPlot0);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(",5c?gUQa");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(logarithmicAxis0);
      logarithmicAxis0.addChangeListener(combinedRangeCategoryPlot0);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("[N!__Olh^");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      logarithmicAxis0.setLabelInsets(thermometerPlot0.DEFAULT_INSETS, true);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("6))[H@%V<P;m=6h=");
      Color color0 = (Color)periodAxis0.getAxisLinePaint();
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(128, color0.getRed());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("._(C{yCW~B5^9=_m");
      double double0 = logAxis0.getLabelAngle();
      assertTrue(logAxis0.isVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, double0, 0.01);
      assertFalse(logAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis("Null 'state' argument.");
      boolean boolean0 = numberAxis0.isVisible();
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(boolean0);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      RectangleInsets rectangleInsets0 = cyclicNumberAxis0.getTickLabelInsets();
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.getTickMarkStroke();
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("");
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      
      logarithmicAxis0.setAxisLineVisible(false);
      assertFalse(logarithmicAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D("MA8aR1}4LH");
      float float0 = numberAxis3D0.getTickMarkInsideLength();
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(numberAxis3D0.isVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("");
      boolean boolean0 = logAxis0.isTickLabelsVisible();
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(boolean0);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      Color color0 = (Color)logAxis0.getTickMarkPaint();
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(128, color0.getRed());
      assertTrue(logAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("bYw,qW#mD");
      boolean boolean0 = logarithmicAxis0.isTickMarksVisible();
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(boolean0);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SymbolAxis symbolAxis0 = new SymbolAxis("a`lCf3~", stringArray0);
      symbolAxis0.getTickLabelFont();
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertTrue(symbolAxis0.isVisible());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, symbolAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Q");
      extendedCategoryAxis0.getAxisLineStroke();
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateAxis dateAxis0 = new DateAxis("s+P=bJ9,)A", timeZone0);
      boolean boolean0 = dateAxis0.isMinorTickMarksVisible();
      assertFalse(boolean0);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Locale locale0 = Locale.JAPANESE;
      DateAxis dateAxis0 = new DateAxis(",d>KdXX", timeZone0, locale0);
      dateAxis0.getPlot();
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("org.jfree.chart.axis.Axis");
      Color color0 = (Color)periodAxis0.getTickLabelPaint();
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0, color0.getRed());
      assertTrue(periodAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("jGPESLtbV~\"Stl");
      double double0 = periodAxis0.getFixedDimension();
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("XgZ|8XV3*");
      RectangleInsets rectangleInsets0 = extendedCategoryAxis0.getLabelInsets();
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1597.0383062779263));
      Color color0 = (Color)cyclicNumberAxis0.getLabelPaint();
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0, color0.getRed());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      cyclicNumberAxis0.getLabel();
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      boolean boolean0 = numberAxis3D0.isAxisLineVisible();
      assertTrue(boolean0);
      assertTrue(numberAxis3D0.isVisible());
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertTrue(numberAxis3D0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("x.KPDx]H^}E77|!t");
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(0.05);
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(defaultValueDataset0);
      extendedCategoryAxis0.setPlot(thermometerPlot0);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("6))[H@%V<P;m=6h=");
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(periodAxis0);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(69, 10);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("6))[H@%V<P;m=6h=");
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      AxisState axisState0 = extendedCategoryAxis0.draw(sunGraphics2D0, 1, rectangle2D_Double0, rectangle2D_Double0, rectangleEdge0, plotRenderingInfo0);
      assertEquals((-16777216), sunGraphics2D0.pixel);
      assertEquals((-22.96875), axisState0.getCursor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("_<IC4fs4q%~)W");
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(subCategoryAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedDomainCategoryPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(2, 500, chartRenderingInfo0);
      assertEquals(3, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      boolean boolean0 = dateAxis0.hasListener(combinedDomainXYPlot0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(boolean0);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("tEDa.02^");
      PiePlot3D piePlot3D0 = new PiePlot3D();
      logAxis0.removeChangeListener(piePlot3D0);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'paint' argument.");
      ModuloAxis moduloAxis0 = new ModuloAxis("Null 'paint' argument.", logarithmicAxis0.DEFAULT_RANGE);
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((-563.642685), 0.0);
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultStatisticalCategoryDataset0, categoryAxis3D0, moduloAxis0, stackedBarRenderer3D0);
      moduloAxis0.removeChangeListener(categoryPlot0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(logarithmicAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart(">[4*!w\">uE*u7j", combinedDomainXYPlot0);
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(standardEntityCollection0);
      jFreeChart0.createBufferedImage(1689, 1689, chartRenderingInfo0);
      assertEquals(4, standardEntityCollection0.getEntityCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("0#%j/bPW11");
      DateAxis dateAxis0 = new DateAxis("tE");
      dateAxis0.setTickMarkPaint(categoryAxis3D0.DEFAULT_TICK_LABEL_PAINT);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("bYw,q#mD");
      dateAxis0.setTickMarkStroke(dateAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("8J:RG]1M?jj}dU%@Ng");
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      
      logarithmicAxis0.setTickMarksVisible(false);
      assertFalse(logarithmicAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("0#%j/bPW11");
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      
      categoryAxis3D0.setTickMarksVisible(true);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-1508.4863));
      CategoryAxis categoryAxis0 = new CategoryAxis();
      categoryAxis0.setTickLabelInsets(cyclicNumberAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      Color color0 = Color.blue;
      categoryAxis0.setTickLabelPaint(color0);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      Font font0 = new Font("", 500, 500);
      logAxis0.setTickLabelFont(font0);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertTrue(logAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setTickLabelFont(logAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      
      dateAxis0.setMinorTickMarksVisible(true);
      assertTrue(dateAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("?e");
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      
      subCategoryAxis0.setMinorTickMarksVisible(false);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("W3qd");
      assertTrue(categoryAxis0.isTickLabelsVisible());
      
      categoryAxis0.setTickLabelsVisible(false);
      assertFalse(categoryAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("W3qd");
      assertTrue(categoryAxis0.isTickLabelsVisible());
      
      categoryAxis0.setTickLabelsVisible(true);
      assertTrue(categoryAxis0.isVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("6))[H@%V<P;m=6h=");
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(69, 10);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      periodAxis0.setAxisLineStroke(((SunGraphics2D) graphics2D0).stroke);
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("6))[H@%V<P;m=6h=");
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) null);
      Paint paint0 = thermometerPlot0.getThermometerPaint();
      periodAxis0.setAxisLinePaint(paint0);
      Color color0 = (Color)periodAxis0.getAxisLinePaint();
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(0, color0.getBlue());
      assertTrue(periodAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D((String) null);
      categoryAxis3D0.setLabelInsets(cyclicNumberAxis0.DEFAULT_AXIS_LABEL_INSETS, true);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(defaultStatisticalCategoryDataset0, tableOrder0, 500);
      RingPlot ringPlot0 = new RingPlot(categoryToPieDataset0);
      logAxis0.setLabelFont(ringPlot0.DEFAULT_LABEL_FONT);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'paint' argument.");
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelFont(logarithmicAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("?e");
      subCategoryAxis0.setLabel("bYw,q#mD");
      assertEquals("bYw,q#mD", subCategoryAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabel("?e");
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      assertTrue(periodAxis0.isVisible());
      
      periodAxis0.setVisible(false);
      assertFalse(periodAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("<TlkEe");
      assertTrue(categoryAxis3D0.isVisible());
      
      categoryAxis3D0.setVisible(true);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'paint' argument.");
      ModuloAxis moduloAxis0 = new ModuloAxis("Null 'paint' argument.", logarithmicAxis0.DEFAULT_RANGE);
      moduloAxis0.setTickMarkInsideLength((-969.3F));
      assertEquals((-969.3F), moduloAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      cyclicNumberAxis0.getLabelToolTip();
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'paint' argument.");
      ModuloAxis moduloAxis0 = new ModuloAxis("Null 'paint' argument.", logarithmicAxis0.DEFAULT_RANGE);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      categoryAxis3D0.setLabelInsets(moduloAxis0.DEFAULT_TICK_LABEL_INSETS);
      categoryAxis3D0.setLabelInsets(moduloAxis0.DEFAULT_TICK_LABEL_INSETS);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertTrue(categoryAxis3D0.isVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'paint' argument.");
      logarithmicAxis0.setMinorTickMarkOutsideLength((-969.3F));
      assertEquals((-969.3F), logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      cyclicNumberAxis0.getLabelURL();
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'paint' argument.");
      ModuloAxis moduloAxis0 = new ModuloAxis("Null 'paint' argument.", logarithmicAxis0.DEFAULT_RANGE);
      moduloAxis0.setLabelToolTip("org.jfree.chart.text.TextUtilities");
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
      assertTrue(moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertTrue(moduloAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("vLf0}4Bp4FCs^%p`,:");
      logarithmicAxis0.setLabelAngle(1.0E-5);
      assertEquals(1.0E-5, logarithmicAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Null 't' argument.");
      float float0 = extendedCategoryAxis0.getMinorTickMarkOutsideLength();
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, float0, 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("tE");
      dateAxis0.setTickMarkOutsideLength((-237.85F));
      assertEquals((-237.85F), dateAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SymbolAxis symbolAxis0 = new SymbolAxis("3,eU_.NL1 721N", stringArray0);
      float float0 = symbolAxis0.getMinorTickMarkInsideLength();
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2.0F, symbolAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(symbolAxis0.isAxisLineVisible());
      assertTrue(symbolAxis0.isTickLabelsVisible());
      assertFalse(symbolAxis0.isMinorTickMarksVisible());
      assertTrue(symbolAxis0.isTickMarksVisible());
      assertTrue(symbolAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      numberAxis3D0.setLabelURL((String) null);
      assertTrue(numberAxis3D0.isVisible());
      assertTrue(numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(numberAxis3D0.isMinorTickMarksVisible());
      assertTrue(numberAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'paint' argument.");
      logarithmicAxis0.setMinorTickMarkInsideLength(10);
      assertEquals(10.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "_uhJz");
      DateAxis dateAxis0 = new DateAxis("_uhJz", simpleTimeZone0);
      dateAxis0.setFixedDimension((-1));
      assertEquals((-1.0), dateAxis0.getFixedDimension(), 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      JFreeChart jFreeChart0 = new JFreeChart("", combinedDomainXYPlot0);
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(500, 500);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("FCK GK:<hr}i}");
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(0, sunGraphics2D0.backgroundColor, sunGraphics2D0.backgroundColor);
      TimeSeries timeSeries0 = new TimeSeries(true, "", "Null 'container' argument.");
      TimeSeriesTableModel timeSeriesTableModel0 = new TimeSeriesTableModel(timeSeries0, false);
      MockDefaultListSelectionModel mockDefaultListSelectionModel0 = new MockDefaultListSelectionModel();
      JTable jTable0 = new JTable(timeSeriesTableModel0, (TableColumnModel) null, mockDefaultListSelectionModel0);
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jTable0, 4277, 90, 0, 1243);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis3D0);
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge(93);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      categoryAxis3D0.draw(sunGraphics2D0, (-4017.302), rectangle0, rectangle0, rectangleEdge0, plotRenderingInfo0);
      assertEquals((-16777216), sunGraphics2D0.eargb);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
  }
}

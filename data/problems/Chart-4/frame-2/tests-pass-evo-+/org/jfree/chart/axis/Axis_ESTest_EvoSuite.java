/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:16:23 GMT 2020
 */

package org.jfree.chart.axis;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.AxisChangeEvent;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.LookupPaintScale;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.title.PaintScaleLegend;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultPieDataset;
import sun.java2d.SunGraphics2D;
import sun.util.calendar.ZoneInfo;

public class Axis_ESTest_EvoSuite extends Axis_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setMinorTickMarkOutsideLength(1304.0254F);
      float float0 = dateAxis0.getMinorTickMarkOutsideLength();
      assertEquals(1304.0254F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("5*y\"xZl%\"");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      periodAxis0.setTickMarkPaint(combinedRangeXYPlot0.DEFAULT_CROSSHAIR_PAINT);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(cyclicNumberAxis0);
      cyclicNumberAxis0.setTickLabelInsets(combinedRangeCategoryPlot0.DEFAULT_INSETS);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("7Zo4k");
      extendedCategoryAxis0.setTickLabelPaint(logAxis0.DEFAULT_AXIS_LINE_PAINT);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("vTON");
      dateAxis0.setTickLabelsVisible(false);
      assertFalse(dateAxis0.isTickLabelsVisible());
      
      dateAxis0.setTickLabelsVisible(true);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("org.jfree.chart.labels.StandardCategoryItemLabelGenerator");
      BasicStroke basicStroke0 = (BasicStroke)WaferMapPlot.DEFAULT_CROSSHAIR_STROKE;
      logarithmicAxis0.setAxisLineStroke(basicStroke0);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      RectangleInsets rectangleInsets0 = new RectangleInsets();
      categoryAxis0.setLabelInsets(rectangleInsets0);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      DateAxis dateAxis0 = new DateAxis("NPf1@=");
      categoryAxis0.setLabelFont(dateAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("");
      AxisChangeEvent axisChangeEvent0 = new AxisChangeEvent(dateAxis0);
      dateAxis0.notifyListeners(axisChangeEvent0);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("V");
      extendedCategoryAxis0.fireChangeEvent();
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'hour' argument.");
      logarithmicAxis0.configure();
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      valueAxis0.getLabel();
      assertEquals(2.0F, valueAxis0.getTickMarkOutsideLength(), 0.01F);
      assertFalse(valueAxis0.isAxisLineVisible());
      assertEquals(2.0F, valueAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, valueAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, valueAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, valueAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(valueAxis0.isVisible());
      assertTrue(valueAxis0.isTickLabelsVisible());
      assertTrue(valueAxis0.isTickMarksVisible());
      assertFalse(valueAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ModuloAxis moduloAxis0 = new ModuloAxis("", (Range) null);
      moduloAxis0.getLabel();
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(moduloAxis0.isAxisLineVisible());
      assertTrue(moduloAxis0.isVisible());
      assertTrue(moduloAxis0.isTickLabelsVisible());
      assertTrue(moduloAxis0.isTickMarksVisible());
      assertFalse(moduloAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis("T");
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      categoryAxis0.addChangeListener(ringPlot0);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis0.isMinorTickMarksVisible());
      assertTrue(categoryAxis0.isVisible());
      assertTrue(categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01);
      assertTrue(categoryAxis0.isAxisLineVisible());
      assertTrue(categoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("\"rR.b#q~o");
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(periodAxis0);
      periodAxis0.addChangeListener((AxisChangeListener) null);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isAxisLineVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      categoryAxis3D0.setLabelInsets(categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS, true);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_AXIS_LABEL_INSETS;
      cyclicNumberAxis0.setLabelInsets(rectangleInsets0, false);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      Color color0 = (Color)cyclicNumberAxis0.getAxisLinePaint();
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals((-8355712), color0.getRGB());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      double double0 = dateAxis0.getLabelAngle();
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      ValueAxis valueAxis0 = thermometerPlot0.getRangeAxis();
      boolean boolean0 = valueAxis0.isVisible();
      assertEquals(2.0F, valueAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, valueAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(valueAxis0.isTickMarksVisible());
      assertFalse(valueAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, valueAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, valueAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(valueAxis0.isTickLabelsVisible());
      assertFalse(valueAxis0.isAxisLineVisible());
      assertEquals(0.0, valueAxis0.getLabelAngle(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      RectangleInsets rectangleInsets0 = extendedCategoryAxis0.getTickLabelInsets();
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(822, "e~");
      Locale locale0 = Locale.ITALY;
      DateAxis dateAxis0 = new DateAxis("e~", simpleTimeZone0, locale0);
      dateAxis0.getTickMarkStroke();
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("FfkM'0`");
      boolean boolean0 = categoryAxis3D0.isTickLabelsVisible();
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(boolean0);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("Z)8y'`Ibcp`");
      Color color0 = (Color)extendedCategoryAxis0.getTickMarkPaint();
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(128, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getTickLabelFont();
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0, (-956.8456440427), "os$b*M,C)+w");
      cyclicNumberAxis0.getAxisLineStroke();
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis((String) null);
      periodAxis0.getLabelFont();
      assertTrue(periodAxis0.isVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("zq9\"3<y@A$GR2");
      boolean boolean0 = logAxis0.isMinorTickMarksVisible();
      assertTrue(logAxis0.isVisible());
      assertFalse(boolean0);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getPlot();
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      Color color0 = (Color)extendedCategoryAxis0.getTickLabelPaint();
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0, color0.getRed());
      assertTrue(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      double double0 = numberAxis0.getFixedDimension();
      assertEquals(0.0, double0, 0.01);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      RectangleInsets rectangleInsets0 = dateAxis0.getLabelInsets();
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(3.0);
      Color color0 = (Color)cyclicNumberAxis0.getLabelPaint();
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals((-16777216), color0.getRGB());
      assertTrue(cyclicNumberAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("category=");
      categoryAxis3D0.getLabel();
      assertTrue(categoryAxis3D0.isVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(5.0, (-956.8456440427), "os$b*M,C)+w");
      boolean boolean0 = cyclicNumberAxis0.isAxisLineVisible();
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(boolean0);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("T");
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      RingPlot ringPlot0 = new RingPlot(defaultPieDataset0);
      logarithmicAxis0.setPlot(ringPlot0);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertTrue(logarithmicAxis0.isVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = (DateAxis)dateAxis0.clone();
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertTrue(dateAxis1.isVisible());
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertTrue(boolean0);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
      assertNotSame(dateAxis1, dateAxis0);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      DateAxis dateAxis1 = (DateAxis)dateAxis0.clone();
      assertTrue(dateAxis1.equals((Object)dateAxis0));
      
      dateAxis1.setLabelToolTip("-]");
      boolean boolean0 = dateAxis0.equals(dateAxis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(2.0F, (-3871.0));
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      CategoryPlot categoryPlot0 = new CategoryPlot(defaultKeyedValues2DDataset0, categoryAxis3D0, cyclicNumberAxis0, layeredBarRenderer0);
      JFreeChart jFreeChart0 = new JFreeChart(categoryPlot0);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(78, 500, 2935.3518096, 0.0, chartRenderingInfo0);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      LookupPaintScale lookupPaintScale0 = new LookupPaintScale(4.0, 2935.3518096, categoryAxis3D0.DEFAULT_AXIS_LINE_PAINT);
      PaintScaleLegend paintScaleLegend0 = new PaintScaleLegend(lookupPaintScale0, cyclicNumberAxis0);
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)paintScaleLegend0.getBounds();
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)plotRenderingInfo0.getDataArea();
      categoryAxis3D0.draw(sunGraphics2D0, 3.0, rectangle2D_Float0, rectangle2D_Double0, paintScaleLegend0.DEFAULT_POSITION, plotRenderingInfo0);
      assertEquals((-8355712), sunGraphics2D0.eargb);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      MeterPlot meterPlot0 = new MeterPlot();
      boolean boolean0 = numberAxis0.hasListener(meterPlot0);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertFalse(boolean0);
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis("Null 'hour' argument.");
      PolarPlot polarPlot0 = new PolarPlot();
      logarithmicAxis0.removeChangeListener(polarPlot0);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01);
      assertTrue(logarithmicAxis0.isTickMarksVisible());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertFalse(logarithmicAxis0.isMinorTickMarksVisible());
      assertTrue(logarithmicAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("vTON");
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(dateAxis0);
      dateAxis0.removeChangeListener(combinedDomainXYPlot0);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Null 'insets' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      jFreeChart0.createBufferedImage(500, 420);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      Stroke stroke0 = statisticalBarRenderer0.getErrorIndicatorStroke();
      subCategoryAxis0.setTickMarkStroke(stroke0);
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Null 'insets' argument.");
      NumberAxis numberAxis0 = new NumberAxis("Null 'insets' argument.");
      numberAxis0.setTickMarkStroke(logAxis0.DEFAULT_AXIS_LINE_STROKE);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertTrue(numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("4)z9C95}E.X)C!EC[<");
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      
      subCategoryAxis0.setTickMarksVisible(false);
      assertFalse(subCategoryAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("Null 'font' argument.");
      assertTrue(dateAxis0.isTickMarksVisible());
      
      dateAxis0.setTickMarksVisible(true);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis("V");
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      Paint paint0 = defaultPolarItemRenderer0.getItemLabelPaint((-2626), 91, false);
      extendedCategoryAxis0.setTickLabelPaint(paint0);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      Font font0 = Font.decode((String) null);
      numberAxis0.setTickLabelFont(font0);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickMarksVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis((String) null);
      numberAxis0.setTickLabelFont(numberAxis0.DEFAULT_AXIS_LABEL_FONT);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01);
      assertTrue(numberAxis0.isVisible());
      assertTrue(numberAxis0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(numberAxis0.isTickLabelsVisible());
      assertFalse(numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(numberAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("org.jfree.chart.event.AxisChangeListener");
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      
      categoryAxis3D0.setMinorTickMarksVisible(true);
      assertTrue(categoryAxis3D0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("Null 'state' argument.");
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      
      subCategoryAxis0.setMinorTickMarksVisible(false);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("vTON");
      assertTrue(dateAxis0.isTickLabelsVisible());
      
      dateAxis0.setTickLabelsVisible(true);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((-109.25312970481923), "");
      SystemColor systemColor0 = SystemColor.textHighlight;
      cyclicNumberAxis0.setAxisLinePaint(systemColor0);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("");
      categoryAxis3D0.setLabelInsets(categoryAxis3D0.DEFAULT_TICK_LABEL_INSETS, false);
      assertTrue(categoryAxis3D0.isVisible());
      assertFalse(categoryAxis3D0.isMinorTickMarksVisible());
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(categoryAxis3D0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, "aISqXQ ");
      SystemColor systemColor0 = SystemColor.textText;
      cyclicNumberAxis0.setLabelPaint(systemColor0);
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(500, 0.05);
      cyclicNumberAxis0.setLabelFont(periodAxis0.DEFAULT_TICK_LABEL_FONT);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setLabel("]w-^zi4kUs_V~`h3Fn");
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("-]");
      periodAxis0.setLabel("org.jfree.chart.event.AxisChangeListener");
      assertEquals("org.jfree.chart.event.AxisChangeListener", periodAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.setLabel("");
      assertTrue(subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(subCategoryAxis0.isAxisLineVisible());
      assertFalse(subCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(subCategoryAxis0.isVisible());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(subCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, subCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setLabel((String) null);
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertTrue(logAxis0.isTickMarksVisible());
      assertTrue(logAxis0.isVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertTrue(logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(logAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(".XXthk|C0");
      assertTrue(extendedCategoryAxis0.isVisible());
      
      extendedCategoryAxis0.setVisible(false);
      assertFalse(extendedCategoryAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis("vTON");
      assertTrue(dateAxis0.isVisible());
      
      dateAxis0.setVisible(true);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setTickMarkInsideLength(153.7744F);
      assertEquals(153.7744F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.getLabelToolTip();
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isAxisLineVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PeriodAxis periodAxis0 = new PeriodAxis("");
      periodAxis0.getLabelURL();
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(periodAxis0.isAxisLineVisible());
      assertTrue(periodAxis0.isTickLabelsVisible());
      assertTrue(periodAxis0.isTickMarksVisible());
      assertTrue(periodAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis((String) null);
      extendedCategoryAxis0.setLabelAngle(0.0F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01);
      assertTrue(extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertFalse(extendedCategoryAxis0.isMinorTickMarksVisible());
      assertTrue(extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(extendedCategoryAxis0.isVisible());
      assertTrue(extendedCategoryAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      logAxis0.setTickMarkOutsideLength(0.3F);
      assertEquals(0.3F, logAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0);
      float float0 = cyclicNumberAxis0.getMinorTickMarkInsideLength();
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.CANADA_FRENCH;
      DateAxis dateAxis0 = new DateAxis("1955.7", zoneInfo0, locale0);
      DateAxis dateAxis1 = (DateAxis)dateAxis0.clone();
      assertFalse(dateAxis1.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis1.getLabelAngle(), 0.01);
      assertTrue(dateAxis1.isTickMarksVisible());
      assertTrue(dateAxis1.isVisible());
      assertNotSame(dateAxis1, dateAxis0);
      assertTrue(dateAxis1.isTickLabelsVisible());
      assertTrue(dateAxis1.isAxisLineVisible());
      assertEquals(0.0F, dateAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis1.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D("&0gWsHOlw~");
      assertTrue(categoryAxis3D0.isAxisLineVisible());
      
      categoryAxis3D0.setAxisLineVisible(false);
      assertFalse(categoryAxis3D0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(1507.3432, 4600.36, "");
      cyclicNumberAxis0.setLabelURL("");
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis("");
      subCategoryAxis0.setMinorTickMarkInsideLength(1946.5714F);
      assertEquals(1946.5714F, subCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      dateAxis0.setFixedDimension(0.0);
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01);
      assertTrue(dateAxis0.isTickMarksVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(0.0, 0.0);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(cyclicNumberAxis0);
      JFreeChart jFreeChart0 = new JFreeChart("-]", combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 10, 2821, 2, (-3922), 2821, 1, true, true, true, true, false, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(2359, 2359, 10, chartRenderingInfo0);
      assertTrue(cyclicNumberAxis0.isTickLabelsVisible());
      assertFalse(cyclicNumberAxis0.isMinorTickMarksVisible());
      assertTrue(cyclicNumberAxis0.isVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01);
      assertTrue(cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      Locale locale0 = Locale.CANADA_FRENCH;
      DateAxis dateAxis0 = new DateAxis("1955.7", zoneInfo0, locale0);
      float float0 = dateAxis0.getTickMarkInsideLength();
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertTrue(dateAxis0.isTickLabelsVisible());
      assertFalse(dateAxis0.isMinorTickMarksVisible());
      assertTrue(dateAxis0.isVisible());
      assertTrue(dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(dateAxis0.isAxisLineVisible());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis("Null 'insets' argument.");
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(logAxis0);
      JFreeChart jFreeChart0 = new JFreeChart(combinedRangeXYPlot0);
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, 500, 10, 10, 0, 223, 10, true, false, true, true, true, true, true);
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      jFreeChart0.createBufferedImage(500, 1186, 0.0, 0.05, chartRenderingInfo0);
      assertTrue(logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01);
      assertTrue(logAxis0.isAxisLineVisible());
      assertFalse(logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertTrue(logAxis0.isTickLabelsVisible());
  }
}

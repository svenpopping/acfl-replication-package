/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:38:40 GMT 2020
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.PrintStream;
import java.text.ParseException;
import java.util.ConcurrentModificationException;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.util.Localizable;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;

public class MathRuntimeException_ESTest_EvoSuite extends MathRuntimeException_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.NOT_POWER_OF_TWO_PLUS_ONE;
      Object[] objectArray0 = new Object[0];
      ArithmeticException arithmeticException0 = MathRuntimeException.createArithmeticException((Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(arithmeticException0, "{0} is not a power of 2 plus one", objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("7+");
      mathRuntimeException0.printStackTrace((PrintStream) mockPrintStream0);
      assertEquals("{0} is not a power of 2 plus one", mathRuntimeException0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("", objectArray0);
      String string0 = mathRuntimeException0.getPattern();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException((Localizable) null, objectArray0);
      String string0 = mathRuntimeException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(mockThrowable0);
      String string0 = mathRuntimeException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      IllegalStateException illegalStateException0 = MathRuntimeException.createIllegalStateException("7R", objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(illegalStateException0, (Localizable) null, objectArray0);
      Localizable localizable0 = mathRuntimeException0.getLocalizablePattern();
      assertNull(localizable0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      NullPointerException nullPointerException0 = MathRuntimeException.createNullPointerException("ZG+[f6-bb4E][", objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(nullPointerException0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(iOException0, (Localizable) null, objectArray0);
      Locale locale0 = Locale.KOREAN;
      String string0 = mathRuntimeException0.getMessage(locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.CARDAN_ANGLES_SINGULARITY;
      Object[] objectArray0 = new Object[2];
      ParseException parseException0 = MathRuntimeException.createParseException(119, (Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0);
      Locale locale0 = Locale.FRANCE;
      String string0 = mathRuntimeException0.getMessage(locale0);
      assertEquals("Cardan angles singularity", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException((Localizable) null, objectArray0);
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((Throwable) mathRuntimeException0);
      assertNotNull(illegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY;
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((Localizable) localizedFormats0, (Object[]) null);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(illegalArgumentException0, localizedFormats0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE;
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(localizedFormats0, (Object[]) null);
      Object[] objectArray0 = mathRuntimeException0.getArguments();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      LocalizedFormats localizedFormats0 = LocalizedFormats.NOT_POSITIVE_UPPER_BOUND;
      UnsupportedOperationException unsupportedOperationException0 = MathRuntimeException.createUnsupportedOperationException(localizedFormats0, objectArray0);
      RuntimeException runtimeException0 = MathRuntimeException.createInternalError(unsupportedOperationException0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(runtimeException0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.NO_FEASIBLE_SOLUTION;
      Object[] objectArray0 = new Object[4];
      NoSuchElementException noSuchElementException0 = MathRuntimeException.createNoSuchElementException((Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(noSuchElementException0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE;
      Object[] objectArray0 = new Object[8];
      ConcurrentModificationException concurrentModificationException0 = MathRuntimeException.createConcurrentModificationException((Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(concurrentModificationException0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR;
      Object[] objectArray0 = new Object[9];
      IllegalStateException illegalStateException0 = MathRuntimeException.createIllegalStateException((Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(illegalStateException0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      IllegalStateException illegalStateException0 = MathRuntimeException.createIllegalStateException("org.apache.commons.math.MathRuntimeException$7", objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(illegalStateException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException("{0} != {1}", objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(illegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException("", objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(illegalArgumentException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.COVARIANCE_MATRIX;
      Object[] objectArray0 = new Object[3];
      EOFException eOFException0 = MathRuntimeException.createEOFException((Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(eOFException0);
      MathRuntimeException mathRuntimeException1 = new MathRuntimeException(mathRuntimeException0, "empty string for imaginary character", objectArray0);
      assertFalse(mathRuntimeException1.equals((Object)mathRuntimeException0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.NOT_POWER_OF_TWO_PLUS_ONE;
      Object[] objectArray0 = new Object[1];
      ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException0 = MathRuntimeException.createArrayIndexOutOfBoundsException((Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(arrayIndexOutOfBoundsException0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR;
      Object[] objectArray0 = new Object[9];
      ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException0 = MathRuntimeException.createArrayIndexOutOfBoundsException((Localizable) localizedFormats0, objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(arrayIndexOutOfBoundsException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN;
      Object[] objectArray0 = new Object[6];
      ArithmeticException arithmeticException0 = MathRuntimeException.createArithmeticException((Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(arithmeticException0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      ArithmeticException arithmeticException0 = MathRuntimeException.createArithmeticException("nlF/bw<", (Object[]) stringArray0);
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((Throwable) arithmeticException0);
      assertNotNull(illegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1;
      Object[] objectArray0 = new Object[3];
      ParseException parseException0 = MathRuntimeException.createParseException(297, (Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0, "}E<buOOsVP}~q&", objectArray0);
      String string0 = mathRuntimeException0.getPattern();
      assertEquals("}E<buOOsVP}~q&", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ConcurrentModificationException concurrentModificationException0 = MathRuntimeException.createConcurrentModificationException("", objectArray0);
      RuntimeException runtimeException0 = MathRuntimeException.createInternalError(concurrentModificationException0);
      IOException iOException0 = MathRuntimeException.createIOException(runtimeException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1;
      Object[] objectArray0 = new Object[3];
      ParseException parseException0 = MathRuntimeException.createParseException(297, (Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0, "}E<buOOsVP}~q&", objectArray0);
      String string0 = mathRuntimeException0.getLocalizedMessage();
      assertEquals("}E<buOOsVP}~q&", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1;
      Object[] objectArray0 = new Object[3];
      ParseException parseException0 = MathRuntimeException.createParseException(297, (Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0, "}E<buOOsVP}~q&", objectArray0);
      mathRuntimeException0.printStackTrace();
      assertEquals("}E<buOOsVP}~q&", mathRuntimeException0.getPattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      LocalizedFormats localizedFormats0 = LocalizedFormats.NOT_POSITIVE_UPPER_BOUND;
      UnsupportedOperationException unsupportedOperationException0 = MathRuntimeException.createUnsupportedOperationException(localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(unsupportedOperationException0);
      Localizable localizable0 = mathRuntimeException0.getLocalizablePattern();
      assertEquals("{0}", localizable0.getSourceString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY;
      Object[] objectArray0 = new Object[9];
      ParseException parseException0 = MathRuntimeException.createParseException((-1), (Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0);
      Object[] objectArray1 = mathRuntimeException0.getArguments();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      NullPointerException nullPointerException0 = MathRuntimeException.createNullPointerException("", objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(nullPointerException0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1;
      Object[] objectArray0 = new Object[3];
      ParseException parseException0 = MathRuntimeException.createParseException(297, (Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0, "}E<buOOsVP}~q&", objectArray0);
      String string0 = mathRuntimeException0.getMessage();
      assertEquals("}E<buOOsVP}~q&", string0);
  }
}

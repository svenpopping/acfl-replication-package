/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:40:36 GMT 2020
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class PoissonDistributionImpl_ESTest_EvoSuite extends PoissonDistributionImpl_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(650.24001);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(655, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1180.593798016, (-5922.74901), 1645);
      double double0 = poissonDistributionImpl0.probability(145);
      assertEquals(6.6605E-320, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1180.593798016, (-5922.74901), 1645);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(3221);
      assertEquals(1180.593798016, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(697.66072634);
      double double0 = poissonDistributionImpl0.cumulativeProbability((-203));
      assertEquals(0.0, double0, 0.01);
      assertEquals(697.66072634, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(2293.705539359366, 97.5497);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(9.140260083262505E-9);
      double double0 = poissonDistributionImpl0.cumulativeProbability(0.0, 9.140260083262505E-9);
      assertEquals(0.99999999085974, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(9.140260083262505E-9);
      double double0 = poissonDistributionImpl0.cumulativeProbability(Integer.MAX_VALUE);
      assertEquals(9.140260083262505E-9, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 3692);
      double double0 = poissonDistributionImpl0.probability(3692);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 3692);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(9.140260083262505E-9);
      double double0 = poissonDistributionImpl0.probability((-1778));
      assertEquals(0.0, double0, 0.01);
      assertEquals(9.140260083262505E-9, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(9.140260083262505E-9);
      double double0 = poissonDistributionImpl0.normalApproximateProbability((-1778));
      assertEquals(9.140260083262505E-9, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(9.140260083262505E-9);
      int int0 = poissonDistributionImpl0.getDomainUpperBound(9.140260083262505E-9);
      assertEquals(9.140260083262505E-9, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(9.140260083262505E-9);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(9.140260083262505E-9, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(9.140260083262505E-9);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(9.140260083262505E-9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1091.750894960557, (double) 20);
      poissonDistributionImpl0.getDomainLowerBound(2520.857589491698);
  }
}

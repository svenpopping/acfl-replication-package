/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:50:44 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;

public class PeriodType_ESTest_EvoSuite extends PeriodType_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.FOUR;
      PeriodType periodType0 = days0.getPeriodType();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertEquals("Days", periodType0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals("YearsNoYears", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals("Days", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals("MonthsNoMonths", periodType1.getName());
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Days days0 = hours0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Minutes minutes0 = weeks0.toStandardMinutes();
      PeriodType periodType0 = minutes0.getPeriodType();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals(0, periodType1.size());
      assertEquals("MinutesNoMinutes", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      PeriodType periodType2 = periodType1.withWeeksRemoved();
      assertEquals(0, periodType2.size());
      assertEquals("HoursNoHours", periodType2.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals("Years", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      
      Seconds seconds0 = Seconds.THREE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(5, int0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Months months0 = Months.TWO;
      int int0 = periodType0.getIndexedField(months0, 0);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      Days days0 = Days.THREE;
      int[] intArray0 = new int[6];
      boolean boolean0 = periodType0.addIndexedField(days0, 4, intArray0, 292271022);
      assertArrayEquals(new int[] {0, 0, 0, 292271022, 0, 0}, intArray0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      Months months0 = Months.NINE;
      int[] intArray0 = new int[2];
      boolean boolean0 = periodType0.addIndexedField(months0, 585, intArray0, 0);
      assertFalse(boolean0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("R]dP+", durationFieldTypeArray0, intArray0);
      periodType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.seconds();
      boolean boolean0 = periodType1.equals(periodType0);
      assertFalse(boolean0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      boolean boolean0 = periodType0.equals(periodType0);
      assertEquals("Months", periodType0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Months months0 = Months.THREE;
      PeriodType periodType0 = months0.getPeriodType();
      int int0 = periodType0.getIndexedField(months0, 0);
      assertEquals(0, int0);
      assertEquals("Months", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(0, int0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals((-1), int0);
      assertEquals("Millis", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodType.millis();
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodType.seconds();
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodType.minutes();
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodType.hours();
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodType.days();
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodType.months();
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodType.years();
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals("Years", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodType.time();
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeriodType.dayTime();
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      assertEquals("DayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodType.yearDay();
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodType.yearDayTime();
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeriodType.yearWeekDay();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodType.yearWeekDayTime();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodType.yearMonthDay();
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeriodType.yearMonthDayTime();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodType.standard();
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[8];
      PeriodType periodType0 = new PeriodType("R]dP+", durationFieldTypeArray0, intArray0);
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals("R]dP+NoSeconds", periodType1.getName());
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals(4, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      PeriodType periodType0 = months0.getPeriodType();
      int int0 = periodType0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Months months0 = Months.THREE;
      PeriodType periodType0 = months0.getPeriodType();
      String string0 = periodType0.getName();
      assertEquals("Months", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Days days0 = Days.FOUR;
      PeriodType periodType0 = days0.getPeriodType();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals("DaysNoDays", periodType1.getName());
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals("YearMonthDayTimeNoMonths", periodType1.getName());
      assertEquals(6, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals(6, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      
      Integer integer0 = new Integer(1);
      boolean boolean0 = periodType0.equals(integer0);
      assertFalse(boolean0);
      assertEquals("Weeks", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals(6, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertEquals("Millis", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1), (-1));
      int[] intArray0 = new int[4];
      boolean boolean0 = periodType0.setIndexedField(mutablePeriod0, 0, intArray0, 0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      boolean boolean0 = periodType0.isSupported((DurationFieldType) null);
      assertEquals("Days", periodType0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(0L, dateTimeZone0);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.days();
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals(2, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      
      periodType0.getFieldType(0);
      assertEquals("Days", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      
      String string0 = periodType0.toString();
      assertEquals(2, periodType0.size());
      assertEquals("PeriodType[YearDay]", string0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:38:08 GMT 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Abs;
import org.apache.commons.math.analysis.function.Atanh;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BaseAbstractUnivariateRealSolver_ESTest_EvoSuite extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0);
      laguerreSolver0.verifySequence((-719.424086049), 0.0, 527.7221731);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(0.95, (-1562.0));
      Gaussian gaussian0 = new Gaussian();
      riddersSolver0.setup(27, gaussian0, 1365.3813, 1365.3813, 0.0);
      riddersSolver0.incrementEvaluationCount();
      assertEquals(1365.3813, riddersSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver((-2160.9257), (-2160.9257));
      bisectionSolver0.verifyInterval(0.0, 1.0);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-2160.9257), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-2160.9257), bisectionSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2((-52.42), (-52.42));
      boolean boolean0 = mullerSolver2_0.isSequence((-2605.499), 1126.1612506774, 2248.8);
      assertTrue(boolean0);
      assertEquals((-52.42), mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals((-52.42), mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      boolean boolean0 = bisectionSolver0.isSequence(2599.686, 1.0, 3039.733);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.5);
      double[] doubleArray0 = new double[9];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      laguerreSolver0.solve(1755, polynomialFunction0, 0.0);
      laguerreSolver0.isBracketing(0.0, 1755);
      assertEquals(Double.NaN, laguerreSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.5;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      laguerreSolver0.setup(0, polynomialFunction0, 1.0E-14, 0.0, 0.5);
      laguerreSolver0.isBracketing(0.5, 0.5);
      assertEquals(1.0E-14, laguerreSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(1906.0, 1906.0);
      laguerreSolver0.getMaxEvaluations();
      assertEquals(1906.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1906.0, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0952233225107193, (-365.2235), 0);
      double double0 = laguerreSolver0.getFunctionValueAccuracy();
      assertEquals((-365.2235), laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0952233225107193, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double double0 = laguerreSolver0.getFunctionValueAccuracy();
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(1753.3859204551188, 1212.76349136);
      laguerreSolver0.getEvaluations();
      assertEquals(1212.76349136, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1753.3859204551188, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Atanh atanh0 = new Atanh();
      BrentSolver brentSolver0 = new BrentSolver(0.0, (-1.0));
      brentSolver0.solve(3358, (UnivariateRealFunction) atanh0, 0.0, (double) 41);
      double double0 = brentSolver0.computeObjectiveValue(0.0);
      assertEquals(20.5, brentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(0.0, (-20.608));
      Logit logit0 = new Logit((-1283.849213), 1.0E-15);
      mullerSolver2_0.setup(141, logit0, 141, (-5690.70847588), (-20.608));
      mullerSolver2_0.computeObjectiveValue(0.0);
      assertEquals(141.0, mullerSolver2_0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.5);
      double double0 = laguerreSolver0.getMin();
      assertEquals(0.5, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(1.0, 0.0);
      double double0 = laguerreSolver0.getRelativeAccuracy();
      assertEquals(0.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((-2160.9257), 1.0, (-2160.9257));
      double double0 = laguerreSolver0.getFunctionValueAccuracy();
      assertEquals((-2160.9257), laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-2160.9257), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double double0 = laguerreSolver0.getStartValue();
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      Sinh sinh0 = new Sinh();
      mullerSolver0.solve(1370, (UnivariateRealFunction) sinh0, (-365.2235), (double) 1370);
  }

}

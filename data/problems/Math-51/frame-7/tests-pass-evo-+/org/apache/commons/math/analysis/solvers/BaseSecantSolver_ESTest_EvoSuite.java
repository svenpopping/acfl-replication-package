/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:41:19 GMT 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atanh;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Logistic;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BaseSecantSolver_ESTest_EvoSuite extends BaseSecantSolver_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3163.269));
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals((-3163.269), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(illinoisSolver0);
      
      Rint rint0 = new Rint();
      assertNotNull(rint0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2109745533, (UnivariateRealFunction) rint0, (-3163.269), 6212.4314583301575, 4.9E-324, allowedSolution0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-3163.269), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(6212.4314583301575, illinoisSolver0.getMax(), 0.01);
      assertEquals((-3163.269), illinoisSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(4.9E-324, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-0.03267469884849561), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3163.269));
      assertEquals((-3163.269), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertNotNull(illinoisSolver0);
      
      Gaussian gaussian0 = new Gaussian(103, (-1.0), 103);
      assertNotNull(gaussian0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = illinoisSolver0.solve(103, (UnivariateRealFunction) gaussian0, (-3163.269), 6222.9993274, (-1.0), allowedSolution0);
      assertEquals(6222.9993274, illinoisSolver0.getMax(), 0.01);
      assertEquals((-3163.269), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1.0), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-3163.269), illinoisSolver0.getMin(), 0.01);
      assertEquals(6222.9993274, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1485.43737581), 660.3189430854);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals((-1485.43737581), illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(660.3189430854, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(illinoisSolver0);
      
      Atanh atanh0 = new Atanh();
      assertNotNull(atanh0);
      
      double double0 = illinoisSolver0.solve(1526, (UnivariateRealFunction) atanh0, 631.9, 0.0, 631.9);
      assertEquals(631.9, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(631.9, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1485.43737581), illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(660.3189430854, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2201.17289), 6.194558637649056, 6.194558637649056);
      assertEquals(6.194558637649056, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2201.17289), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      double double0 = pegasusSolver0.solve(186, (UnivariateRealFunction) inverse0, (-2201.17289), 6.194558637649056, 6.194558637649056);
      assertEquals(6.194558637649056, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getMax(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-2201.17289), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-2201.17289), pegasusSolver0.getMin(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-2194.978331362351), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      double double0 = pegasusSolver0.solve(2573, (UnivariateRealFunction) tanh0, (-1066.003528), (double) 2573, (-1066.003528));
      assertEquals((-1066.003528), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1066.003528), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2573.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.8767551951394724E-20, double0, 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals((-1066.003528), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1066.003528), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2573.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.8767551951394724E-20, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(186, (UnivariateRealFunction) inverse0, (-2201.17289), (double) 186, allowedSolution0);
      assertEquals((-2201.17289), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1007.5864449999999), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(186.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2.1790817271106178E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(186, (UnivariateRealFunction) inverse0, (-2201.17289), (double) 186, allowedSolution0);
      assertEquals((-2201.17289), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(186.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1007.5864449999999), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-7.09365392760376E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2642, (UnivariateRealFunction) inverse0, (-7.09365392760376E-7), (double) 186, allowedSolution0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(92.9999996453173, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-7.09365392760376E-7), pegasusSolver0.getMin(), 0.01);
      assertEquals(186.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(4.0768144404362787E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3163.269));
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-3163.269), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(illinoisSolver0);
      
      Sigmoid sigmoid0 = new Sigmoid((-3163.269), 2109745533);
      assertNotNull(sigmoid0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2109745533, (UnivariateRealFunction) sigmoid0, (-3163.269), 6201.38853608641, (-1.0), allowedSolution0);
      assertEquals(6201.38853608641, illinoisSolver0.getMax(), 0.01);
      assertEquals((-3163.269), illinoisSolver0.getMin(), 0.01);
      assertEquals((-1.0), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-3163.269), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-13.410471911155621), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(6.194558637649056, 6.194558637649056);
      assertEquals(6.194558637649056, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(186, (UnivariateRealFunction) inverse0, (-0.0011209307935737345), (double) 186, allowedSolution0);
      assertEquals(6.194558637649056, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(92.99943953460321, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(186.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-0.0011209307935737345), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(185.99887906920642, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2097, (UnivariateRealFunction) tanh0, (-42.15393831067), 2888.42090515874, allowedSolution0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-42.15393831067), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2888.42090515874, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1423.1334834240351, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.1909124429035215E-11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1481.1019456013, 1416.2318629);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1481.1019456013, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1416.2318629, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      Log10 log10_0 = new Log10();
      assertNotNull(log10_0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(3213, (UnivariateRealFunction) log10_0, 0.0, 14.0, 13.24896183255201, allowedSolution0);
      assertEquals(1481.1019456013, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(14.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1416.2318629, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(13.24896183255201, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2201.17289), 6.194558637649056, 6.194558637649056);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-2201.17289), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(186, (UnivariateRealFunction) inverse0, (-2201.17289), (double) 186, allowedSolution0);
      assertEquals((-1007.5864449999999), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(186.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-2201.17289), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-2201.17289), pegasusSolver0.getMin(), 0.01);
      assertEquals(185.03762133272636, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3163.269));
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals((-3163.269), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(illinoisSolver0);
      
      Gaussian gaussian0 = new Gaussian(2109745533, (-1.0), 2109745533);
      assertNotNull(gaussian0);
      
      UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
      assertNotNull(univariateRealFunction0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2109745533, univariateRealFunction0, (-3163.269), 6222.9993274, (-1.0), allowedSolution0);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1.0), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-3163.269), illinoisSolver0.getMin(), 0.01);
      assertEquals(6222.9993274, illinoisSolver0.getMax(), 0.01);
      assertEquals((-3163.269), illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-0.9999999932306309), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2201.17289), 6.194558637649056, 6.194558637649056);
      assertEquals(6.194558637649056, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-2201.17289), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(186, (UnivariateRealFunction) inverse0, (-0.0011209307935737345), (double) 186, allowedSolution0);
      assertEquals(6.194558637649056, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(92.99943953460321, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-2201.17289), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-0.0011209307935737345), pegasusSolver0.getMin(), 0.01);
      assertEquals(186.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(185.99887906920642, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2201.17289), 6.194558637649056, 6.194558637649056);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-2201.17289), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Inverse inverse0 = new Inverse();
      assertNotNull(inverse0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(186, (UnivariateRealFunction) inverse0, (-0.0011209307935737345), (double) 186, allowedSolution0);
      assertEquals((-0.0011209307935737345), pegasusSolver0.getMin(), 0.01);
      assertEquals(186.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(92.99943953460321, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-2201.17289), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-0.0011209307935737345), double0, 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals((-0.0011209307935737345), pegasusSolver0.getMin(), 0.01);
      assertEquals(186.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(92.99943953460321, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(6.194558637649056, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-2201.17289), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals((-0.0011209307935737345), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1481.1019456013, 1416.2318629);
      assertEquals(1481.1019456013, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1416.2318629, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      Log10 log10_0 = new Log10();
      assertNotNull(log10_0);
      
      double double0 = regulaFalsiSolver0.solve(3213, (UnivariateRealFunction) log10_0, 0.0, 14.0, (double) 3213);
      assertEquals(1481.1019456013, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(14.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1416.2318629, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(3213.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(14.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 0.0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Cbrt cbrt0 = new Cbrt();
      assertNotNull(cbrt0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(19, (UnivariateRealFunction) cbrt0, (-918.0743), 0.0, allowedSolution0);
      assertEquals((-459.03715), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-918.0743), pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0, 1.0);
      assertEquals(1.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      Gaussian gaussian0 = new Gaussian();
      assertNotNull(gaussian0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(1042, (UnivariateRealFunction) gaussian0, (-100.0), 0.0, allowedSolution0);
      assertEquals((-100.0), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-50.0), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-42.15393831067), (-42.15393831067));
      Tanh tanh0 = new Tanh();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      pegasusSolver0.solve(2097, (UnivariateRealFunction) tanh0, (-42.15393831067), 2888.42090515874, allowedSolution0);
      double double0 = pegasusSolver0.doSolve();
      assertEquals(2888.42090515874, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3163.269));
      Gaussian gaussian0 = new Gaussian(2109745533, (-16.224883561211318), 2109745533);
      UnivariateRealFunction univariateRealFunction0 = gaussian0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      illinoisSolver0.solve(2109745533, univariateRealFunction0, (-3163.269), 6222.9993274, (-16.224883561211318), allowedSolution0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:40:10 GMT 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Acosh;
import org.apache.commons.math.analysis.function.Asin;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Logistic;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BaseSecantSolver_ESTest_EvoSuite extends BaseSecantSolver_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Gaussian gaussian0 = new Gaussian(2328.809679350448, 3.5849785862931727E-4);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(24, (UnivariateRealFunction) gaussian0, (double) 24, (-598.4125091845615), allowedSolution0);
      assertEquals((-598.4125091845615), regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(24.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-245.16), 380.54);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(115, (UnivariateRealFunction) signum0, 0.0, (-2070.647098), (-1652.126), allowedSolution0);
      assertEquals((-2070.647098), pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0);
      Logit logit0 = new Logit(0.0, 0.0);
      UnivariateRealFunction univariateRealFunction0 = logit0.derivative();
      double double0 = illinoisSolver0.solve(4, univariateRealFunction0, (double) 4, 0.0, 0.0);
      assertEquals(4.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(494.0);
      Logistic logistic0 = new Logistic(494.0, (-1.0), 184, (-822.0553217863549), 184, 184);
      UnivariateRealFunction univariateRealFunction0 = logistic0.derivative();
      double double0 = regulaFalsiSolver0.solve(184, univariateRealFunction0, (-822.0553217863549), (-822.0553217863549), (-935.4131667455798));
      assertEquals((-935.4131667455798), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-822.0553217863549), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.5, 0.0);
      Sin sin0 = new Sin();
      regulaFalsiSolver0.solve(2776, (UnivariateRealFunction) sin0, 0.0, 0.0, 0.0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(4.2190582118504254E-13, 993.69827, 993.69827);
      Floor floor0 = new Floor();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      regulaFalsiSolver0.solve(2145578650, (UnivariateRealFunction) floor0, 1.0, 0.041666666666621166, 1.0, allowedSolution0);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals(0.041666666666621166, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.041666666666621166, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-87.115677));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-87.115677);
      doubleArray0[1] = (-87.115677);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      illinoisSolver0.solve(29, (UnivariateRealFunction) polynomialFunction0, (-87.115677), 1.0, allowedSolution0);
      double double0 = illinoisSolver0.doSolve();
      assertEquals(1.0, illinoisSolver0.getMax(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 0.0);
      Ceil ceil0 = new Ceil();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(4, (UnivariateRealFunction) ceil0, (-939.36046), 706.2178243250522, 0.0, allowedSolution0);
      assertEquals((-939.36046), pegasusSolver0.getMin(), 0.01);
      assertEquals((-0.6010377756840626), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-91.54590070471268));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-91.54590070471268);
      doubleArray0[1] = (-91.54590070471268);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(16, (UnivariateRealFunction) polynomialFunction0, (-91.54590070471268), 1.0, allowedSolution0);
      assertEquals(1.0, illinoisSolver0.getMax(), 0.01);
      assertEquals((-1.0000000000000004), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-87.115677));
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-87.115677);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(29, (UnivariateRealFunction) polynomialFunction0, (-87.115677), 1.0, allowedSolution0);
      assertEquals((-87.115677), illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:38:12 GMT 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Logistic;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BaseAbstractUnivariateRealSolver_ESTest_EvoSuite extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(0.0, 0.0);
      mullerSolver2_0.verifySequence((-2242.956588452224), 0.0, 1631.0);
      assertEquals(0.0, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.verifyInterval(0.008336750013465571, 0.5);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      Exp exp0 = new Exp();
      mullerSolver2_0.solve(602, (UnivariateRealFunction) exp0, (-1129.754), 1.0E-14, (-387.91593202796));
      mullerSolver2_0.incrementEvaluationCount();
      assertEquals(1.0E-14, mullerSolver2_0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(Double.NaN, (-1129.754), 1.0E-14);
      boolean boolean0 = laguerreSolver0.isSequence((-613.2586784767), 235.14872269811, 3008.4);
      assertTrue(boolean0);
      assertEquals((-1129.754), laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(Double.NaN, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(948.92779, 1.0E-15, 0.0, 22);
      Asinh asinh0 = new Asinh();
      bracketingNthOrderBrentSolver0.setup((-1522), asinh0, (-641.40662848), 0.0, 0.0);
      boolean boolean0 = bracketingNthOrderBrentSolver0.isBracketing(1.0E-15, 0.0);
      assertEquals((-641.40662848), bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver(3370.932, 3370.932);
      Logistic logistic0 = new Logistic((-1673.931281), (-270.97597398), (-7.44321345601866E-11), (-2854), 614.28129665096, 1.625);
      bisectionSolver0.setup((-2854), logistic0, 1.2246467991473532E-16, 614.28129665096, 1.2246467991473532E-16);
      bisectionSolver0.isBracketing((-1733.741776), 3370.932);
      assertEquals(614.28129665096, bisectionSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((-1.0), 0.0, (-1274.227));
      laguerreSolver0.getMaxEvaluations();
      assertEquals((-1.0), laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-1274.227), laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double[] doubleArray0 = new double[3];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      laguerreSolver0.setup(1932, polynomialFunction0, 1932.0, 1.0E-14, 1302.6);
      double double0 = laguerreSolver0.getMax();
      assertEquals(1302.6, laguerreSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver(0.0);
      Ceil ceil0 = new Ceil();
      mullerSolver0.solve(161, (UnivariateRealFunction) ceil0, 0.0);
      double double0 = mullerSolver0.computeObjectiveValue(0.0);
      assertEquals(Double.NaN, mullerSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1302.6;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      laguerreSolver0.setup(1932, polynomialFunction0, 1932.0, 1.0E-14, 1302.6);
      laguerreSolver0.computeObjectiveValue((-1414.0));
      assertEquals(1932.0, laguerreSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((-407.109495022283), 0.0);
      double double0 = laguerreSolver0.getMin();
      assertEquals(0.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-407.109495022283), laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double double0 = laguerreSolver0.getMax();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0, (-1.0));
      double double0 = laguerreSolver0.getStartValue();
      assertEquals(0.0, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1.0), laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.isSequence(602, Double.NaN, Double.NaN);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.getEvaluations();
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
  }

}

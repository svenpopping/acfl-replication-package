/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:40:20 GMT 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Cosh;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Logistic;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BaseSecantSolver_ESTest_EvoSuite extends BaseSecantSolver_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-285.899));
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-285.899), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-285.899);
      doubleArray0[1] = (-285.899);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {(-285.899), (-285.899), 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(1, polynomialFunction0.degree());
      assertEquals(3, doubleArray0.length);
      
      double double0 = pegasusSolver0.solve(15, (UnivariateRealFunction) polynomialFunction0, (-285.899), 0.5, (-285.899));
      assertEquals((-1.0), double0, 0.01);
      assertArrayEquals(new double[] {(-285.899), (-285.899), 0.0}, doubleArray0, 0.01);
      assertEquals((-285.899), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.5, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-285.899), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-285.899), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1, polynomialFunction0.degree());
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.0, 0.0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      Gaussian gaussian0 = new Gaussian();
      assertNotNull(gaussian0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(255, (UnivariateRealFunction) gaussian0, 1.0, 2105.0, allowedSolution0);
      assertEquals(2105.0, double0, 0.01);
      assertEquals(2105.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1053.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0, pegasusSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      
      Logistic logistic0 = new Logistic(0.0, 1917.509622293721, 1917.509622293721, 1917.509622293721, 0.0, 5);
      assertNotNull(logistic0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(5, (UnivariateRealFunction) logistic0, (double) 5, 1917.509622293721, allowedSolution0);
      assertEquals(5.0, double0, 0.01);
      assertEquals(5.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(961.2548111468604, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1917.509622293721, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(421.00249190425, 421.00249190425, 421.00249190425);
      assertNotNull(pegasusSolver0);
      assertEquals(421.00249190425, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(421.00249190425, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(421.00249190425, pegasusSolver0.getRelativeAccuracy(), 0.01);
      
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(159, 0.19999954104423523, 1744.5626459765228);
      assertNotNull(harmonicOscillator0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(159, (UnivariateRealFunction) harmonicOscillator0, (-3703.885), (-0.6763901384557832), allowedSolution0);
      assertEquals((-3452.2480033175543), double0, 0.01);
      assertEquals(421.00249190425, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(421.00249190425, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-0.6763901384557832), pegasusSolver0.getMax(), 0.01);
      assertEquals((-1852.280695069228), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-3703.885), pegasusSolver0.getMin(), 0.01);
      assertEquals(421.00249190425, pegasusSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1877.0), 0.0, 0.0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1877.0), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      Logistic logistic0 = new Logistic(0.0, 0.0, (-1877.0), (-1877.0), (-2848.0), 2.7553817452272217E-6);
      assertNotNull(logistic0);
      
      double double0 = pegasusSolver0.solve(4, (UnivariateRealFunction) logistic0, (-1877.0), 2.7553817452272217E-6, 1714.8489801597, allowedSolution0);
      assertEquals((-1877.0), double0, 0.01);
      assertEquals((-1877.0), pegasusSolver0.getMin(), 0.01);
      assertEquals(1714.8489801597, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2.7553817452272217E-6, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1877.0), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1877.0), 0.0, 0.0);
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1877.0), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = pegasusSolver0.solve(1742, (UnivariateRealFunction) atan0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1877.0), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals((-1877.0), pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      Gaussian gaussian0 = new Gaussian();
      assertNotNull(gaussian0);
      
      double double0 = pegasusSolver0.solve(238, (UnivariateRealFunction) gaussian0, 232.2129828, 4379.333619110153, 625.0927336);
      assertEquals(232.2129828, double0, 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(232.2129828, pegasusSolver0.getMin(), 0.01);
      assertEquals(625.0927336, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(4379.333619110153, pegasusSolver0.getMax(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals(double1, double0, 0.01);
      assertEquals(232.2129828, double1, 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(232.2129828, pegasusSolver0.getMin(), 0.01);
      assertEquals(625.0927336, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(4379.333619110153, pegasusSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2863.918823563086));
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-2863.918823563086), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2225, (UnivariateRealFunction) tan0, (double) (-585), (double) 2225, 688.289, allowedSolution0);
      assertEquals(1778.141441931823, double0, 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(688.289, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2863.918823563086), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-585.0), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(2225.0, regulaFalsiSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2863.918823563086));
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-2863.918823563086), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2225, (UnivariateRealFunction) tan0, (double) (-585), (double) 2225, 689.1042610976126, allowedSolution0);
      assertEquals(1778.141441931823, double0, 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(689.1042610976126, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-585.0), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(2225.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-2863.918823563086), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2863.918823563086));
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-2863.918823563086), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2225, (UnivariateRealFunction) tan0, (double) (-585), (double) 2225, 689.1042610976126, allowedSolution0);
      assertEquals(1778.1414419318228, double0, 0.01);
      assertEquals(2225.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-2863.918823563086), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(689.1042610976126, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-585.0), regulaFalsiSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2846.727192935));
      assertNotNull(regulaFalsiSolver0);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2846.727192935), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2225, (UnivariateRealFunction) tan0, (double) (-585), (double) 2225, 688.289, allowedSolution0);
      assertEquals(1778.1414419318228, double0, 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-585.0), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-2846.727192935), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(2225.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(688.289, regulaFalsiSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-21.672316115294038));
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-21.672316115294038), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      
      Atan atan0 = new Atan();
      assertNotNull(atan0);
      
      double double0 = pegasusSolver0.solve(836, (UnivariateRealFunction) atan0, (-4580.074339895518), (double) 836, (-4580.074339895518));
      assertEquals((-4.0420374502859764E-23), double0, 0.01);
      assertEquals((-4580.074339895518), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-21.672316115294038), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(836.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-4580.074339895518), pegasusSolver0.getStartValue(), 0.01);
      
      double double1 = pegasusSolver0.doSolve();
      assertEquals(double1, double0, 0.01);
      assertEquals((-4.0420374502859764E-23), double1, 0.01);
      assertEquals((-4580.074339895518), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-21.672316115294038), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(836.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-4580.074339895518), pegasusSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2863.918823563086));
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(2218, (UnivariateRealFunction) tan0, (double) (-585), (double) 2218, 688.289, allowedSolution0);
      assertEquals(688.289, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(2089.159114637213, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-0.021718637726874213), (-0.021718637726874213), (-0.021718637726874213));
      Atan atan0 = new Atan();
      double double0 = pegasusSolver0.solve(836, (UnivariateRealFunction) atan0, (-4580.325), (double) 836, (-4580.325));
      assertEquals((-4580.325), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1877.0), 0.0, 0.0);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(4, (UnivariateRealFunction) atan0, 0.0, 2.7553817452272217E-6, 1714.8489801597, allowedSolution0);
      assertEquals(1714.8489801597, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1877.0), 0.0, 0.0);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(4, (UnivariateRealFunction) atan0, (-1877.0), 0.0, allowedSolution0);
      assertEquals((-1877.0), pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1579.1361192);
      Sin sin0 = new Sin();
      double double0 = illinoisSolver0.solve(5, (UnivariateRealFunction) sin0, 2.356194490192345, (double) 5, 1579.1361192);
      assertEquals(1579.1361192, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.4782941038576602, double0, 0.01);
  }

}

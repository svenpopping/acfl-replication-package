/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:37:39 GMT 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cosh;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BaseAbstractUnivariateRealSolver_ESTest_EvoSuite extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0625);
      riddersSolver0.verifySequence(Double.NaN, 2876.440483130098, Double.NaN);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0625, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.verifyInterval((-1928.565), (-1.0));
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 0.0);
      Sin sin0 = new Sin();
      riddersSolver0.solve(640, (UnivariateRealFunction) sin0, 0.0, (-1570.79279689854));
      riddersSolver0.incrementEvaluationCount();
      assertEquals((-1570.79279689854), riddersSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 0.0);
      Sin sin0 = new Sin();
      riddersSolver0.solve(640, (UnivariateRealFunction) sin0, 0.0, (-1570.79279689854));
      riddersSolver0.verifyBracketing((-1.0), 0.0);
      assertEquals((-1570.79279689854), riddersSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      boolean boolean0 = laguerreSolver0.isSequence(0.0, 1.0E-6, 3756.426309270254);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      Cosh cosh0 = new Cosh();
      mullerSolver2_0.setup(0, cosh0, 0.0, 0, (-406.692));
      mullerSolver2_0.isBracketing(0.0, (-2350.17980171298));
      assertEquals((-406.692), mullerSolver2_0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      Sin sin0 = new Sin();
      mullerSolver2_0.setup(2472, sin0, 0.0, (-1157.06047), 0.0);
      double double0 = mullerSolver2_0.computeObjectiveValue(0.0);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(3.834E-20, (-1.0));
      double double0 = laguerreSolver0.getMin();
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1.0), laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(3.834E-20, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 0.0);
      Sin sin0 = new Sin();
      riddersSolver0.solve(640, (UnivariateRealFunction) sin0, 0.0, (-1570.79279689854));
      boolean boolean0 = riddersSolver0.isBracketing(0.0, 589.109686548);
      assertEquals((-1570.79279689854), riddersSolver0.getMax(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.isSequence((-1928.565), 2142, (-1928.565));
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      mullerSolver2_0.getMaxEvaluations();
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BisectionSolver bisectionSolver0 = new BisectionSolver(0.0, 1410.1934092545);
      Exp exp0 = new Exp();
      double double0 = bisectionSolver0.solve(2301, (UnivariateRealFunction) exp0, (-1.0), (double) 2301, (-2579.0));
      assertEquals((-1.0), bisectionSolver0.getMin(), 0.01);
      assertEquals(1725.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.getEvaluations();
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
  }

}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:34:18 GMT 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Log10;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.function.Ulp;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BisectionSolver;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BaseAbstractUnivariateRealSolver_ESTest_EvoSuite extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.verifySequence((-827.962), 1.0E-15, 6.283185307179586);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2((-2143.1419454), (-2143.1419454));
      Sigmoid sigmoid0 = new Sigmoid(153.612693808273, 0.0);
      mullerSolver2_0.solve(321, (UnivariateFunction) sigmoid0, 0.0, 153.612693808273, (double) (-2405));
      mullerSolver2_0.incrementEvaluationCount();
      assertEquals((-2405.0), mullerSolver2_0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2((-2142.0), (-2142.0));
      Ceil ceil0 = new Ceil();
      mullerSolver2_0.setup(0, ceil0, (-1596.369369884), (-199.6451478), (-843.644));
      mullerSolver2_0.verifyBracketing((-2142.0), 4.8955889659397494E-8);
      assertEquals((-843.644), mullerSolver2_0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(3.141592653589793, 0.0, 3.141592653589793);
      boolean boolean0 = laguerreSolver0.isSequence((-1879.80193053), 3.141592653589793, 2360.0);
      assertTrue(boolean0);
      assertEquals(3.141592653589793, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2((-2143.1419454), (-2143.1419454));
      Sigmoid sigmoid0 = new Sigmoid(153.612693808273, 0.0);
      UnivariateFunction univariateFunction0 = sigmoid0.derivative();
      mullerSolver2_0.solve(321, univariateFunction0, 0.0, 153.612693808273, (double) (-2405));
      mullerSolver2_0.isBracketing((-2143.1419454), (-2143.1419454));
      assertEquals((-2405.0), mullerSolver2_0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2((-2142.0), (-2142.0));
      Ceil ceil0 = new Ceil();
      mullerSolver2_0.setup(0, ceil0, (-1596.369369884), (-199.6451478), (-843.644));
      boolean boolean0 = mullerSolver2_0.isBracketing((-2142.0), (-2142.0));
      assertEquals((-843.644), mullerSolver2_0.getStartValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      Identity identity0 = new Identity();
      newtonSolver0.setup(1257, identity0, 1257, 1257, (-1408.2601443013627));
      double double0 = newtonSolver0.computeObjectiveValue(0.0);
      assertEquals(1257.0, newtonSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0, (-1.8950538406321535E124));
      double double0 = laguerreSolver0.getRelativeAccuracy();
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1.8950538406321535E124), laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((-2641.76950863758), (-2641.76950863758));
      double double0 = laguerreSolver0.getFunctionValueAccuracy();
      assertEquals(1.0E-15, double0, 0.01);
      assertEquals((-2641.76950863758), laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-2641.76950863758), laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(538.779123, 538.779123);
      double double0 = laguerreSolver0.getAbsoluteAccuracy();
      assertEquals(538.779123, double0, 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(538.779123, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(Double.NaN);
      secantSolver0.isSequence(Double.NaN, Double.NaN, Double.NaN);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(Double.NaN, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(Double.NaN);
      mullerSolver2_0.getMaxEvaluations();
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(Double.NaN, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((-4922.81), 0.0);
      laguerreSolver0.verifyInterval((-4922.81), 1.0E-9);
      assertEquals((-4922.81), laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.getEvaluations();
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
  }

}

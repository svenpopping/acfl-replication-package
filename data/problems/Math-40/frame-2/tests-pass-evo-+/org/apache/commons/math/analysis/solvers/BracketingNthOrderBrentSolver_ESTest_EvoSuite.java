/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:37:05 GMT 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableUnivariateFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Cosh;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BracketingNthOrderBrentSolver_ESTest_EvoSuite extends BracketingNthOrderBrentSolver_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, 263);
      Sin sin0 = new Sin();
      DifferentiableUnivariateFunction differentiableUnivariateFunction0 = sin0.derivative();
      UnivariateFunction univariateFunction0 = differentiableUnivariateFunction0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      bracketingNthOrderBrentSolver0.solve(263, univariateFunction0, 0.0, 749.0, Double.NaN, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(2618.283084517526, 0, 31);
      Gaussian gaussian0 = new Gaussian(2618.283084517526, 31.0);
      bracketingNthOrderBrentSolver0.solve(1184, (UnivariateFunction) gaussian0, 0.0, 653.0, 7.715994473741065E-8, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-1652.515452), 1058, (-1045.1472));
      UnivariateFunction univariateFunction0 = harmonicOscillator0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      bracketingNthOrderBrentSolver0.solve(1058, univariateFunction0, (-1013.4), 2033.6, (-574.549465386752), allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(314.3224114, 5);
      Tan tan0 = new Tan();
      bracketingNthOrderBrentSolver0.solve(5, (UnivariateFunction) tan0, 0.0);
      bracketingNthOrderBrentSolver0.doSolve();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(6.456806922371733E-8, 31);
      Cosh cosh0 = new Cosh();
      DifferentiableUnivariateFunction differentiableUnivariateFunction0 = cosh0.derivative();
      double double0 = bracketingNthOrderBrentSolver0.solve(133, (UnivariateFunction) differentiableUnivariateFunction0, (-1087.805355625211), 1197.3641);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      Cos cos0 = new Cos();
      UnivariateFunction univariateFunction0 = cos0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(579, univariateFunction0, (double) 579, 3008.91242065161, allowedSolution0);
      assertEquals(579.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(1712.1679962064393, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      Cos cos0 = new Cos();
      UnivariateFunction univariateFunction0 = cos0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(579, univariateFunction0, (double) 579, 3008.91242065161, allowedSolution0);
      assertEquals(1712.1679962064372, double0, 0.01);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(579, (UnivariateFunction) cos0, (double) 579, 3008.91242065161, allowedSolution0);
      assertEquals(592.190215201676, double0, 0.01);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(579, (UnivariateFunction) cos0, (double) 579, 3008.91242065161, allowedSolution0);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(592.190215201676, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      bracketingNthOrderBrentSolver0.solve(579, (UnivariateFunction) cos0, (double) 579, 3008.91242065161, allowedSolution0);
      double double0 = bracketingNthOrderBrentSolver0.doSolve();
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(592.1902157612103, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sin sin0 = new Sin();
      DifferentiableUnivariateFunction differentiableUnivariateFunction0 = sin0.derivative();
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0625, 0.0, 2186);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(38, (UnivariateFunction) differentiableUnivariateFunction0, (-599.820686), 0.0625, allowedSolution0);
      assertEquals((-58.4973262873218), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(Double.NaN, 0.0, 5);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(5, (UnivariateFunction) atan0, Double.NaN, 0.0, allowedSolution0);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-9.539951131909725E-20), (-1458.4597), (-9.539951131909725E-20), 2);
      Expm1 expm1_0 = new Expm1();
      UnivariateFunction univariateFunction0 = expm1_0.derivative();
      double double0 = bracketingNthOrderBrentSolver0.solve(2, univariateFunction0, (-1458.4597), 375.0950090476);
      assertEquals(2, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-1458.4597), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-2102.14), 493.1, 1666);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(348.00921583928, 493.1, 0.0);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(1666, (UnivariateFunction) harmonicOscillator0, 0.0, 0.0625, allowedSolution0);
      assertEquals(1666, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.03125, double0, 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-2102.14), 493.1, 1666);
      int int0 = bracketingNthOrderBrentSolver0.getMaximalOrder();
      assertEquals(1666, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:35:44 GMT 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableUnivariateFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.function.Atanh;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Power;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BaseAbstractUnivariateRealSolver_ESTest_EvoSuite extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver(277.917598, (-2159.3474944099094));
      secantSolver0.verifySequence((-2159.3474944099094), 277.917598, 858.79774953412);
      assertEquals(277.917598, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-2159.3474944099094), secantSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver((-4014.86279));
      newtonSolver0.verifyInterval((-1757), 2408.0466192635);
      assertEquals((-4014.86279), newtonSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, newtonSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      Sin sin0 = new Sin();
      newtonSolver0.solve(551, (DifferentiableUnivariateFunction) sin0, (-2484.5475609259), 1.0, 0.0);
      newtonSolver0.incrementEvaluationCount();
      assertEquals((-2484.5475609259), newtonSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-1277.0), 0.5, 1580);
      boolean boolean0 = bracketingNthOrderBrentSolver0.isSequence((-1277.0), 0.0, 1.6487212707001282);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1277.0), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.5, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      Sin sin0 = new Sin();
      newtonSolver0.solve(551, (DifferentiableUnivariateFunction) sin0, (-2484.5475609259), 1.0, 0.0);
      boolean boolean0 = newtonSolver0.isBracketing((-511.2), 1.0);
      assertEquals((-2484.5475609259), newtonSolver0.getMin(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(0.801967060339748);
      Sin sin0 = new Sin();
      newtonSolver0.solve(1806, (DifferentiableUnivariateFunction) sin0, 1332.3665);
      boolean boolean0 = newtonSolver0.isBracketing(0, Double.NaN);
      assertEquals(1332.3665, newtonSolver0.getStartValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0, 0.0);
      laguerreSolver0.getEvaluations();
      assertEquals(0.0, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BrentSolver brentSolver0 = new BrentSolver();
      Power power0 = new Power(0.0);
      brentSolver0.setup(353, power0, 1229.9504595525577, 499, 2167.14);
      brentSolver0.computeObjectiveValue(3.059023470086686E-7);
      assertEquals(2167.14, brentSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      Identity identity0 = new Identity();
      newtonSolver0.setup(275, identity0, (-932.214), 275, 275);
      double double0 = newtonSolver0.computeObjectiveValue((-2270.6615238299546));
      assertEquals(275.0, newtonSolver0.getMax(), 0.01);
      assertEquals((-2270.6615238299546), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0, Double.NaN, 3297.411620717709);
      double double0 = laguerreSolver0.getMin();
      assertEquals(0.0, double0, 0.01);
      assertEquals(3297.411620717709, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(Double.NaN, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0);
      double double0 = laguerreSolver0.getRelativeAccuracy();
      assertEquals(0.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double double0 = laguerreSolver0.getMax();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(1.0, 1.0, Double.NaN);
      double double0 = laguerreSolver0.getFunctionValueAccuracy();
      assertEquals(1.0, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(0.0, 0.0);
      double double0 = laguerreSolver0.getAbsoluteAccuracy();
      assertEquals(0.0, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MullerSolver mullerSolver0 = new MullerSolver();
      mullerSolver0.isSequence(1974.328, 1974.328, 1974.328);
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      riddersSolver0.getMaxEvaluations();
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
  }
}

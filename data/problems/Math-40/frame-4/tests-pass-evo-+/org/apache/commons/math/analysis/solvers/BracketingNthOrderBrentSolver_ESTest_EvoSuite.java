/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:38:10 GMT 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.function.Asinh;
import org.apache.commons.math.analysis.function.Atanh;
import org.apache.commons.math.analysis.function.Exp;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Log1p;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BracketingNthOrderBrentSolver_ESTest_EvoSuite extends BracketingNthOrderBrentSolver_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Identity identity0 = new Identity();
      assertNotNull(identity0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(2274, (UnivariateFunction) identity0, 0.0, 0.0, Double.NaN, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(Double.NaN, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.001357319882827101, 1.0, 3649);
      assertEquals(0.001357319882827101, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(3649, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(1.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Gaussian gaussian0 = new Gaussian(40000.0, 0.0625);
      assertNotNull(gaussian0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(3649, (UnivariateFunction) gaussian0, 0.001357319882827101, 970.93234231742, 40.96009812272929, allowedSolution0);
      assertEquals(40.96009812272929, double0, 0.01);
      assertEquals(40.96009812272929, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(0.001357319882827101, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(0.001357319882827101, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(3649, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(970.93234231742, bracketingNthOrderBrentSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-1256.2682789689957), (-1064.5959243939003), 963);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(963, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-1064.5959243939003), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1256.2682789689957), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Exp exp0 = new Exp();
      assertNotNull(exp0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(806, (UnivariateFunction) exp0, (-2901.3179911), (double) 963, 0.0, allowedSolution0);
      assertEquals((-2901.3179911), double0, 0.01);
      assertEquals(963, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-1064.5959243939003), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1256.2682789689957), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(963.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals((-2901.3179911), bracketingNthOrderBrentSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-1243.7), (-1064.5959243939003), 963);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals((-1064.5959243939003), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-1243.7), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(963, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Exp exp0 = new Exp();
      assertNotNull(exp0);
      
      double double0 = bracketingNthOrderBrentSolver0.solve(3690, (UnivariateFunction) exp0, (-807.3930671432347), 0.0);
      assertEquals((-807.3930671432347), double0, 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-403.69653357161735), bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals((-1064.5959243939003), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-1243.7), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-807.3930671432347), bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(963, bracketingNthOrderBrentSolver0.getMaximalOrder());
      
      double double1 = bracketingNthOrderBrentSolver0.doSolve();
      assertEquals((-807.3930671432347), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-403.69653357161735), bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals((-1064.5959243939003), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-1243.7), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-807.3930671432347), bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(963, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(557, (UnivariateFunction) asinh0, (-537.2951574747874), 162.3688771299804, allowedSolution0);
      assertEquals((-5.341860287444433E-11), double0, 0.01);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(162.3688771299804, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-187.46314017240348), bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals((-537.2951574747874), bracketingNthOrderBrentSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-5.999115424306854), 598);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(598, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-5.999115424306854), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(598, (UnivariateFunction) asinh0, (-537.2951574747874), 183.5924305, allowedSolution0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(598, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-537.2951574747874), bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(183.5924305, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals((-176.8513634873937), bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals((-5.999115424306854), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(963, 963);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(963, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(963.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Minus minus0 = new Minus();
      assertNotNull(minus0);
      
      double double0 = bracketingNthOrderBrentSolver0.solve(3667, (UnivariateFunction) minus0, (-807.3930671432347), 2.5354045363326927);
      assertEquals(2.5354045363326927, double0, 0.01);
      assertEquals((-807.3930671432347), bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(963, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-402.428831303451), bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(2.5354045363326927, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(963.0, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(183.5924305, 3880.260449, 3880.260449, 598);
      assertEquals(183.5924305, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(3880.260449, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(3880.260449, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(598, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(598, (UnivariateFunction) asinh0, (-537.2951574747874), 183.5924305, allowedSolution0);
      assertEquals(183.5924305, double0, 0.01);
      assertEquals(183.5924305, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-537.2951574747874), bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(3880.260449, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(3880.260449, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(598, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-176.8513634873937), bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(183.5924305, bracketingNthOrderBrentSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-3049.1289), 2158.8901114105, 376.79602441964346, 1052);
      assertEquals((-3049.1289), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1052, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(2158.8901114105, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(376.79602441964346, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(0.007395555911691955, (-3049.1289), 376.79602441964346);
      assertNotNull(harmonicOscillator0);
      
      bracketingNthOrderBrentSolver0.setup(1052, harmonicOscillator0, (-2763.65467), 1052, 124.0);
      assertEquals(124.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals((-3049.1289), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1052, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(2158.8901114105, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1052.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals((-2763.65467), bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(376.79602441964346, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      
      double double0 = bracketingNthOrderBrentSolver0.doSolve();
      assertEquals(124.0, double0, 0.01);
      assertEquals(124.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals((-3049.1289), bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1052, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(2158.8901114105, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1052.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals((-2763.65467), bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(376.79602441964346, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(963, (-1256.2682789689957), 963);
      assertEquals(963.0, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals((-1256.2682789689957), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(963, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Atanh atanh0 = new Atanh();
      assertNotNull(atanh0);
      
      double double0 = bracketingNthOrderBrentSolver0.solve(3667, (UnivariateFunction) atanh0, (-807.3930671432347), 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-807.3930671432347), bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(963.0, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals((-403.69653357161735), bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals((-1256.2682789689957), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(963, bracketingNthOrderBrentSolver0.getMaximalOrder());
      
      double double1 = bracketingNthOrderBrentSolver0.doSolve();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals((-807.3930671432347), bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(963.0, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals((-403.69653357161735), bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals((-1256.2682789689957), bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(963, bracketingNthOrderBrentSolver0.getMaximalOrder());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(183.5924305, 3880.260449, 0.0, 598);
      assertEquals(3880.260449, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(183.5924305, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(598, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      Asinh asinh0 = new Asinh();
      assertNotNull(asinh0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(598, (UnivariateFunction) asinh0, (-537.2951574747874), 183.5924305, allowedSolution0);
      assertEquals(183.5924305, double0, 0.01);
      assertEquals(3880.260449, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(183.5924305, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-537.2951574747874), bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals((-176.8513634873937), bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(598, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(183.5924305, bracketingNthOrderBrentSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      Sinh sinh0 = new Sinh();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = bracketingNthOrderBrentSolver0.solve(2754, (UnivariateFunction) sinh0, (-390.377386038844), 5.32048248832E11, allowedSolution0);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals((-2.0706478531806738E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-1256.2682789689957), (-1256.2682789689957), 963);
      int int0 = bracketingNthOrderBrentSolver0.getMaximalOrder();
      assertEquals(963, int0);
  }
}

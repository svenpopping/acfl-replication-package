/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:35:48 GMT 2020
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableUnivariateFunction;
import org.apache.commons.math.analysis.UnivariateFunction;
import org.apache.commons.math.analysis.function.Constant;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Sinh;
import org.apache.commons.math.analysis.function.Tanh;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math.analysis.solvers.LaguerreSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.NewtonSolver;
import org.apache.commons.math.analysis.solvers.RiddersSolver;
import org.apache.commons.math.analysis.solvers.SecantSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BaseAbstractUnivariateRealSolver_ESTest_EvoSuite extends BaseAbstractUnivariateRealSolver_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.verifySequence((-2770.643050593616), 0.0, 1428.35656);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(1.0E-14, 3677.69013);
      riddersSolver0.verifyInterval(10.0, 3677.69013);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(3677.69013, riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver((-3284.085583056901), (-3284.085583056901));
      Sinh sinh0 = new Sinh();
      secantSolver0.solve(1470, (UnivariateFunction) sinh0, 0.0, Double.NaN);
      secantSolver0.incrementEvaluationCount();
      assertEquals(Double.NaN, secantSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(1707.767338325877);
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 4684;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateFunction univariateFunction0 = polynomialFunction0.derivative();
      double double0 = riddersSolver0.solve(4684, univariateFunction0, (-1736.3684976397), 4684.0);
      assertEquals(1473.8157511801498, riddersSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver();
      boolean boolean0 = riddersSolver0.isSequence((-3967.930826288628), 818.5005128767, 1039.4315);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertTrue(boolean0);
      assertEquals(1.0E-6, riddersSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.isSequence(0.0, 3697.21066969, 0.0);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver((-3284.085583056901), (-3284.085583056901));
      Sinh sinh0 = new Sinh();
      secantSolver0.solve(1463, (UnivariateFunction) sinh0, 0.0, (-3284.085583056901));
      boolean boolean0 = secantSolver0.isBracketing((-4910.4409611), 1463);
      assertEquals((-3284.085583056901), secantSolver0.getMax(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      Minus minus0 = new Minus();
      mullerSolver2_0.setup((-1748), minus0, (-1748), (-0.0625), 4.0);
      boolean boolean0 = mullerSolver2_0.isBracketing(385.25993703169297, 385.25993703169297);
      assertFalse(boolean0);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver((-0.0625));
      laguerreSolver0.getMaxEvaluations();
      assertEquals((-0.0625), laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      laguerreSolver0.getEvaluations();
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, laguerreSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver();
      Constant constant0 = new Constant(4034);
      DifferentiableUnivariateFunction differentiableUnivariateFunction0 = constant0.derivative();
      newtonSolver0.setup(4034, differentiableUnivariateFunction0, 2.0, 4034, (-2.0));
      newtonSolver0.computeObjectiveValue(0.5);
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, newtonSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, newtonSolver0.getFunctionValueAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SecantSolver secantSolver0 = new SecantSolver();
      Sinh sinh0 = new Sinh();
      secantSolver0.solve(1470, (UnivariateFunction) sinh0, 0.0, Double.NaN);
      double double0 = secantSolver0.computeObjectiveValue(1013.03);
      assertEquals(Double.NaN, secantSolver0.getMax(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NewtonSolver newtonSolver0 = new NewtonSolver(0.0);
      Tanh tanh0 = new Tanh();
      newtonSolver0.setup(39, tanh0, 39, 129.0, (-1616.72));
      double double0 = newtonSolver0.computeObjectiveValue((-1616.72));
      assertEquals(0.0, newtonSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, newtonSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, newtonSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver();
      double double0 = laguerreSolver0.getRelativeAccuracy();
      assertEquals(1.0E-14, double0, 0.01);
      assertEquals(1.0E-15, laguerreSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, laguerreSolver0.getAbsoluteAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LaguerreSolver laguerreSolver0 = new LaguerreSolver(507.0, 0.0, 507.0);
      assertEquals(0.0, laguerreSolver0.getMin(), 0.01);
      assertEquals(0.0, laguerreSolver0.getMax(), 0.01);
      assertEquals(0.0, laguerreSolver0.getStartValue(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = 507.0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      double double0 = laguerreSolver0.solve(60, polynomialFunction0, (-2710.740973), (double) 60, (-86.5559084744329));
      assertEquals((-3.552713678800501E-15), double0, 0.01);
  }

}

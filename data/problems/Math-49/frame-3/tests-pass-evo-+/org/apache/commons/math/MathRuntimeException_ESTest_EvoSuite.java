/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:36:30 GMT 2020
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.PrintStream;
import java.text.ParseException;
import java.util.ConcurrentModificationException;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.exception.util.Localizable;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;

public class MathRuntimeException_ESTest_EvoSuite extends MathRuntimeException_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.ZERO_NOT_ALLOWED;
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(localizedFormats0, (Object[]) null);
      MockFile mockFile0 = new MockFile("p_", "zero not allowed here");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mathRuntimeException0.printStackTrace((PrintStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException((Throwable) null);
      String string0 = mathRuntimeException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException((Localizable) null, (Object[]) null);
      Locale locale0 = Locale.ITALY;
      String string0 = mathRuntimeException0.getMessage(locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS;
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[2];
      ConcurrentModificationException concurrentModificationException0 = MathRuntimeException.createConcurrentModificationException(localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(concurrentModificationException0);
      String string0 = mathRuntimeException0.getMessage(locale0);
      assertEquals("statistics constructed from external moments cannot be cleared", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES;
      Object[] objectArray0 = new Object[2];
      EOFException eOFException0 = MathRuntimeException.createEOFException(localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(eOFException0);
      String string0 = mathRuntimeException0.getMessage();
      assertEquals("null wide hole between models time ranges", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY;
      Object[] objectArray0 = new Object[8];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(localizedFormats0, objectArray0);
      String string0 = mathRuntimeException0.getLocalizedMessage();
      assertEquals("empty polynomials coefficients array", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ArithmeticException arithmeticException0 = MathRuntimeException.createArithmeticException((Localizable) null, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(arithmeticException0, (Localizable) null, objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(mathRuntimeException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.CANNOT_PARSE;
      ParseException parseException0 = MathRuntimeException.createParseException(4891, localizedFormats0, (Object[]) null);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0, localizedFormats0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RuntimeException runtimeException0 = MathRuntimeException.createInternalError((Throwable) null);
      IOException iOException0 = MathRuntimeException.createIOException(runtimeException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.DIMENSIONS_MISMATCH_2x2;
      Object[] objectArray0 = new Object[1];
      ParseException parseException0 = MathRuntimeException.createParseException(1074, localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0, (Localizable) null, objectArray0);
      String string0 = mathRuntimeException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM;
      Object[] objectArray0 = new Object[7];
      NoSuchElementException noSuchElementException0 = MathRuntimeException.createNoSuchElementException(localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(noSuchElementException0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD;
      Object[] objectArray0 = new Object[9];
      IllegalStateException illegalStateException0 = MathRuntimeException.createIllegalStateException(localizedFormats0, objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(illegalStateException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.DENOMINATOR;
      Object[] objectArray0 = new Object[9];
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((Localizable) localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(illegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.NOT_POSITIVE_SHAPE;
      Object[] objectArray0 = new Object[7];
      ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException0 = MathRuntimeException.createArrayIndexOutOfBoundsException(localizedFormats0, objectArray0);
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((Throwable) arrayIndexOutOfBoundsException0);
      assertNotNull(illegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.CANNOT_CONVERT_OBJECT_TO_FRACTION;
      Object[] objectArray0 = new Object[3];
      ArithmeticException arithmeticException0 = MathRuntimeException.createArithmeticException(localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(arithmeticException0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.INVALID_BINARY_DIGIT;
      Object[] objectArray0 = new Object[1];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(localizedFormats0, objectArray0);
      mathRuntimeException0.printStackTrace();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE;
      Object[] objectArray0 = new Object[3];
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((Localizable) localizedFormats0, objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(illegalArgumentException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.ARRAY_ELEMENT;
      Object[] objectArray0 = new Object[3];
      ParseException parseException0 = MathRuntimeException.createParseException(0, localizedFormats0, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalizedFormats localizedFormats0 = LocalizedFormats.PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD;
      Object[] objectArray0 = new Object[9];
      IllegalStateException illegalStateException0 = MathRuntimeException.createIllegalStateException(localizedFormats0, objectArray0);
      RuntimeException runtimeException0 = MathRuntimeException.createInternalError(illegalStateException0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(runtimeException0);
  }

}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:44:21 GMT 2020
 */

package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math.analysis.MultivariateRealFunction;
import org.apache.commons.math.analysis.MultivariateVectorialFunction;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.LeastSquaresConverter;
import org.apache.commons.math.optimization.RealConvergenceChecker;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.SimpleRealPointChecker;
import org.apache.commons.math.optimization.SimpleScalarValueChecker;
import org.apache.commons.math.optimization.direct.MultiDirectional;
import org.apache.commons.math.optimization.direct.NelderMead;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class DirectSearchOptimizer_ESTest_EvoSuite extends DirectSearchOptimizer_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      nelderMead0.setMaxEvaluations((-2081));
      nelderMead0.setMaxEvaluations(0);
      nelderMead0.incrementIterationsCounter();
      nelderMead0.getEvaluations();
      nelderMead0.setMaxEvaluations((-448));
      assertEquals(1, nelderMead0.getIterations());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      nelderMead0.simplex = null;
      int int0 = nelderMead0.getMaxEvaluations();
      int int1 = nelderMead0.getMaxIterations();
      assertTrue(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional((-1772.773), (-1772.773));
      multiDirectional0.incrementIterationsCounter();
      assertEquals(1, multiDirectional0.getIterations());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      int int0 = nelderMead0.getIterations();
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, nelderMead0.getMaxIterations());
      assertEquals(Integer.MAX_VALUE, nelderMead0.getMaxEvaluations());
  }

}

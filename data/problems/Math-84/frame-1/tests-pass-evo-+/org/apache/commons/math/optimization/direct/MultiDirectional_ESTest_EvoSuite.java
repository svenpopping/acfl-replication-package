/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:46:21 GMT 2020
 */

package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.direct.MultiDirectional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class MultiDirectional_ESTest_EvoSuite extends MultiDirectional_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional(1.0, 45.6460404);
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[3];
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 1.0, true);
      realPointValuePairArray0[0] = realPointValuePair0;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-139), (-139)).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional(1.0, 1.0);
      RealPointValuePair[] realPointValuePairArray0 = new RealPointValuePair[3];
      double[] doubleArray0 = new double[0];
      RealPointValuePair realPointValuePair0 = new RealPointValuePair(doubleArray0, 1.0, true);
      realPointValuePairArray0[0] = realPointValuePair0;
      multiDirectional0.simplex = realPointValuePairArray0;
      Comparator<RealPointValuePair> comparator0 = (Comparator<RealPointValuePair>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-139), 17).when(comparator0).compare(any(org.apache.commons.math.optimization.RealPointValuePair.class) , any(org.apache.commons.math.optimization.RealPointValuePair.class));
      multiDirectional0.iterateSimplex(comparator0);
      assertEquals(1, multiDirectional0.getIterations());
  }

}

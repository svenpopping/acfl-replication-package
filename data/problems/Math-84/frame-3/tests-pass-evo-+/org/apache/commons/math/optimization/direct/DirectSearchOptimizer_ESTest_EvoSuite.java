/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:43:11 GMT 2020
 */

package org.apache.commons.math.optimization.direct;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.apache.commons.math.analysis.MultivariateVectorialFunction;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.LeastSquaresConverter;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.SimpleRealPointChecker;
import org.apache.commons.math.optimization.direct.MultiDirectional;
import org.apache.commons.math.optimization.direct.NelderMead;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class DirectSearchOptimizer_ESTest_EvoSuite extends DirectSearchOptimizer_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      multiDirectional0.incrementIterationsCounter();
      assertEquals(1, multiDirectional0.getIterations());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxIterations());
      
      multiDirectional0.setMaxIterations(0);
      int int0 = multiDirectional0.getMaxIterations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional(0.0, Double.NaN);
      multiDirectional0.setMaxIterations((-223));
      int int0 = multiDirectional0.getMaxIterations();
      assertEquals((-223), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxEvaluations());
      
      multiDirectional0.setMaxEvaluations(0);
      int int0 = multiDirectional0.getMaxEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead(2.2250738585072014E-308, 2.2250738585072014E-308, (-727.63264), 0.0);
      SimpleRealPointChecker simpleRealPointChecker0 = new SimpleRealPointChecker();
      nelderMead0.setConvergenceChecker(simpleRealPointChecker0);
      assertEquals(Integer.MAX_VALUE, nelderMead0.getMaxEvaluations());
      assertEquals(Integer.MAX_VALUE, nelderMead0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead(0.0, (-1340.034117279), (-304.2916164727935), (-1340.034117279));
      double[] doubleArray0 = new double[2];
      MultivariateVectorialFunction multivariateVectorialFunction0 = mock(MultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0, (Object) doubleArray0).when(multivariateVectorialFunction0).value(any(double[].class));
      LeastSquaresConverter leastSquaresConverter0 = new LeastSquaresConverter(multivariateVectorialFunction0, doubleArray0, doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      nelderMead0.optimize(leastSquaresConverter0, goalType0, doubleArray0);
      assertEquals(7, nelderMead0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead(0.0, (-1340.034117279), (-304.2916164727935), (-1340.034117279));
      int int0 = nelderMead0.getMaxIterations();
      assertEquals(Integer.MAX_VALUE, nelderMead0.getMaxEvaluations());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional(0.0, 0.0);
      int int0 = multiDirectional0.getIterations();
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxEvaluations());
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxIterations());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead();
      int int0 = nelderMead0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, nelderMead0.getMaxIterations());
      assertEquals(Integer.MAX_VALUE, nelderMead0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiDirectional multiDirectional0 = new MultiDirectional();
      int int0 = multiDirectional0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, multiDirectional0.getMaxIterations());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NelderMead nelderMead0 = new NelderMead(0.0, (-1340.034117279), (-304.2916164727935), (-1340.034117279));
      nelderMead0.getConvergenceChecker();
      assertEquals(Integer.MAX_VALUE, nelderMead0.getMaxEvaluations());
      assertEquals(Integer.MAX_VALUE, nelderMead0.getMaxIterations());
  }
}

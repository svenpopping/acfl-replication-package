/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:44:02 GMT 2020
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class EventState_ESTest_EvoSuite extends EventState_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, (-1216.050839), Double.NaN, (-1216.050839)).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, (-2793.3), (-2793.3), 214);
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted(Double.NaN, doubleArray0);
      boolean boolean0 = eventState0.reset((-2793.3), doubleArray0);
      assertTrue(eventState0.stop());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2146207890, (-319)).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, Double.NaN, (-56.451850433335), (-1.0), (-1.0)).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 768.31737, (-2856.224650393419), (-1167));
      double[] doubleArray0 = new double[3];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted((-1167), (double[]) null);
      eventState0.stepAccepted((-2856.224650393419), (double[]) null);
      boolean boolean1 = eventState0.stop();
      assertEquals(768.31737, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1167), eventState0.getMaxIterationCount());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1331.1157733885).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 3585);
      double[] doubleArray0 = new double[1];
      eventState0.stepAccepted(Double.POSITIVE_INFINITY, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(3585, eventState0.getMaxIterationCount());
      assertEquals(Double.POSITIVE_INFINITY, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 172.037454, 0.0, 0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      
      double[] doubleArray0 = new double[9];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(172.037454, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertFalse(boolean0);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1484.646593).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 0);
      double[] doubleArray0 = new double[0];
      eventState0.reinitializeBegin(0.0, doubleArray0);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-339.15645119837), Double.POSITIVE_INFINITY, 17);
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(17, int0);
      assertEquals((-339.15645119837), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 1.0, 0.0, (-1));
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(1.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0.0, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 449.1422611035, 449.1422611035, 208);
      double double0 = eventState0.getMaxCheckInterval();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(208, eventState0.getMaxIterationCount());
      assertEquals(449.1422611035, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, (-1331.5800920270397), (-1331.5800920270397), 17);
      eventState0.getEventHandler();
      assertEquals(17, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-1331.5800920270397), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, Double.NaN, 0.0, 2811);
      double double0 = eventState0.getConvergence();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(2811, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-1499.647167054334), (-1499.647167054334), (-1499.647167054334), (-1499.647167054334), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, (-626.0), 0);
      double[] doubleArray0 = null;
      eventState0.reinitializeBegin(0.0, (double[]) null);
      eventState0.getMaxIterationCount();
      eventState0.reinitializeBegin(0, (double[]) null);
      double[] doubleArray1 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray1, true);
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      dummyStepInterpolator0.setInterpolatedTime(159.44807);
      dummyStepInterpolator0.setInterpolatedTime(0.0);
      dummyStepInterpolator0.storeTime((-2316.3908297626));
      dummyStepInterpolator0.finalizeStep();
      StepInterpolator stepInterpolator0 = dummyStepInterpolator0.copy();
      dummyStepInterpolator1.finalizeStep();
      dummyStepInterpolator1.storeTime(0);
      dummyStepInterpolator1.getInterpolatedState();
      dummyStepInterpolator1.setInterpolatedTime(2625.2679);
      eventState0.evaluateStep(dummyStepInterpolator1);
      eventState0.reset(0, (double[]) null);
      eventState0.getEventTime();
      double double0 = Double.NaN;
      eventState0.evaluateStep(stepInterpolator0);
      eventState0.stepAccepted(double0, doubleArray0);
      double double1 = eventState0.getMaxCheckInterval();
      assertEquals(625.9999978426929, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 2).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, Double.NaN, (double)(-1), 675.0, 675.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 768.31737, (-2856.224650393419), (-1167));
      double[] doubleArray0 = new double[3];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      eventState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(eventState0.stop());
      
      eventState0.stepAccepted((-1167), (double[]) null);
      eventState0.stepAccepted((-2856.224650393419), (double[]) null);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      
      boolean boolean0 = eventState0.reset(Double.NEGATIVE_INFINITY, (double[]) null);
      assertEquals((-1167), eventState0.getMaxIterationCount());
      assertEquals(768.31737, eventState0.getMaxCheckInterval(), 0.01);
      assertTrue(boolean0);
      assertEquals(2856.224650393419, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(9, 1).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, Double.NaN, (-1025.3419786), Double.NaN, (double)9).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 738.9987746068663, (-2856.224650393419), (-1167));
      double[] doubleArray0 = new double[3];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted((-1167), (double[]) null);
      eventState0.stepAccepted((-2856.224650393419), (double[]) null);
      boolean boolean0 = eventState0.reset((-1167), doubleArray0);
      assertEquals((-1167), eventState0.getMaxIterationCount());
      assertEquals(738.9987746068663, eventState0.getMaxCheckInterval(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, (-1216.050839), Double.NaN, (-1216.050839)).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, (-2793.3), (-2793.3), 214);
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      eventState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(eventState0.stop());
      
      eventState0.stepAccepted(Double.NaN, doubleArray0);
      boolean boolean0 = eventState0.stop();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, (-2793.3), (-2793.3), 214);
      boolean boolean0 = eventState0.stop();
      assertFalse(boolean0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(214, eventState0.getMaxIterationCount());
      assertEquals((-2793.3), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1764.538332)).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, Double.NaN, Double.NaN, 2);
      double[] doubleArray0 = new double[7];
      eventState0.stepAccepted(Double.NaN, doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 2917.926575612, 1.0, 2);
      double[] doubleArray0 = new double[6];
      eventState0.stepAccepted((-1.0), doubleArray0);
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2917.926575612, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(1.0, eventState0.getConvergence(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, (-1216.050839), Double.NaN, (-1216.050839), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, (-2793.3), (-2793.3), 214);
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      eventState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(eventState0.stop());
      
      eventState0.stepAccepted(Double.NaN, doubleArray0);
      eventState0.reinitializeBegin((-2793.3), doubleArray0);
      assertTrue(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 738.9987746068663, (-2856.224650393419), (-1167));
      double double0 = eventState0.getConvergence();
      assertEquals(738.9987746068663, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals((-1167), eventState0.getMaxIterationCount());
      assertEquals(2856.224650393419, double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, (-2793.3), (-2793.3), 214);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals(214, eventState0.getMaxIterationCount());
      assertEquals((-2793.3), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("").when(eventHandler0).toString();
      EventState eventState0 = new EventState(eventHandler0, (-2793.3), (-2793.3), 214);
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(214, eventState0.getMaxIterationCount());
      assertEquals((-2793.3), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, (-1216.050839), Double.NaN).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, (-2793.3), (-2793.3), 214);
      double[] doubleArray0 = new double[0];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      boolean boolean1 = eventState0.reset((-2793.3), doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(214, eventState0.getMaxIterationCount());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}

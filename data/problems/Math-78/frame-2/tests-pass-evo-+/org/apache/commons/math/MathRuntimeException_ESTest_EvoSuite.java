/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:40:09 GMT 2020
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.PrintStream;
import java.text.ParseException;
import java.util.ConcurrentModificationException;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.apache.commons.math.MathRuntimeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;

public class MathRuntimeException_ESTest_EvoSuite extends MathRuntimeException_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException((String) null, objectArray0);
      String string0 = mathRuntimeException0.getPattern();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ParseException parseException0 = MathRuntimeException.createParseException((-101), "", objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0);
      String string0 = mathRuntimeException0.getPattern();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      NullPointerException nullPointerException0 = MathRuntimeException.createNullPointerException("", objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(nullPointerException0);
      Locale locale0 = Locale.GERMANY;
      String string0 = mathRuntimeException0.getMessage(locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException0 = MathRuntimeException.createArrayIndexOutOfBoundsException("r:pzmT-lW%;ezXx", objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(arrayIndexOutOfBoundsException0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(iOException0);
      MathRuntimeException mathRuntimeException1 = new MathRuntimeException(mathRuntimeException0, "r:pzmT-lW%;ezXx", objectArray0);
      String string0 = mathRuntimeException1.getMessage();
      assertEquals("r:pzmT-lW%;ezXx", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException0 = MathRuntimeException.createArrayIndexOutOfBoundsException("+1", objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(arrayIndexOutOfBoundsException0, "+1", objectArray0);
      String string0 = mathRuntimeException0.getLocalizedMessage();
      assertEquals("+1", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      ParseException parseException0 = MathRuntimeException.createParseException((-101), "", objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0);
      Object[] objectArray1 = mathRuntimeException0.getArguments();
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("org.apache.commons.math.MathRuntimeException$8", objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.math.MathRuntimeException$8");
      mathRuntimeException0.printStackTrace((PrintStream) mockPrintStream0);
      assertEquals("org.apache.commons.math.MathRuntimeException$8", mathRuntimeException0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("", objectArray0);
      String string0 = mathRuntimeException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("K", objectArray0);
      Locale locale0 = Locale.FRANCE;
      String string0 = mathRuntimeException0.getMessage(locale0);
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("K", objectArray0);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.CANADA;
      Locale.setDefault(locale0);
      String string0 = mathRuntimeException0.getMessage(locale1);
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParseException parseException0 = MathRuntimeException.createParseException((-1735), "", (Object[]) null);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(parseException0, "", (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("", (Object[]) null);
      String string0 = mathRuntimeException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      NullPointerException nullPointerException0 = MathRuntimeException.createNullPointerException("+1", objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(nullPointerException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      IllegalStateException illegalStateException0 = MathRuntimeException.createIllegalStateException("", objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(illegalStateException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException0 = MathRuntimeException.createArrayIndexOutOfBoundsException("+1", objectArray0);
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((Throwable) arrayIndexOutOfBoundsException0);
      assertNotNull(illegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArithmeticException arithmeticException0 = MathRuntimeException.createArithmeticException("", (Object[]) null);
      IOException iOException0 = MathRuntimeException.createIOException(arithmeticException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException0 = MathRuntimeException.createArrayIndexOutOfBoundsException("+1", objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(arrayIndexOutOfBoundsException0, "+1", objectArray0);
      String string0 = mathRuntimeException0.getPattern();
      assertEquals("+1", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ParseException parseException0 = MathRuntimeException.createParseException(0, "", objectArray0);
      RuntimeException runtimeException0 = MathRuntimeException.createInternalError(parseException0);
      IOException iOException0 = MathRuntimeException.createIOException(runtimeException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((String) null, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(illegalArgumentException0, "f-f{~&zF*VfI B", objectArray0);
      Object[] objectArray1 = mathRuntimeException0.getArguments();
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      EOFException eOFException0 = MathRuntimeException.createEOFException("", objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(eOFException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException((String) null, objectArray0);
      mathRuntimeException0.printStackTrace();
      assertNull(mathRuntimeException0.getPattern());
  }
}

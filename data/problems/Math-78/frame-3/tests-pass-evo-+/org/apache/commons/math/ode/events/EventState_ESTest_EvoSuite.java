/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:43:40 GMT 2020
 */

package org.apache.commons.math.ode.events;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.events.EventState;
import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
import org.apache.commons.math.ode.sampling.NordsieckStepInterpolator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class EventState_ESTest_EvoSuite extends EventState_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(0.0, (-585.3129600085277), 0.0, (-585.3129600085277), (-585.3129600085277)).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 240.56449117, (-2177.1186632509225), (-1));
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(eventState0.stop());
      
      eventState0.stepAccepted(0.0, doubleArray0);
      boolean boolean0 = eventState0.reset(1044.7648485042, doubleArray0);
      assertTrue(eventState0.stop());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, Double.NaN, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 0);
      double[] doubleArray0 = new double[7];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted(1.0, doubleArray0);
      boolean boolean1 = eventState0.stop();
      //  // Unstable assertion: assertEquals(0, eventState0.getMaxIterationCount());
      //  // Unstable assertion: assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2.2250738585072014E-308).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, Double.NaN, Double.NaN, 2);
      double[] doubleArray0 = new double[2];
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 0);
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, (-1384.0), (-1384.0), 46);
      int int0 = eventState0.getMaxIterationCount();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(46, int0);
      assertEquals((-1384.0), eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 0);
      double double0 = eventState0.getMaxCheckInterval();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
      assertFalse(eventState0.stop());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, (-363.4), (-3484.673), (-1757));
      double double0 = eventState0.getMaxCheckInterval();
      assertFalse(eventState0.stop());
      assertEquals((-363.4), double0, 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals((-1757), eventState0.getMaxIterationCount());
      assertEquals(3484.673, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventState eventState0 = new EventState((EventHandler) null, 1.0, 1.0, (-1321));
      eventState0.getEventHandler();
      assertEquals((-1321), eventState0.getMaxIterationCount());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1.0, eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 1355.7359746131012, (-577.3807764939505), (-2106));
      double double0 = eventState0.getConvergence();
      assertEquals((-2106), eventState0.getMaxIterationCount());
      assertEquals(577.3807764939505, double0, 0.01);
      assertEquals(1355.7359746131012, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2759.73390898), 0.5, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double0 = (-2984.07698517793);
      EventState eventState0 = new EventState(eventHandler0, (-2984.07698517793), 547.876463, 1778);
      double[] doubleArray0 = new double[0];
      eventState0.reinitializeBegin((-2984.07698517793), doubleArray0);
      double double1 = eventState0.getEventTime();
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      DummyStepInterpolator dummyStepInterpolator1 = new DummyStepInterpolator(dummyStepInterpolator0);
      dummyStepInterpolator0.copy();
      dummyStepInterpolator1.copy();
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator1);
      assertEquals((-2984.07698517793), dummyStepInterpolator1.getInterpolatedTime(), 0.01);
      
      eventState0.reset(double1, doubleArray0);
      eventState0.getMaxCheckInterval();
      eventState0.getEventTime();
      eventState0.getConvergence();
      boolean boolean1 = eventState0.reset(double0, doubleArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(0.0, (-585.3129600085277), 0.0, (-585.3129600085277), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, (-585.3129600085277), (-2188.88690213465), 2);
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(boolean0);
      
      eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertFalse(eventState0.stop());
      
      eventState0.stepAccepted(0.0, doubleArray0);
      boolean boolean1 = eventState0.reset((-1272.101), doubleArray0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2188.88690213465, eventState0.getConvergence(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(0.0, (-585.3129600085277), 0.0, (-585.3129600085277), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, (-585.3129600085277), (-2188.88690213465), (-1));
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, false);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(Double.NaN, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      
      eventState0.stepAccepted(0.0, doubleArray0);
      boolean boolean1 = eventState0.reset((-1271.735920623597), doubleArray0);
      assertEquals((-585.3129600085277), eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), eventState0.getMaxIterationCount());
      assertEquals(2188.88690213465, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, (-585.3129600085277), (-2188.88690213465), 2);
      boolean boolean0 = eventState0.stop();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(2, eventState0.getMaxIterationCount());
      assertEquals((-585.3129600085277), eventState0.getMaxCheckInterval(), 0.01);
      assertFalse(boolean0);
      assertEquals(2188.88690213465, eventState0.getConvergence(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-585.3129600085277), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 240.56449117, (-2188.88690213465), (-1));
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.reinitializeBegin((-4788.765654), doubleArray0);
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals(240.56449117, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals((-1), eventState0.getMaxIterationCount());
      assertEquals(2188.88690213465, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(0.0, (-585.3129600085277), 0.0, (-585.3129600085277), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, (-585.3129600085277), (-2188.88690213465), (-1));
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.reinitializeBegin((-4788.765654), doubleArray0);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.stepAccepted(0.0, doubleArray0);
      assertEquals((-4788.765654), eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(0.0, (-585.3129600085277), 0.0, (-585.3129600085277), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, (-585.3129600085277), (-2188.88690213465), (-1));
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      eventState0.evaluateStep(dummyStepInterpolator0);
      eventState0.evaluateStep(dummyStepInterpolator0);
      assertFalse(eventState0.stop());
      
      eventState0.stepAccepted(0.0, doubleArray0);
      boolean boolean0 = eventState0.stop();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-585.5319534912045), 0.0, (-585.5319534912045)).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 240.56449117, 0.0, (-1));
      double[] doubleArray0 = new double[1];
      DummyStepInterpolator dummyStepInterpolator0 = new DummyStepInterpolator(doubleArray0, true);
      dummyStepInterpolator0.storeTime(0.5);
      eventState0.reinitializeBegin((-1), doubleArray0);
      boolean boolean0 = eventState0.evaluateStep(dummyStepInterpolator0);
      assertEquals(0.5, dummyStepInterpolator0.getInterpolatedTime(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-892.94065651268), (-892.94065651268), (-892.94065651268), 709.4356508149696).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventState eventState0 = new EventState(eventHandler0, 664.161947818, 664.161947818, (-1521));
      double[] doubleArray0 = new double[7];
      eventState0.stepAccepted(Double.NaN, doubleArray0);
      eventState0.reinitializeBegin(0.0, doubleArray0);
      eventState0.reinitializeBegin((-1521), doubleArray0);
      eventState0.reinitializeBegin((-1.0), doubleArray0);
      assertEquals(664.161947818, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-1521), eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 0);
      double double0 = eventState0.getConvergence();
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(eventState0.stop());
      assertEquals(0, eventState0.getMaxIterationCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 240.56449117, (-2188.88690213465), (-1));
      double double0 = eventState0.getMaxCheckInterval();
      assertFalse(eventState0.stop());
      assertEquals(240.56449117, double0, 0.01);
      assertEquals((-1), eventState0.getMaxIterationCount());
      assertEquals(2188.88690213465, eventState0.getConvergence(), 0.01);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventState eventState0 = new EventState(eventHandler0, 1355.7359746131012, (-577.3807764939505), (-2106));
      int int0 = eventState0.getMaxIterationCount();
      assertEquals(577.3807764939505, eventState0.getConvergence(), 0.01);
      assertFalse(eventState0.stop());
      assertEquals((-2106), int0);
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(1355.7359746131012, eventState0.getMaxCheckInterval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("ewp^:QI@").when(eventHandler0).toString();
      EventState eventState0 = new EventState(eventHandler0, 0.0, 0.0, 0);
      eventState0.getEventHandler();
      assertFalse(eventState0.stop());
      assertEquals(Double.NaN, eventState0.getEventTime(), 0.01);
      assertEquals(0.0, eventState0.getMaxCheckInterval(), 0.01);
      assertEquals(0, eventState0.getMaxIterationCount());
  }
}

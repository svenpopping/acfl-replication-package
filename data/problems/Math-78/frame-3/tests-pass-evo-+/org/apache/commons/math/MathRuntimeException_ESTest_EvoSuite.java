/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:40:07 GMT 2020
 */

package org.apache.commons.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.PrintStream;
import java.text.ParseException;
import java.util.ConcurrentModificationException;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.apache.commons.math.MathRuntimeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;

public class MathRuntimeException_ESTest_EvoSuite extends MathRuntimeException_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("hJIhcg7(J-;r=", objectArray0);
      String string0 = mathRuntimeException0.getPattern();
      assertEquals("hJIhcg7(J-;r=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArithmeticException arithmeticException0 = MathRuntimeException.createArithmeticException("org.apache.commons.math.MathRuntimeException$9", (Object[]) null);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(arithmeticException0, "", (Object[]) null);
      String string0 = mathRuntimeException0.getPattern();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("org.apache.commons.math.MathRuntimeException$9", objectArray0);
      Locale locale0 = Locale.KOREA;
      String string0 = mathRuntimeException0.getMessage(locale0);
      assertEquals("org.apache.commons.math.MathRuntimeException$9", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("org.apache.commons.math.MathRuntimeException$9", objectArray0);
      String string0 = mathRuntimeException0.getMessage();
      assertEquals("org.apache.commons.math.MathRuntimeException$9", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("s1OXADyZ`ff", objectArray0);
      String string0 = mathRuntimeException0.getLocalizedMessage();
      assertEquals("s1OXADyZ`ff", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ConcurrentModificationException concurrentModificationException0 = MathRuntimeException.createConcurrentModificationException("WO\" \"G4ZS<-f/hxici", objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(concurrentModificationException0, (String) null, objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("WO\" \"G4ZS<-f/hxici");
      mathRuntimeException0.printStackTrace((PrintStream) mockPrintStream0);
      assertNull(mathRuntimeException0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("");
      Object[] objectArray0 = new Object[2];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(mockThrowable0, "", objectArray0);
      String string0 = mathRuntimeException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ConcurrentModificationException concurrentModificationException0 = MathRuntimeException.createConcurrentModificationException((String) null, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(concurrentModificationException0, (String) null, objectArray0);
      String string0 = mathRuntimeException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException((String) null, objectArray0);
      MathRuntimeException mathRuntimeException1 = new MathRuntimeException(mathRuntimeException0, "", objectArray0);
      Locale locale0 = Locale.CANADA_FRENCH;
      String string0 = mathRuntimeException1.getMessage(locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("", (Object[]) null);
      MathRuntimeException mathRuntimeException1 = new MathRuntimeException(mathRuntimeException0, "", (Object[]) null);
      assertFalse(mathRuntimeException1.equals((Object)mathRuntimeException0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ParseException parseException0 = MathRuntimeException.createParseException((-2284), "ScLi[5oZ7skVndG}2,", objectArray0);
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((Throwable) parseException0);
      assertNotNull(illegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      IllegalStateException illegalStateException0 = MathRuntimeException.createIllegalStateException("jo#M:=n.s", objectArray0);
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((Throwable) illegalStateException0);
      assertNotNull(illegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      EOFException eOFException0 = MathRuntimeException.createEOFException("ScLi[5oZ7skVndG}2,", objectArray0);
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((Throwable) eOFException0);
      assertNotNull(illegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException0 = MathRuntimeException.createArrayIndexOutOfBoundsException("9", objectArray0);
      IOException iOException0 = MathRuntimeException.createIOException(arrayIndexOutOfBoundsException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      ArithmeticException arithmeticException0 = MathRuntimeException.createArithmeticException("qiRN.!UV=B", objectArray0);
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException((Throwable) arithmeticException0);
      assertNotNull(illegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ConcurrentModificationException concurrentModificationException0 = MathRuntimeException.createConcurrentModificationException((String) null, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(concurrentModificationException0, (String) null, objectArray0);
      String string0 = mathRuntimeException0.getPattern();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      ConcurrentModificationException concurrentModificationException0 = MathRuntimeException.createConcurrentModificationException((String) null, objectArray0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(concurrentModificationException0, (String) null, objectArray0);
      Object[] objectArray1 = mathRuntimeException0.getArguments();
      NoSuchElementException noSuchElementException0 = MathRuntimeException.createNoSuchElementException((String) null, objectArray1);
      IOException iOException0 = MathRuntimeException.createIOException(noSuchElementException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      IllegalStateException illegalStateException0 = MathRuntimeException.createIllegalStateException("S/h7E(hKcbzoZNc", objectArray0);
      MockThrowable mockThrowable0 = new MockThrowable(illegalStateException0);
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException(mockThrowable0, ".]7I3STQ,;nL^<{", objectArray0);
      Object[] objectArray1 = mathRuntimeException0.getArguments();
      assertEquals(3, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("", (Object[]) null);
      RuntimeException runtimeException0 = MathRuntimeException.createInternalError(mathRuntimeException0);
      IOException iOException0 = MathRuntimeException.createIOException(runtimeException0);
      assertNotNull(iOException0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MathRuntimeException mathRuntimeException0 = new MathRuntimeException("3K=/DQm,@{f?h[_CO", objectArray0);
      mathRuntimeException0.printStackTrace();
      assertEquals("3K=/DQm,@{f?h[_CO", mathRuntimeException0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      IllegalArgumentException illegalArgumentException0 = MathRuntimeException.createIllegalArgumentException("qiRN.!UV=B", objectArray0);
      IllegalArgumentException illegalArgumentException1 = MathRuntimeException.createIllegalArgumentException((Throwable) illegalArgumentException0);
      assertNotNull(illegalArgumentException1);
  }
}

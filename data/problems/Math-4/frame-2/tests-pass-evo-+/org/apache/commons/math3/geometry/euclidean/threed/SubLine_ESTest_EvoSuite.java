/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:27:53 GMT 2020
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Segment;
import org.apache.commons.math3.geometry.euclidean.threed.SubLine;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.geometry.partitioning.BSPTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class SubLine_ESTest_EvoSuite extends SubLine_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1584.68702967055, 1584.68702967055);
      Vector3D vector3D1 = new Vector3D((-3500.9549), (-3500.9549));
      Line line0 = new Line(vector3D1, vector3D0);
      Segment segment0 = new Segment(vector3D0, vector3D1, line0);
      SubLine subLine0 = new SubLine(segment0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, false);
      assertNotSame(vector3D2, vector3D1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2014.0543), (-2014.0543));
      Vector3D vector3D1 = new Vector3D((-2014.0543), vector3D0, (-2014.0543), vector3D0, (-2014.0543), vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.0, vector3D0, (-2014.0543), vector3D1);
      Line line0 = new Line(vector3D1, vector3D2);
      SubLine subLine1 = line0.wholeLine();
      Vector3D vector3D3 = subLine1.intersection(subLine0, true);
      assertNotSame(vector3D3, vector3D2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = subLine0.intersection(subLine0, true);
      assertNotSame(vector3D2, vector3D1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2014.0543), 457.8776531626);
      Vector3D vector3D1 = new Vector3D((-2014.0543), vector3D0, 457.8776531626, vector3D0, (-2014.0543), vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.1, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(0.0, vector3D0, (-2014.0543), vector3D2);
      Line line0 = new Line(vector3D1, vector3D3);
      SubLine subLine1 = line0.wholeLine();
      Vector3D vector3D4 = subLine1.intersection(subLine0, false);
      assertNull(vector3D4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2014.0543), 457.8776531626);
      Vector3D vector3D1 = new Vector3D((-2014.0543), vector3D0, 457.8776531626, vector3D0, (-2014.0543), vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.1, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(0.0, vector3D0, (-2014.0543), vector3D2);
      Line line0 = new Line(vector3D1, vector3D3);
      SubLine subLine1 = line0.wholeLine();
      Vector3D vector3D4 = subLine0.intersection(subLine1, false);
      assertNull(vector3D4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2014.0543), (-2014.0543));
      Vector3D vector3D1 = new Vector3D((-2014.0543), vector3D0, (-2014.0543), vector3D0, (-2014.0543), vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.1, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(0.0, vector3D0, (-2014.0543), vector3D2);
      Line line0 = new Line(vector3D1, vector3D3);
      SubLine subLine1 = line0.wholeLine();
      Vector3D vector3D4 = subLine1.intersection(subLine0, true);
      assertNull(vector3D4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D((-2014.0543), (-2014.0543));
      Vector3D vector3D1 = new Vector3D((-2014.0543), vector3D0, (-2014.0543), vector3D0, (-2014.0543), vector3D0);
      SubLine subLine0 = new SubLine(vector3D1, vector3D0);
      Vector3D vector3D2 = new Vector3D(0.1, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(0.0, vector3D0, (-2014.0543), vector3D2);
      Line line0 = new Line(vector3D1, vector3D3);
      SubLine subLine1 = line0.wholeLine();
      Vector3D vector3D4 = subLine0.intersection(subLine1, true);
      assertNull(vector3D4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      SubLine subLine0 = new SubLine(vector3D0, vector3D0);
      List<Segment> list0 = subLine0.getSegments();
      assertEquals(1, list0.size());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:33:07 GMT 2020
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class LocaleUtils_ESTest_EvoSuite extends LocaleUtils_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("ar");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List list0 = LocaleUtils.availableLocaleList();
      LocaleUtils.countriesByLanguage((String) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LocaleUtils.availableLocaleList();
      Locale.getISOCountries();
      List list1 = LocaleUtils.countriesByLanguage("es");
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      List list0 = LocaleUtils.countriesByLanguage("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocaleUtils.languagesByCountry("hi");
      Locale locale0 = null;
      List list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      List list1 = LocaleUtils.countriesByLanguage("hi");
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocaleUtils.availableLocaleSet();
      Locale locale0 = Locale.TAIWAN;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      assertNotNull(set0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocaleUtils.availableLocaleSet();
      Set set0 = LocaleUtils.availableLocaleSet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = new Locale(" ", "I5yE)-Y\"~h", " ");
      List list0 = LocaleUtils.localeLookupList(locale0, (Locale) null);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      List list0 = LocaleUtils.localeLookupList((Locale) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LocaleUtils.toLocale((String) null);
      LocaleUtils.languagesByCountry("TH");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List list0 = LocaleUtils.languagesByCountry((String) null);
      assertTrue(list0.isEmpty());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:44:53 GMT 2020
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.BetaDistributionImpl;
import org.apache.commons.math.distribution.CauchyDistributionImpl;
import org.apache.commons.math.distribution.GammaDistributionImpl;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class AbstractContinuousDistribution_ESTest_EvoSuite extends AbstractContinuousDistribution_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0E-6);
      assertEquals((-4.753424448607358), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BetaDistributionImpl betaDistributionImpl0 = new BetaDistributionImpl(4.9E-324, 0.0);
      double double0 = betaDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BetaDistributionImpl betaDistributionImpl0 = new BetaDistributionImpl((-1516.00921329), (-1516.00921329));
      double double0 = betaDistributionImpl0.inverseCumulativeProbability(1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CauchyDistributionImpl cauchyDistributionImpl0 = new CauchyDistributionImpl();
      double double0 = cauchyDistributionImpl0.inverseCumulativeProbability(3.399464998481189E-5);
      assertEquals((-9363.528823379806), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.5);
      assertEquals(0.0, double0, 0.01);
  }

}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:46:12 GMT 2020
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class FDistributionImpl_ESTest_EvoSuite extends FDistributionImpl_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0, 1.0);
      fDistributionImpl0.setDenominatorDegreesOfFreedom(1.7976931348623157E308);
      double double0 = fDistributionImpl0.getInitialDomain((-270.86212747239));
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0, 1.0);
      double double0 = fDistributionImpl0.getInitialDomain((-0.4919138160976202));
      assertEquals(1.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2110.343706396, 2110.343706396);
      double double0 = fDistributionImpl0.getDomainUpperBound(2110.343706396);
      assertEquals(2110.343706396, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(2110.343706396, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2228.9903016571466, 2228.9903016571466);
      double double0 = fDistributionImpl0.getDomainLowerBound(2228.9903016571466);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2228.9903016571466, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(2228.9903016571466, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(49.476408999, 49.476408999);
      fDistributionImpl0.setNumeratorDegreesOfFreedom(49.476408999);
      assertEquals(49.476408999, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(49.476408999, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(49.476408999, 49.476408999);
      double double0 = fDistributionImpl0.cumulativeProbability((-186.1259076));
      assertEquals(49.476408999, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(49.476408999, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2228.9903016571466, 2228.9903016571466);
      double double0 = fDistributionImpl0.cumulativeProbability(2228.9903016571466);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(3.6899182659531625E-6, 977.211804684782);
      double double0 = fDistributionImpl0.getDenominatorDegreesOfFreedom();
      assertEquals(3.6899182659531625E-6, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(977.211804684782, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(2228.9903016571466, 2228.9903016571466);
      double double0 = fDistributionImpl0.getNumeratorDegreesOfFreedom();
      assertEquals(2228.9903016571466, double0, 0.01);
      assertEquals(2228.9903016571466, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0, 1.0);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(1.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(1.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(161.96604318642855, 161.96604318642855);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(161.96604318642855, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(161.96604318642855, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0, 1.0);
      fDistributionImpl0.setDenominatorDegreesOfFreedom(1.7976931348623157E308);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(0.5);
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(2.0, double0, 0.01);
  }
}

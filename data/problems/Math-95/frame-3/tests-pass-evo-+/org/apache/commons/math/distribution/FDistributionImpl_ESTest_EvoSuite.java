/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:46:41 GMT 2020
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class FDistributionImpl_ESTest_EvoSuite extends FDistributionImpl_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1754.6315412276, 1.0);
      double double0 = fDistributionImpl0.cumulativeProbability(1754.6315412276);
      assertEquals(0.9809566239714653, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(133.42712579201503, 133.42712579201503);
      double double0 = fDistributionImpl0.getInitialDomain(0.0);
      assertEquals(1.0152175586884935, double0, 0.01);
      assertEquals(133.42712579201503, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1933.6647675071, 1.0);
      double double0 = fDistributionImpl0.getInitialDomain(1298.6029219849217);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1933.6647675071, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1933.6647675071, 1.0);
      double double0 = fDistributionImpl0.getDomainUpperBound(0.0);
      assertEquals(1933.6647675071, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(1.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(133.42712579201503, 133.42712579201503);
      double double0 = fDistributionImpl0.getDomainLowerBound(133.42712579201503);
      assertEquals(0.0, double0, 0.01);
      assertEquals(133.42712579201503, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(133.42712579201503, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(967.4, 823.893616494);
      fDistributionImpl0.setDenominatorDegreesOfFreedom(2147.0835);
      assertEquals(2147.0835, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(133.42712579201503, 133.42712579201503);
      fDistributionImpl0.setNumeratorDegreesOfFreedom(133.42712579201503);
      assertEquals(133.42712579201503, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(133.42712579201503, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1933.6647675071, 1.0);
      double double0 = fDistributionImpl0.cumulativeProbability((-180.3344269767001));
      assertEquals(1.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1933.6647675071, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(133.42712579201503, 133.42712579201503);
      double double0 = fDistributionImpl0.cumulativeProbability(133.42712579201503);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1368.4950987, 1368.4950987);
      double double0 = fDistributionImpl0.getDenominatorDegreesOfFreedom();
      assertEquals(1368.4950987, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1368.4950987, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1754.6315412276, 1.0);
      double double0 = fDistributionImpl0.getNumeratorDegreesOfFreedom();
      assertEquals(1754.6315412276, double0, 0.01);
      assertEquals(1.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.0, 1.0);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(1.0);
      assertEquals(1.0, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(138.22212463817962, 138.22212463817962);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(138.22212463817962, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(138.22212463817962, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(1.7976931348623157E308, 1.7976931348623157E308);
      double double0 = fDistributionImpl0.inverseCumulativeProbability(3.6899182659531625E-6);
      assertEquals(2.0, double0, 0.01);
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.7976931348623157E308, fDistributionImpl0.getDenominatorDegreesOfFreedom(), 0.01);
  }
}

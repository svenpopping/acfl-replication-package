/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:45:22 GMT 2020
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.CauchyDistributionImpl;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.FDistributionImpl;
import org.apache.commons.math.distribution.GammaDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class AbstractContinuousDistribution_ESTest_EvoSuite extends AbstractContinuousDistribution_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(558.1757056251794, 24.71023111);
      double double0 = gammaDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(24.71023111221235, 948.5381862409673);
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(24.71023111221235, gammaDistributionImpl0);
      double double0 = chiSquaredDistributionImpl0.inverseCumulativeProbability(4.059013928737715E-12);
      assertEquals(4.69E-321, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CauchyDistributionImpl cauchyDistributionImpl0 = new CauchyDistributionImpl();
      double double0 = cauchyDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(24.71023111221235, 24.71023111221235);
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(24.71023111221235, gammaDistributionImpl0);
      double double0 = chiSquaredDistributionImpl0.inverseCumulativeProbability(1.0E-6);
      assertEquals(24.71023111221235, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(559.9445681009029);
      double double0 = chiSquaredDistributionImpl0.inverseCumulativeProbability(Double.NaN);
      assertEquals(560.9445681009029, double0, 0.01);
  }
}

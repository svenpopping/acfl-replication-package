/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:28:21 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class AbstractIntegerDistribution_ESTest_EvoSuite extends AbstractIntegerDistribution_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(215, 215, 0);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(4069.713499831399, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(11, 1.0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(1.0, 11, 11);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(208, 1.0E-9);
      int int0 = pascalDistribution0.solveInverseCumulativeProbability(0.0, (-438), 208);
      assertEquals((-437), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-1), 12);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      double double0 = binomialDistribution0.cumulativeProbability((-200), 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.8704143265372427);
      int int0 = poissonDistribution0.inverseCumulativeProbability(0.8704143265372427);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, Double.NaN);
      int int0 = binomialDistribution0.inverseCumulativeProbability(0.13783809152425164);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(0.5652031276090093, 12);
      int int0 = poissonDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(526, 0.5);
      int int0 = binomialDistribution0.sample();
      assertEquals(278, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(11, 11, 11);
      int[] intArray0 = hypergeometricDistribution0.sample(11);
      assertEquals(11, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(11, 11, 11);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(526, 526, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(264, 10000000);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, Double.NaN);
      int int0 = binomialDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, Double.NaN);
      binomialDistribution0.reseedRandomGenerator(1330L);
      assertEquals(Double.NaN, binomialDistribution0.getNumericalVariance(), 0.01);
  }
}

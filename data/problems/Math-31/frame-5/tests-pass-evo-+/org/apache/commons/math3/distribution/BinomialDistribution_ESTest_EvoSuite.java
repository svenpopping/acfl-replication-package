/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:31:58 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class BinomialDistribution_ESTest_EvoSuite extends BinomialDistribution_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1, 1);
      binomialDistribution0.probability(1);
      binomialDistribution0.reseedRandomGenerator(2509L);
      binomialDistribution0.reseedRandomGenerator(0L);
      binomialDistribution0.getNumericalMean();
      binomialDistribution0.getNumberOfTrials();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(614, 0.006171712263039458);
      binomialDistribution0.getSupportUpperBound();
      binomialDistribution0.cumulativeProbability(614);
      binomialDistribution0.inverseCumulativeProbability(0.0);
      binomialDistribution0.probability(160);
      binomialDistribution0.cumulativeProbability(614);
      binomialDistribution0.getNumberOfTrials();
      binomialDistribution0.getNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1, 1);
      binomialDistribution0.sample(765);
      binomialDistribution0.sample();
      binomialDistribution0.getSupportLowerBound();
      binomialDistribution0.cumulativeProbability(1, 765);
      binomialDistribution0.getSupportLowerBound();
      binomialDistribution0.reseedRandomGenerator(1L);
      binomialDistribution0.getSupportLowerBound();
      binomialDistribution0.isSupportConnected();
      binomialDistribution0.cumulativeProbability(0);
      binomialDistribution0.getProbabilityOfSuccess();
      binomialDistribution0.getSupportUpperBound();
      binomialDistribution0.getNumericalVariance();
      binomialDistribution0.getSupportLowerBound();
      binomialDistribution0.getSupportUpperBound();
      binomialDistribution0.cumulativeProbability(765);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0.0);
      binomialDistribution0.getNumberOfTrials();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(805, 1.0);
      binomialDistribution0.getNumberOfTrials();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0.0);
      binomialDistribution0.cumulativeProbability(0, 0);
      binomialDistribution0.cumulativeProbability(0, 1100);
      binomialDistribution0.solveInverseCumulativeProbability(0, 1100, (-3111));
      binomialDistribution0.probability(0);
      binomialDistribution0.sample();
      binomialDistribution0.reseedRandomGenerator(0L);
      binomialDistribution0.solveInverseCumulativeProbability((-2286.0), 0, 0);
      binomialDistribution0.getNumericalMean();
      binomialDistribution0.getSupportLowerBound();
      binomialDistribution0.probability((-3111));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      binomialDistribution0.getSupportUpperBound();
      binomialDistribution0.getNumericalVariance();
      binomialDistribution0.cumulativeProbability((-2103));
      binomialDistribution0.getSupportUpperBound();
      binomialDistribution0.getNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      binomialDistribution0.cumulativeProbability(0);
      binomialDistribution0.getNumericalVariance();
      binomialDistribution0.probability(0);
      binomialDistribution0.getProbabilityOfSuccess();
      binomialDistribution0.cumulativeProbability(0, 940);
      binomialDistribution0.probability(759);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      binomialDistribution0.reseedRandomGenerator((-2404L));
      binomialDistribution0.probability(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1, 1);
      binomialDistribution0.getSupportUpperBound();
      binomialDistribution0.getNumericalVariance();
      binomialDistribution0.getProbabilityOfSuccess();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(223, 0.0);
      binomialDistribution0.sample(3238);
      double double0 = binomialDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      
      binomialDistribution0.getSupportLowerBound();
      binomialDistribution0.sample(3238);
      int int0 = binomialDistribution0.getNumberOfTrials();
      assertEquals(223, int0);
      
      binomialDistribution0.getSupportLowerBound();
      double double1 = binomialDistribution0.cumulativeProbability(223);
      double double2 = binomialDistribution0.cumulativeProbability(0);
      assertEquals(double2, double1, 0.01);
      
      int int1 = binomialDistribution0.getSupportLowerBound();
      assertEquals(0, int1);
      
      binomialDistribution0.getSupportUpperBound();
      assertEquals(0.0, binomialDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(1, 1);
      binomialDistribution0.solveInverseCumulativeProbability((-535.1516), 1, 223);
      double double0 = binomialDistribution0.cumulativeProbability((-1), 0);
      double double1 = binomialDistribution0.cumulativeProbability(1, 1558);
      binomialDistribution0.reseedRandomGenerator(1558);
      binomialDistribution0.getSupportUpperBound();
      double double2 = binomialDistribution0.getNumericalMean();
      binomialDistribution0.sample();
      binomialDistribution0.getProbabilityOfSuccess();
      binomialDistribution0.probability((-296));
      binomialDistribution0.probability((-1540));
      double double3 = binomialDistribution0.getProbabilityOfSuccess();
      assertEquals(1.0, double3, 0.01);
      
      double double4 = binomialDistribution0.probability(1);
      assertEquals(double4, double2, 0.01);
      
      binomialDistribution0.probability((-1540));
      double double5 = binomialDistribution0.probability(223);
      assertEquals(double5, double1, 0.01);
      
      int int0 = binomialDistribution0.getSupportUpperBound();
      assertEquals(1, int0);
      
      double double6 = binomialDistribution0.getNumericalVariance();
      assertEquals(double6, double0, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals(1, binomialDistribution0.getSupportLowerBound());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0.0);
      double double0 = binomialDistribution0.cumulativeProbability(845);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = binomialDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      
      boolean boolean0 = binomialDistribution0.isSupportConnected();
      assertEquals(0.0, binomialDistribution0.getNumericalVariance(), 0.01);
      assertTrue(boolean0);
      assertEquals(0, binomialDistribution0.getNumberOfTrials());
  }

}

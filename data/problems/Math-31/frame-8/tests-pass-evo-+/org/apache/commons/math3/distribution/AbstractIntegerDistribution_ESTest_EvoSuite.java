/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:30:41 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class AbstractIntegerDistribution_ESTest_EvoSuite extends AbstractIntegerDistribution_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 261);
      assertNotNull(uniformIntegerDistribution0);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(0, uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(261, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals(130.5, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals(5720.25, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability((-3371.897787), 0, 0);
      assertEquals(0, int0);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(0, uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(261, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals(130.5, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals(5720.25, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(80, 0.9718644414893631);
      assertNotNull(pascalDistribution0);
      assertEquals(2.3160068264269187, pascalDistribution0.getNumericalMean(), 0.01);
      assertEquals(80, pascalDistribution0.getNumberOfSuccesses());
      assertEquals(Integer.MAX_VALUE, pascalDistribution0.getSupportUpperBound());
      assertEquals(0.9718644414893631, pascalDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0, pascalDistribution0.getSupportLowerBound());
      assertTrue(pascalDistribution0.isSupportConnected());
      assertEquals(2.38305542167762, pascalDistribution0.getNumericalVariance(), 0.01);
      
      int int0 = pascalDistribution0.solveInverseCumulativeProbability(4, 80, Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(2.3160068264269187, pascalDistribution0.getNumericalMean(), 0.01);
      assertEquals(80, pascalDistribution0.getNumberOfSuccesses());
      assertEquals(Integer.MAX_VALUE, pascalDistribution0.getSupportUpperBound());
      assertEquals(0.9718644414893631, pascalDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0, pascalDistribution0.getSupportLowerBound());
      assertTrue(pascalDistribution0.isSupportConnected());
      assertEquals(2.38305542167762, pascalDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-1875), 272);
      assertNotNull(uniformIntegerDistribution0);
      assertEquals(384491.9166666667, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(272, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals((-801.5), uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals((-1875), uniformIntegerDistribution0.getSupportLowerBound());
      
      uniformIntegerDistribution0.reseedRandomGenerator((-1875));
      assertEquals(384491.9166666667, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(272, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals((-801.5), uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals((-1875), uniformIntegerDistribution0.getSupportLowerBound());
      
      int int0 = uniformIntegerDistribution0.sample();
      assertEquals((-714), int0);
      assertEquals(384491.9166666667, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(272, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals((-801.5), uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals((-1875), uniformIntegerDistribution0.getSupportLowerBound());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-105), 855);
      assertNotNull(uniformIntegerDistribution0);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals((-105), uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(855, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals(375.0, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals(76960.0, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      
      double double0 = uniformIntegerDistribution0.cumulativeProbability((-912), 10000000);
      assertEquals(1.0, double0, 0.01);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals((-105), uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(855, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals(375.0, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals(76960.0, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2147483644, 0, 2147483644);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2147483644, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2147483644, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(3.3888561478632076E-8);
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2147483644, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2147483644, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-2049), 2544);
      assertNotNull(uniformIntegerDistribution0);
      assertEquals((-2049), uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(1758736.25, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertEquals(2544, uniformIntegerDistribution0.getSupportUpperBound());
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(247.5, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      
      int[] intArray0 = uniformIntegerDistribution0.sample(620);
      assertNotNull(intArray0);
      assertEquals(620, intArray0.length);
      assertEquals((-2049), uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(1758736.25, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertEquals(2544, uniformIntegerDistribution0.getSupportUpperBound());
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(247.5, uniformIntegerDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-666), 2358);
      assertNotNull(uniformIntegerDistribution0);
      assertEquals(2358, uniformIntegerDistribution0.getSupportUpperBound());
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(846.0, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals((-666), uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(762552.0, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability(2358, Integer.MIN_VALUE, (-4060));
      assertEquals((-4060), int0);
      assertEquals(2358, uniformIntegerDistribution0.getSupportUpperBound());
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(846.0, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals((-666), uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(762552.0, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-2049), 2544);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(1.0E-12);
      assertEquals((-2049), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-2049), 2544);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.999782324771441);
      assertEquals(2543, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(6908, 0.0);
      int int0 = pascalDistribution0.sample();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      int int0 = pascalDistribution0.inverseCumulativeProbability(1);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-2049), 2544);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.0);
      assertEquals((-2049), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      double double0 = pascalDistribution0.cumulativeProbability(1, 2248);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(1, 1);
      int int0 = pascalDistribution0.sample();
      assertEquals(0, int0);
  }
}

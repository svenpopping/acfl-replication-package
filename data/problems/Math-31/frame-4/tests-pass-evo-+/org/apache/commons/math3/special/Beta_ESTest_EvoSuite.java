/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:33:36 GMT 2020
 */

package org.apache.commons.math3.special;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.special.Beta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class Beta_ESTest_EvoSuite extends Beta_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Beta.regularizedBeta(2.712977886199951, 2.712977886199951, 2.712977886199951, 1);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta((double) 1, 1313.6227487662, (double) 1, 1306);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = Beta.regularizedBeta(Double.NaN, 1.0E-14, 192.97202, 0);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.regularizedBeta(Double.NaN, Double.NaN, (-1.0), (-222.0862));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = Beta.regularizedBeta((-176.73339895827), 192.97202, 1.2637629975129189E-9, (-361.056355611091), 1427);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = Beta.regularizedBeta(1.0, (-2438.1152982223957), (-361.056355611091), (-129.33));
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = Beta.regularizedBeta(Double.NaN, 1501.446977841, Double.NaN, 3676);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = Beta.regularizedBeta(1501.446977841, (double) 3676, 1978.78, 2336.5398, (-1398));
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = Beta.regularizedBeta((-817.569), (double) 1427, 3293.0635);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      double double9 = Beta.regularizedBeta(1.0E-14, (-935.787697712008), Double.NaN, 0);
      assertEquals(double9, double0, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(double9, double2, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double3, 0.01);
      assertEquals(double9, double5, 0.01);
      assertEquals(double9, double8, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = Beta.regularizedBeta((-490.1918), (double) 1, Double.NaN, (-1473.7622294), (-4235));
      assertEquals(double10, double6, 0.01);
      assertEquals(double10, double2, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double7, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(double10, double0, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double4, 0.01);
      assertEquals(double10, double9, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1.0E-14, (-2170.78362623), (-4142.830505743));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.logBeta(Double.NaN, 1.0E-14);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.regularizedBeta((-2377.3), (-2377.3), 1.0E-14, 0.17020416259765625, (-954));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.regularizedBeta(Double.NaN, Double.NaN, 2841.7674502853);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = Beta.logBeta(2.0, 4.923458004084836E41);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = Beta.logBeta((-3960.63), 0.6553317308425903);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = Beta.regularizedBeta((-2493.0), (-2493.0), (double) (-954));
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = Beta.regularizedBeta(252.0, (-4142.830505743), Double.NaN);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = Beta.regularizedBeta(2.558581829071045, 301.883, (-564.1013));
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      double double9 = Beta.logBeta(Double.NaN, 0.5657354593276978);
      assertEquals(double9, double5, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(double9, double3, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double2, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = Beta.regularizedBeta(1381.5005981839, 1050.834, 1381.5005981839, Double.NaN);
      assertEquals(double10, double2, 0.01);
      assertEquals(double10, double6, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double1, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(double10, double7, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double0, 0.01);
      assertEquals(double10, double9, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
      
      double double11 = Beta.regularizedBeta((-482.31212335), (-4142.830505743), 301.883, Double.NaN, Integer.MAX_VALUE);
      assertEquals(double11, double10, 0.01);
      assertEquals(double11, double5, 0.01);
      assertEquals(double11, double7, 0.01);
      assertEquals(double11, double3, 0.01);
      assertEquals(double11, double9, 0.01);
      assertEquals(double11, double2, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(double11, double0, 0.01);
      assertEquals(double11, double6, 0.01);
      assertEquals(double11, double8, 0.01);
      assertEquals(double11, double1, 0.01);
      assertEquals(Double.NaN, double11, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = Beta.logBeta((-2620.266), (-2620.266));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(Double.NaN, (-2620.266), (-2620.266), 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.regularizedBeta((-2620.266), (-2620.266), Double.NaN, Double.NaN, (-1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.regularizedBeta((-2620.266), (double) 0, Double.NaN, 0);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = Beta.regularizedBeta(Double.NaN, Double.NaN, (-4239.36458));
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = Beta.regularizedBeta(Double.NaN, 0.0, Double.NaN);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = Beta.regularizedBeta((-2620.266), (double) 0, (-3098.0815171596814));
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = Beta.logBeta((-3098.0815171596814), Double.NaN);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = Beta.regularizedBeta(0.0, Double.NaN, Double.NaN, Double.NaN);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      double double9 = Beta.logBeta(3.4284156709489884E181, 2.0, 0.0, 0);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(0.0, double9, 0.01);
      
      double double10 = Beta.regularizedBeta(Double.NaN, Double.NaN, 0.0, (-2233));
      assertEquals(double10, double4, 0.01);
      assertEquals(double10, double0, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(double10, double8, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(double10, double6, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double1, 0.01);
      assertEquals(double10, double7, 0.01);
      assertEquals(double10, double2, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
      
      double double11 = Beta.regularizedBeta(Double.NaN, Double.NaN, 3.4284156709489884E181, 1059.3710618175);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(double11, double7, 0.01);
      assertEquals(double11, double5, 0.01);
      assertEquals(double11, double1, 0.01);
      assertEquals(double11, double0, 0.01);
      assertEquals(double11, double3, 0.01);
      assertEquals(double11, double8, 0.01);
      assertEquals(double11, double6, 0.01);
      assertEquals(double11, double10, 0.01);
      assertEquals(double11, double2, 0.01);
      assertEquals(double11, double4, 0.01);
      assertEquals(Double.NaN, double11, 0.01);
      
      double double12 = Beta.regularizedBeta(0.0, 31.5184839, Double.NaN);
      assertEquals(double12, double7, 0.01);
      assertEquals(double12, double11, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertEquals(double12, double3, 0.01);
      assertEquals(double12, double4, 0.01);
      assertEquals(double12, double10, 0.01);
      assertEquals(double12, double1, 0.01);
      assertEquals(double12, double5, 0.01);
      assertEquals(double12, double8, 0.01);
      assertEquals(double12, double6, 0.01);
      assertEquals(double12, double2, 0.01);
      assertEquals(double12, double0, 0.01);
      assertEquals(Double.NaN, double12, 0.01);
      
      double double13 = Beta.regularizedBeta(Double.NaN, (-4239.36458), (-2346.755037), Double.NaN, (-2233));
      assertEquals(double13, double6, 0.01);
      assertEquals(double13, double2, 0.01);
      assertEquals(double13, double5, 0.01);
      assertEquals(double13, double8, 0.01);
      assertEquals(double13, double3, 0.01);
      assertEquals(double13, double4, 0.01);
      assertEquals(double13, double1, 0.01);
      assertEquals(double13, double11, 0.01);
      assertEquals(double13, double10, 0.01);
      assertEquals(double13, double7, 0.01);
      assertEquals(double13, double12, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertEquals(double13, double0, 0.01);
      assertEquals(Double.NaN, double13, 0.01);
      
      double double14 = Beta.regularizedBeta(Double.NaN, 0.0, 0.0, Double.NaN);
      assertEquals(double14, double6, 0.01);
      assertEquals(double14, double13, 0.01);
      assertEquals(double14, double10, 0.01);
      assertEquals(double14, double3, 0.01);
      assertEquals(double14, double12, 0.01);
      assertEquals(double14, double1, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertEquals(double14, double8, 0.01);
      assertEquals(double14, double5, 0.01);
      assertEquals(double14, double0, 0.01);
      assertEquals(double14, double2, 0.01);
      assertEquals(double14, double11, 0.01);
      assertEquals(double14, double4, 0.01);
      assertEquals(double14, double7, 0.01);
      assertEquals(Double.NaN, double14, 0.01);
      
      double double15 = Beta.regularizedBeta(14.265552845, 1059.3710618175, Double.NaN, (-1251.126));
      assertEquals(double15, double14, 0.01);
      assertEquals(double15, double6, 0.01);
      assertEquals(double15, double13, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertEquals(double15, double7, 0.01);
      assertEquals(double15, double4, 0.01);
      assertEquals(double15, double0, 0.01);
      assertEquals(double15, double11, 0.01);
      assertEquals(double15, double2, 0.01);
      assertEquals(double15, double10, 0.01);
      assertEquals(double15, double5, 0.01);
      assertEquals(double15, double1, 0.01);
      assertEquals(double15, double8, 0.01);
      assertEquals(double15, double12, 0.01);
      assertEquals(double15, double3, 0.01);
      assertEquals(Double.NaN, double15, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = Beta.regularizedBeta(4608.742869755, 4608.742869755, 4608.742869755);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(Double.NaN, 0.0, Double.NaN, 4027);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.regularizedBeta(Double.NaN, 4608.742869755, Double.NaN, (double) 4027);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.regularizedBeta(Double.NaN, 1301.0, 0.0, 1063);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = Beta.regularizedBeta(4025.6668921, 1.0, 1301.0, 2988.295, (-782));
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = Beta.regularizedBeta(1.0, 1301.0, (double) 1063);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      double double6 = Beta.regularizedBeta(Double.NaN, Double.NaN, (-587.8885853067242), (double) (-782), 335);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = Beta.logBeta((-232.569765418765), (-2597.48839331582), 1.3119103908538818, (-822));
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = Beta.regularizedBeta(Double.NaN, 4025.6668921, 0.0);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      double double9 = Beta.regularizedBeta(Double.NaN, (-2275.363828885742), 2315.0, 474);
      assertEquals(double9, double3, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double4, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(double9, double8, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = Beta.logBeta(Double.NaN, 1.0);
      assertEquals(double10, double7, 0.01);
      assertEquals(double10, double9, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double1, 0.01);
      assertEquals(double10, double0, 0.01);
      assertEquals(double10, double4, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double6, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
      
      double double11 = Beta.regularizedBeta(0.0, 3160.8315, 2315.0, (double) 474);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertEquals(0.0, double11, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = Beta.regularizedBeta(350.5611259225613, 350.5611259225613, 350.5611259225613, 2440.4615431);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(350.5611259225613, 350.5611259225613, 78.2);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.regularizedBeta(Double.NaN, 0.0, 0.0, 0.0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.regularizedBeta(1.5538093219698803E-8, 1.0E-14, 5217.0159, 7.542967150507818E-8, 3474);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.9999999999968532, double3, 0.01);
      
      double double4 = Beta.regularizedBeta(Double.NaN, (double) 3474, (-450.74047936275), 3474);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = Beta.logBeta((-450.74047936275), Double.NaN);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = Beta.regularizedBeta((double) 3474, 0.0, (-1700.0));
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.0, 1630.2967, 128.01204976837215);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(1630.2967, 0.0, 0.0, 949.1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.regularizedBeta(Double.NaN, (-1636.865999040952), 0.0, 128.01204976837215, 0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = Beta.regularizedBeta(162754.78125, 162754.78125, 162754.78125);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.logBeta((-469.58327567275), (-469.58327567275));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.regularizedBeta(Double.NaN, (-469.58327567275), Double.NaN, 3239);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.regularizedBeta((-1200.0), (-469.58327567275), Double.NaN, (-2369.8774181660287), (-1371));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = Beta.regularizedBeta((-1.0), 1566.0, (-2369.8774181660287), 3239);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = Beta.logBeta(1.0E-14, 1.0E-14);
      assertEquals(32.92933848247659, double0, 0.01);
      
      double double1 = Beta.logBeta(1.0E-14, 1.0E-14, 1.0E-14, 163);
      assertEquals(double1, double0, 0.01);
      assertEquals(32.92933848247659, double1, 0.01);
      
      double double2 = Beta.regularizedBeta((-1.0), 0.0, 1.0E-14);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.logBeta(32.92933848247659, 0.0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = Beta.regularizedBeta(728.3058386862671, 0.0, 0.0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta((-2349.962), 728.3058386862671, 22026.46484375);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.logBeta(2.049863815307617, 22026.46484375, (-2349.962), Integer.MAX_VALUE);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-20.47681171889417), double2, 0.01);
      
      double double3 = Beta.logBeta(0.0, 0.0, (-2349.962), Integer.MAX_VALUE);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = Beta.logBeta(Double.NaN, (-1639.2401511102), 728.3058386862671, Integer.MAX_VALUE);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = Beta.regularizedBeta(2.0, 0.0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.logBeta(918.21273209, 2.0, 0.0, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-13.645946675787854), double1, 0.01);
      
      double double2 = Beta.regularizedBeta(0.0, Double.NaN, 0.0, 715);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = Beta.logBeta(1.95729620992E11, (-4379.0358), 0.0, 943);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(1.0, (-4379.0358), 0.0, (-4379.0358), 943);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = Beta.logBeta(0.0, (-1288.604557592), 0.0, 0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(0.0, Double.NaN, (-1288.604557592), 0.0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1193.7192369171873, 1193.7192369171873, 1193.7192369171873, (-4446.0), 759);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta((-4446.0), 1.0E-14, (double) 759, 1.0E-14);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = Beta.regularizedBeta(3.444406231880653E-285, 3.444406231880653E-285, 3.861525553653117E-227, 3.444406231880653E-285);
      assertEquals(0.9999999999998863, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(2358.292, 523.1, 523.1, 2879);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.logBeta(1713.09139108, 3.444406231880653E-285);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(654.9999999701868, double2, 0.01);
      
      double double3 = Beta.regularizedBeta((-1907.224989015937), (-1907.224989015937), 1.433833360671997, Double.NaN, 876);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = Beta.logBeta(2.0, 0.0, 0.0, (-1218));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.logBeta(2.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.logBeta(1.121383042095528E-83, Double.NaN);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.6553317308425903, 0.6553317308425903, 1.8682458400726318);
      assertEquals(0.9172317628452248, double0, 0.01);
      
      Beta.regularizedBeta(0.9172317628452248, (-396.87), (-396.87));
      double double1 = Beta.regularizedBeta(0.9172317628452248, 1.8682458400726318, 0.0, 2623.242053272113);
      assertEquals(Double.NaN, double1, 0.01);
      
      Beta.regularizedBeta(3.280586734644871E82, 1416.212273, (-1.0), (-529));
      Beta.regularizedBeta((-2048.8), 0.0, (double) (-529), 0.9172317628452248);
      Beta.regularizedBeta(1416.212273, 0.0, 3080.839408713229, (-1228));
      double double2 = Beta.regularizedBeta((-1432.9448804100266), 1.0, Double.NaN, (-1975.5));
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1.0, 1.0, 1.0);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(1.0, 0.0, 1.0);
      Beta.regularizedBeta(0.0, Double.NaN, 0.0);
      double double2 = Beta.regularizedBeta(0.0, 1.0, 1.0, 597);
      assertEquals(0.0, double2, 0.01);
      
      Beta.regularizedBeta(1613.0213156792133, Double.NaN, (-3556.430601308558), 506.87957);
      Beta.regularizedBeta(Double.NaN, 0.0, (-2469.6061716), 0.0);
      double double3 = Beta.logBeta(261.757, Double.NaN, (-941.345239217), 0);
      assertEquals(double3, double1, 0.01);
      
      double double4 = Beta.regularizedBeta(1.2062301635742188, (-2469.6061716), 0.0);
      assertEquals(Double.NaN, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = Beta.regularizedBeta((-1.0), (-1.0), (-1.0), (-1089.2702));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = Beta.logBeta(2292.661594454, 2292.661594454);
      assertEquals((-3180.9070080474303), double0, 0.01);
      
      double double1 = Beta.logBeta(1769.921451229496, (-2600.63063309), (-2600.63063309), 691);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = Beta.logBeta((-901.4324557484922), (-901.4324557484922));
      double double1 = Beta.regularizedBeta(Double.NaN, 1.3317127674213423E-285, Double.NaN, (-592));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.4818955063819885, 0.0, 0.4818955063819885, (-1));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = Beta.logBeta(889.94389964689, (-1241.829460316646));
      double double1 = Beta.regularizedBeta(Double.NaN, Double.NaN, (-1241.829460316646), (-1241.829460316646), 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = Beta.logBeta(3550.19, 270.8);
      assertEquals((-979.5898402510393), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Beta.regularizedBeta(2782.85, 2782.85, 2782.85, 1480);
      Beta.regularizedBeta(2782.85, 2782.85, Double.NaN);
      double double0 = Beta.regularizedBeta(1.0, 2782.85, (-4979.7), 0.0, 0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Beta.logBeta((-1164.89964063381), (-1164.89964063381), 1.950605015323617E-8, 421);
      double double0 = Beta.regularizedBeta(0.0, 0.5762182474136353, (double) 421, (double) 421, 421);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.247836172580719, 0.247836172580719, 0.247836172580719);
      assertEquals(0.39741204922054263, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = Beta.regularizedBeta(2718.0, 2718.0, 4.125337057189083E-84);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.0, (-1956.2574587), 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = Beta.logBeta(0.0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1195.596, 1195.596, 1195.596, (-810));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1373.772349, 0.0, 0.0, 1.0E-14);
      assertEquals(Double.NaN, double0, 0.01);
      
      Beta.regularizedBeta(1373.772349, 78.2, Double.NaN, 1.0E-14);
      Beta.regularizedBeta(0.0, Double.NaN, Double.NaN, 3474);
      double double1 = Beta.regularizedBeta(Double.NaN, (double) 3474, 0.0, 3474);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Beta.regularizedBeta(0.0, (double) (-1562), 0.0, (-1785));
      Beta.logBeta(0.0, Double.NaN, Double.NaN, (-1562));
      double double0 = Beta.regularizedBeta(0.0, 1975.3725799, (-8.83));
      Beta.logBeta(Double.NaN, Double.NaN);
      Beta.regularizedBeta((-8.83), 3.0095696449279785, 0.0, 1.0E-14);
      double double1 = Beta.logBeta(0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      
      Beta.logBeta(Double.NaN, Double.NaN);
      Beta.logBeta(2.2272801399230957, 0.0, Double.NaN, (-1562));
      Beta.regularizedBeta(2.2272801399230957, 0.0, Double.NaN, (-1785));
      double double2 = Beta.regularizedBeta((-874.4611068347), Double.NaN, Double.NaN);
      assertEquals(Double.NaN, double2, 0.01);
  }
}

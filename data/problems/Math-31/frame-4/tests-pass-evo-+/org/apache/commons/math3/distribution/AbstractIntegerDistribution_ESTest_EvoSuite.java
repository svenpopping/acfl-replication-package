/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:28:22 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;

public class AbstractIntegerDistribution_ESTest_EvoSuite extends AbstractIntegerDistribution_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(479, 479);
      assertNotNull(zipfDistribution0);
      assertEquals(479, zipfDistribution0.getNumberOfElements());
      assertEquals(1, zipfDistribution0.getSupportLowerBound());
      assertEquals(479.0, zipfDistribution0.getExponent(), 0.01);
      assertEquals(479, zipfDistribution0.getSupportUpperBound());
      assertTrue(zipfDistribution0.isSupportConnected());
      
      int int0 = zipfDistribution0.solveInverseCumulativeProbability(0.0, 0, 0);
      assertEquals(0, int0);
      assertEquals(479, zipfDistribution0.getNumberOfElements());
      assertEquals(1, zipfDistribution0.getSupportLowerBound());
      assertEquals(479.0, zipfDistribution0.getExponent(), 0.01);
      assertEquals(479, zipfDistribution0.getSupportUpperBound());
      assertTrue(zipfDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(253, 0.0);
      assertNotNull(pascalDistribution0);
      assertEquals(0.0, pascalDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalMean(), 0.01);
      assertTrue(pascalDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, pascalDistribution0.getSupportUpperBound());
      assertEquals(253, pascalDistribution0.getNumberOfSuccesses());
      assertEquals(0, pascalDistribution0.getSupportLowerBound());
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalVariance(), 0.01);
      
      int int0 = pascalDistribution0.solveInverseCumulativeProbability(0.0, 0, 2057);
      assertEquals(1, int0);
      assertEquals(0.0, pascalDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalMean(), 0.01);
      assertTrue(pascalDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, pascalDistribution0.getSupportUpperBound());
      assertEquals(253, pascalDistribution0.getNumberOfSuccesses());
      assertEquals(0, pascalDistribution0.getSupportLowerBound());
      assertEquals(Double.POSITIVE_INFINITY, pascalDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      assertNotNull(binomialDistribution0);
      assertTrue(binomialDistribution0.isSupportConnected());
      assertEquals(0.0, binomialDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0, binomialDistribution0.getNumberOfTrials());
      assertEquals(0.0, binomialDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.0, binomialDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, binomialDistribution0.getSupportUpperBound());
      assertEquals(0, binomialDistribution0.getSupportLowerBound());
      
      int int0 = binomialDistribution0.sample();
      assertEquals(0, int0);
      assertTrue(binomialDistribution0.isSupportConnected());
      assertEquals(0.0, binomialDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0, binomialDistribution0.getNumberOfTrials());
      assertEquals(0.0, binomialDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0.0, binomialDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, binomialDistribution0.getSupportUpperBound());
      assertEquals(0, binomialDistribution0.getSupportLowerBound());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(875, 42, 875);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(42, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(875, hypergeometricDistribution0.getPopulationSize());
      assertEquals(42.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(875, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(42, int0);
      assertEquals(42, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(875, hypergeometricDistribution0.getPopulationSize());
      assertEquals(42.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(875, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, (-808));
      assertNotNull(uniformIntegerDistribution0);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals((-808), uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals(3.8430687936578592E17, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MIN_VALUE, uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(1.07374142E9, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0L);
      assertEquals(Integer.MIN_VALUE, int0);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals((-808), uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals(3.8430687936578592E17, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertEquals(Integer.MIN_VALUE, uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(1.07374142E9, uniformIntegerDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      assertNotNull(binomialDistribution0);
      assertEquals(0.0, binomialDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, binomialDistribution0.getNumberOfTrials());
      assertEquals(0, binomialDistribution0.getSupportUpperBound());
      assertEquals(0, binomialDistribution0.getSupportLowerBound());
      assertTrue(binomialDistribution0.isSupportConnected());
      assertEquals(0.0, binomialDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0.0, binomialDistribution0.getNumericalMean(), 0.01);
      
      double double0 = binomialDistribution0.cumulativeProbability(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, binomialDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, binomialDistribution0.getNumberOfTrials());
      assertEquals(0, binomialDistribution0.getSupportUpperBound());
      assertEquals(0, binomialDistribution0.getSupportLowerBound());
      assertTrue(binomialDistribution0.isSupportConnected());
      assertEquals(0.0, binomialDistribution0.getProbabilityOfSuccess(), 0.01);
      assertEquals(0.0, binomialDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(875, 42, 875);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(875, hypergeometricDistribution0.getPopulationSize());
      assertEquals(42, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(42.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(875, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 42);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(875, hypergeometricDistribution0.getPopulationSize());
      assertEquals(42, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(42.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(875, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1.0E-9, 1.0E-9);
      assertNotNull(poissonDistribution0);
      assertEquals(1.0E-9, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-9, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0E-9, poissonDistribution0.getMean(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
      
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0E-9);
      assertEquals(0, int0);
      assertEquals(1.0E-9, poissonDistribution0.getNumericalMean(), 0.01);
      assertTrue(poissonDistribution0.isSupportConnected());
      assertEquals(1.0E-9, poissonDistribution0.getNumericalVariance(), 0.01);
      assertEquals(0, poissonDistribution0.getSupportLowerBound());
      assertEquals(Integer.MAX_VALUE, poissonDistribution0.getSupportUpperBound());
      assertEquals(1.0E-9, poissonDistribution0.getMean(), 0.01);
      assertEquals(1.0E-12, PoissonDistribution.DEFAULT_EPSILON, 0.01);
      assertEquals(10000000, PoissonDistribution.DEFAULT_MAX_ITERATIONS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 929);
      assertNotNull(uniformIntegerDistribution0);
      assertEquals(72074.91666666667, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(929, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals(464.5, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, uniformIntegerDistribution0.getSupportLowerBound());
      
      int[] intArray0 = uniformIntegerDistribution0.sample(2977);
      assertNotNull(intArray0);
      assertEquals(72074.91666666667, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(929, uniformIntegerDistribution0.getSupportUpperBound());
      assertEquals(464.5, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(2977, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 115);
      assertNotNull(uniformIntegerDistribution0);
      assertEquals(0, uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(115, uniformIntegerDistribution0.getSupportUpperBound());
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(1121.25, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertEquals(57.5, uniformIntegerDistribution0.getNumericalMean(), 0.01);
      
      int int0 = uniformIntegerDistribution0.solveInverseCumulativeProbability((-2805), Integer.MIN_VALUE, (-1));
      assertEquals((-2147483647), int0);
      assertEquals(0, uniformIntegerDistribution0.getSupportLowerBound());
      assertEquals(115, uniformIntegerDistribution0.getSupportUpperBound());
      assertTrue(uniformIntegerDistribution0.isSupportConnected());
      assertEquals(1121.25, uniformIntegerDistribution0.getNumericalVariance(), 0.01);
      assertEquals(57.5, uniformIntegerDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(833.2829, 777);
      int int0 = poissonDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int int0 = binomialDistribution0.inverseCumulativeProbability(0.45592740880818816);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(2387.8, 2);
      int int0 = poissonDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(274, Double.NaN);
      pascalDistribution0.reseedRandomGenerator(274);
      assertEquals(Double.NaN, pascalDistribution0.getProbabilityOfSuccess(), 0.01);
  }
}

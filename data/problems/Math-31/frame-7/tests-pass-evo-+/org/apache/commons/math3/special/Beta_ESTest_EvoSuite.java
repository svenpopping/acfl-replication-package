/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:37:30 GMT 2020
 */

package org.apache.commons.math3.special;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.special.Beta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class Beta_ESTest_EvoSuite extends Beta_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = Beta.regularizedBeta(6.616260705434716E-112, 6.616260705434716E-112, 0.5, 106);
      assertEquals(1.0000000000000568, double0, 0.01);
      
      double double1 = Beta.regularizedBeta((-2133.33989549), (-2133.33989549), 0.9619363583524377, 106);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.regularizedBeta(6.616260705434716E-112, 0.5134268093470267, 2353.2, 2353.2, 106);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(5.021167204476328E-56, double2, 0.01);
      
      double double3 = Beta.regularizedBeta(0.5134268093470267, 0.9619363583524377, 1.0E-14);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(7.631969305752573E-15, double3, 0.01);
      
      double double4 = Beta.regularizedBeta(7.631969305752573E-15, 3279.034, 0.9619363583524377);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = Beta.regularizedBeta(0.0, 3279.034, 4.9056283164780554E-120, 1.0E-14);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = Beta.regularizedBeta((double) 106, 0.47949212736323665, 1.0);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = Beta.regularizedBeta(0.5, 380.595894035414, 901.871586566112, 2137208606);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(1.0, double7, 0.01);
      
      double double8 = Beta.regularizedBeta(380.595894035414, 0.5134268093470267, 1.2991611957550049, (-2533.31366431), 1230);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      double double9 = Beta.regularizedBeta(Double.NaN, 0.47949212736323665, 1.0000000000000568);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = Beta.regularizedBeta(0.0, (-2975.773685), 5.021167204476328E-56, 1230);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(double10, double1, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertEquals(double10, double6, 0.01);
      assertEquals(double10, double8, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double9, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
      
      double double11 = Beta.regularizedBeta(1.3992514610290527, Double.NaN, Double.NaN, 3502.80621835774);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(double11, double6, 0.01);
      assertEquals(double11, double10, 0.01);
      assertEquals(double11, double8, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertEquals(double11, double9, 0.01);
      assertEquals(double11, double1, 0.01);
      assertEquals(Double.NaN, double11, 0.01);
      
      double double12 = Beta.regularizedBeta((-2975.773685), 1.0, (-2133.33989549));
      assertNotEquals(double12, double4, 0.01);
      assertEquals(double12, double10, 0.01);
      assertEquals(double12, double11, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertEquals(double12, double8, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertEquals(double12, double9, 0.01);
      assertEquals(double12, double6, 0.01);
      assertEquals(double12, double1, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertEquals(Double.NaN, double12, 0.01);
      
      double double13 = Beta.regularizedBeta((double) 2137208606, 3502.80621835774, 7.631969305752573E-15, 1230);
      assertNotEquals(double13, double2, 0.01);
      assertEquals(double13, double6, 0.01);
      assertEquals(double13, double9, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertEquals(double13, double8, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertEquals(double13, double12, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertEquals(double13, double1, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertEquals(double13, double11, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertEquals(double13, double10, 0.01);
      assertEquals(Double.NaN, double13, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.17853004388499252, 0.17853004388499252, 1400.192192, Integer.MAX_VALUE);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(518.0, 0.17853004388499252, (-843.400039725051), 518.0, Integer.MAX_VALUE);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.0, 0.24401789903640747, 1242.32, 1242.32, 2);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = Beta.logBeta(1242.32, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.logBeta(Double.NaN, 0.0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.logBeta((-2369.2), (-2369.2), 81.2402328, 2);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = Beta.regularizedBeta((-794.792520221), 0.0, 233.9568145490713);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = Beta.regularizedBeta(0.0, 0.0, 0.0);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = Beta.logBeta(446.6058, 0.0);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = Beta.regularizedBeta(0.0, Double.NaN, (-2369.2));
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = Beta.regularizedBeta(Double.NaN, 0.0, Double.NaN);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      double double9 = Beta.regularizedBeta(92.6607517487941, 0.0, 936.0);
      assertEquals(double9, double2, 0.01);
      assertEquals(double9, double5, 0.01);
      assertEquals(double9, double8, 0.01);
      assertEquals(double9, double4, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = Beta.regularizedBeta(0.0, 6.28287989314225E-92, 5936.5151, 6);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(0.0, double10, 0.01);
      
      double double11 = Beta.logBeta(453.83131, 233.9568145490713, 453.83131, 2);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertEquals((-442.5690852096832), double11, 0.01);
      
      double double12 = Beta.regularizedBeta((-794.792520221), 92.6607517487941, (-3051.424368));
      assertEquals(double12, double9, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertEquals(double12, double3, 0.01);
      assertEquals(double12, double1, 0.01);
      assertEquals(double12, double6, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertEquals(double12, double2, 0.01);
      assertEquals(double12, double4, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertEquals(double12, double7, 0.01);
      assertEquals(double12, double8, 0.01);
      assertEquals(double12, double5, 0.01);
      assertEquals(Double.NaN, double12, 0.01);
      
      double double13 = Beta.regularizedBeta(453.83131, 0.0, 0.0);
      assertEquals(double13, double5, 0.01);
      assertEquals(double13, double8, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertEquals(double13, double4, 0.01);
      assertEquals(double13, double2, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertEquals(double13, double12, 0.01);
      assertEquals(double13, double7, 0.01);
      assertEquals(double13, double3, 0.01);
      assertEquals(double13, double1, 0.01);
      assertEquals(double13, double6, 0.01);
      assertEquals(double13, double9, 0.01);
      assertEquals(Double.NaN, double13, 0.01);
      
      double double14 = Beta.regularizedBeta(1.0E-14, 1.722049095222509E-275, 936.0, 5936.5151, 2);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertEquals(0.9999999999998103, double14, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = Beta.regularizedBeta(5.82825404854514E-8, 5.82825404854514E-8, 5.82825404854514E-8, 3013);
      assertEquals(0.49999951456603325, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(0.0, (double) 3013, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Beta.logBeta(3.35657712457243E-9, 3.35657712457243E-9);
      assertEquals(20.205491275696797, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(20.205491275696797, 1.901376485824585, (-1.1487079818684332E-8), 2177.7533691, (-117));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.regularizedBeta(4266.8455, 0.0, Double.NaN, 0.0);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.regularizedBeta(0.0, 4266.8455, 3.35657712457243E-9);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = Beta.regularizedBeta((-4280.30252), 0.0, 0.0, (-117));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1.0E-14, 1.0E-14, 1.0E-14, 9.994400500679653E270);
      assertEquals(0.4999999999998392, double0, 0.01);
      
      double double1 = Beta.logBeta(0.0, 0.4999999999998392);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.logBeta(4565.3, 0.4999999999998392, (-2576.055550396), 0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-3.6407274307639454), double2, 0.01);
      
      double double3 = Beta.regularizedBeta(0.4999999999998392, 0.0, 4565.3, (double) 0);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = Beta.regularizedBeta(0.4999999999998392, (-2576.055550396), 0.4999999999998392, (-2576.055550396), 0);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = Beta.regularizedBeta(2.0, 1.0E-14, 1674.94080823186);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = Beta.regularizedBeta(Double.NaN, 3624.57, (-2576.055550396), (-838.9882551), 0);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = Beta.regularizedBeta(Double.NaN, Double.NaN, 4565.3, Double.NaN, 1368);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = Beta.logBeta(4170.541405608099, 4170.541405608099, (-2308.4540493901254), 210);
      assertEquals((-5784.500391885835), double0, 0.01);
      
      double double1 = Beta.regularizedBeta((-2308.4540493901254), 2.0, 1.0E-14, 210);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.logBeta(1.892856346657855E140, 2.0, (-1364.3351), 0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = Beta.logBeta(2228.78044, (double) 0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = Beta.logBeta(2817.58355562, 4170.541405608099, 2.0, 210);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-4714.791300929173), double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = Beta.logBeta((-515.5449), 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta((-1098.094003118556), 2251.6247413635488, 2251.6247413635488, 2251.6247413635488);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.logBeta(1.0, Double.NaN, 0.0, 262);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = Beta.logBeta(1.0E-14, 1.0E-14);
      assertEquals(32.92933848247659, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(32.92933848247659, 2.0, 1231.042, 565.2);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = Beta.regularizedBeta((-2840.8311), 215.24684419, 215.24684419, 215.24684419);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.logBeta(2468.069256, (-2840.8311), 1370.8676709131455, (-1927));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.logBeta(2468.069256, 215.24684419);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-751.1706056954354), double2, 0.01);
      
      double double3 = Beta.logBeta((-2840.8311), 994.884027037923, (double) (-1927), 0);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = Beta.logBeta((-1.0), 1.3147747907784344E-8);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta((-3645.487628117924), Double.NaN, 180.6, 180.6, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.regularizedBeta(1.3147747907784344E-8, Double.NaN, (-3645.487628117924), 1.3147747907784344E-8, 0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.regularizedBeta(Double.NaN, 0.0, (-245.105));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = Beta.regularizedBeta(Double.NaN, Double.NaN, Double.NaN, 0.0, (-908));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = Beta.regularizedBeta(2087.0, 2087.0, 0.0, 0.0, 0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.0, (-1560.0), (-2063.01532), 0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta((-2063.01532), 1005.182536496, 0.0, (double) 0, 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = Beta.logBeta(2820.69991937, (-1287.7664643069743), 0.0, 535);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(0.0, 0.0, (-2761.2575));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.logBeta(Double.NaN, 5661.486, 2820.69991937, 535);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.regularizedBeta(Double.NaN, (-1529.613680771081), 0.0, 0);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = Beta.regularizedBeta(0.0, 0.0, Double.NaN);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = Beta.regularizedBeta((-1273.3775), 0.0, 3.7311513682845094E303);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = Beta.logBeta(Double.NaN, Double.NaN, Double.NaN, 909);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = Beta.logBeta((double) 535, 3.7311513682845094E303);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(0.0, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = Beta.logBeta(2.0, 0.0, 1.0, 324);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.5205078726367633, 0.5205078726367633, 0.5205078726367633);
      assertEquals(0.5134268093470267, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(0.5134268093470267, 0.5134268093470267, 0.5134268093470267);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.508706852432151, double1, 0.01);
      
      double double2 = Beta.logBeta((-643.47707079519), (-1667.779374), 0.0, 2037);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Beta.logBeta(Double.NaN, 0.508706852432151);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1143.1900274339505, 1.4296388626098633, (-1.0), 1143.1900274339505);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1.0, 2353.2, 1.0, 1.0);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(1.0, 1.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1.0, 2353.2, 1.0);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(1.0, 1.0, 0.0);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = Beta.regularizedBeta((-2135.84276), (-1043.58543433746), 0.0, 0);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Beta.regularizedBeta(1.4736818914204564E-150, (-2616.613163102807), 1.4736818914204564E-150, (-2616.613163102807));
      Beta.regularizedBeta((-2616.613163102807), 1.4736818914204564E-150, (-2616.613163102807));
      Beta.regularizedBeta((-2129.6857238), 821.34, (-927.46156), (-1818));
      double double0 = Beta.regularizedBeta(0.0, 1921.829279411, (-3260.626923116));
      double double1 = Beta.logBeta(21.0, 1.0E-14, 0.0, (-1818));
      assertEquals(32.236191301916605, double1, 0.01);
      
      Beta.regularizedBeta((-1.0), 821.34, 4662.4920105, (-1818));
      double double2 = Beta.logBeta((double) (-1818), Double.NaN);
      assertEquals(double2, double0, 0.01);
      
      Beta.regularizedBeta((-314.5372699613018), 0.0, Double.NaN, 1.0E-14, (-756));
      Beta.regularizedBeta(0.0, 1094.338477792307, 0.0, 0.0, 550);
      double double3 = Beta.regularizedBeta(0.0, 0.0, 0.0, 4662.4920105, 2600);
      assertEquals(Double.NaN, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Beta.regularizedBeta(0.24401789903640747, 0.0, 1242.32, 0.0);
      Beta.logBeta(1242.32, 0.0);
      Beta.logBeta(Double.NaN, Double.NaN);
      Beta.logBeta((-2369.2), (-2369.2), 81.2402328, 2);
      Beta.regularizedBeta((-794.792520221), 0.0, 233.9568145490713);
      Beta.regularizedBeta(0.0, 0.0, 0.0);
      Beta.logBeta(446.6058, 0.0);
      Beta.regularizedBeta(0.0, Double.NaN, (-2369.2));
      Beta.regularizedBeta(Double.NaN, 81.2402328, Double.NaN);
      Beta.regularizedBeta(92.6607517487941, 0.0, 936.0);
      double double0 = Beta.regularizedBeta(0.0, 6.28287989314225E-92, 5936.5151, 6);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = Beta.logBeta(453.83131, 233.9568145490713, 453.83131, 2);
      assertEquals((-442.5690852096832), double1, 0.01);
      
      double double2 = Beta.regularizedBeta(453.83131, 10.759640104526296, 0.0);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = Beta.logBeta(202.4847106944054, 202.4847106944054, 825.0, (-703));
      assertEquals((-282.09261538570445), double0, 0.01);
      
      double double1 = Beta.regularizedBeta((-1016.151604), (double) (-703), (double) (-703), (-703));
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Beta.regularizedBeta(4.6588861918718874E-15, 4.6588861918718874E-15, 4.6588861918718874E-15);
      double double0 = Beta.regularizedBeta(0.49999999999992445, 0.49999999999992445, 0.49999999999992445, 4.6588861918718874E-15);
      assertEquals(0.4999999999999514, double0, 0.01);
      
      Beta.logBeta((-643.47707079519), (-1667.779374), 0.0, 2037);
      double double1 = Beta.logBeta(Double.NaN, 0.4999999999999514);
      assertEquals(Double.NaN, double1, 0.01);
  }
}

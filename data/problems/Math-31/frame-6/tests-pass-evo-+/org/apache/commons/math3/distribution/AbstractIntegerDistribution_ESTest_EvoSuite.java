/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:29:17 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class AbstractIntegerDistribution_ESTest_EvoSuite extends AbstractIntegerDistribution_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1460, 1460, 1460);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 159, 1263);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(720, 720, 720);
      hypergeometricDistribution0.solveInverseCumulativeProbability(720, 2397, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(240, 0.0331);
      binomialDistribution0.solveInverseCumulativeProbability((-3810.4), 0, 3726);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(9.85967600992008E-305);
      poissonDistribution0.solveInverseCumulativeProbability(9.85967600992008E-305, 591, (-853));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, 4175);
      uniformIntegerDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(720, 720, 720);
      hypergeometricDistribution0.cumulativeProbability((-3721), 2190);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1869, 1694, 0);
      hypergeometricDistribution0.inverseCumulativeProbability(0.9026297667469598);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1446, 1446, 1446);
      int[] intArray0 = hypergeometricDistribution0.sample(1446);
      assertEquals(1446, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, 0);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.0862084340676772);
      assertEquals((-883331476), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 276);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.0331);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(464, 0.0);
      int int0 = binomialDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-2274), 0);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(Integer.MIN_VALUE, (-10));
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.0862084340676772);
      assertEquals((-944568474), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-2274), 0);
      int int0 = uniformIntegerDistribution0.inverseCumulativeProbability(0.0);
      assertEquals((-2274), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(464, 0.0);
      double double0 = binomialDistribution0.cumulativeProbability(0, 464);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(240, 0.0331);
      int int0 = binomialDistribution0.sample();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1460, 1460, 1460);
      hypergeometricDistribution0.reseedRandomGenerator(1460);
      assertEquals(1460, hypergeometricDistribution0.getPopulationSize());
  }
}

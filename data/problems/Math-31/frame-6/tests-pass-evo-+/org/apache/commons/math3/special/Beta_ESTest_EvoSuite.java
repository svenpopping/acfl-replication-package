/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:35:10 GMT 2020
 */

package org.apache.commons.math3.special;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.special.Beta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class Beta_ESTest_EvoSuite extends Beta_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Beta.regularizedBeta(5390.0, 7.932952721989251E-8, 1.49678635597229);
      Beta.regularizedBeta(7.932952721989251E-8, 5390.0, 3527.83, 0.6393370857462117, 249);
      Beta.regularizedBeta(2194.2119737, 1.49678635597229, Double.NaN, 249);
      Beta.logBeta(7.932952721989251E-8, Double.NaN, (-7.25680516883106E-8), 249);
      Beta.regularizedBeta(412.2, Double.NaN, 0.0, 0.6393370857462117, 249);
      Beta.regularizedBeta(0.0, (-606.0), 240.656, 5.298749302736127E206);
      Beta.logBeta(2056.91863, 5390.0);
      Beta.regularizedBeta(3527.83, (-341.8321), (-2042.7328), 0);
      Beta.regularizedBeta(0.0, 2056.91863, (-941.67473));
      Beta.logBeta(0.6393370857462117, (double) 249);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Beta.regularizedBeta(1.0E-14, 1.0E-14, 1.0E-14);
      Beta.regularizedBeta((-1028.1895401), 0.0, 232.0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Beta.regularizedBeta((-407.44), (-407.44), (-407.44));
      Beta.regularizedBeta((-407.44), (-407.44), 3204.0, 0);
      Beta.regularizedBeta(3204.0, (-407.44), 1397.9834481088249, 1.0);
      Beta.logBeta(0.0, 1397.9834481088249, 366.73506, 0);
      Beta.regularizedBeta(7.091600108064668E-8, 7.091600108064668E-8, 1.0, 7.091600108064668E-8, 2);
      Beta.logBeta(Double.NaN, (-407.44), (-407.44), 2);
      Beta.logBeta(Double.NaN, 0.0, (-1489.618034), 0);
      Beta.regularizedBeta(541.1, 0.0, 0.0, Double.NaN, 0);
      Beta.regularizedBeta(0.0, (double) 2, Double.NaN, (-1));
      Beta.regularizedBeta((-926.9566827822757), 4084.69778908422, 1.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Beta.logBeta(2353.93494010208, 2353.93494010208);
      Beta.logBeta(0.535327672958374, (-932.00543485385), Double.NaN, 3127);
      Beta.regularizedBeta(0.0, 3019.0, 1.0, 3127);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Beta.regularizedBeta(1.1099648061301941E-7, 1.0, 1.0, 1.0);
      Beta.regularizedBeta(1.0, 776.0, (-1665.0), 0.0, (-3648));
      Beta.logBeta((-740.30069), 1.0);
      Beta.regularizedBeta(0.0, 1152.0450175819333, (-926.91439955787), (-2026));
      Beta.regularizedBeta(1152.0450175819333, 0.0, 1.0, Double.NaN, 0);
      Beta.regularizedBeta(1.109964806130193E-7, (-740.30069), Double.NaN, (-317.853212));
      Beta.logBeta((-1808.808529325), (-1665.0), 925.83, (-2026));
      Beta.regularizedBeta((-4.9E-324), 0.0, 0.0, (-1071));
      Beta.logBeta(0.0, 1.1099648061301941E-7);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Beta.regularizedBeta(1.0, 1714.4323123, 1714.4323123, 1250);
      Beta.regularizedBeta(1.1373425785132867E221, 1.0, 1.0);
      Beta.logBeta(5.482208065983983E-194, Double.NaN);
      Beta.logBeta(1714.4323123, (-3362.301231511526), 4083.715, 1250);
      Beta.logBeta(5.482208065983983E-194, 1.0, 1.0, 0);
      Beta.regularizedBeta((-8.054981263802322E-8), 1.1373425785132867E221, Double.NaN, 1250);
      Beta.logBeta(Double.NaN, 445.00000008929123, 2.0, 1250);
      Beta.logBeta((-2692.878), 1427.3);
      Beta.regularizedBeta((-3362.301231511526), (-2692.878), (-3344.446674574234));
      Beta.regularizedBeta(3.9776772027043775E-302, 0.0, 2.0, 1.0, 0);
      Beta.logBeta(0.0, 0.0, (-4098.3128), 1250);
      Beta.regularizedBeta(3800.5118, (-3344.446674574234), 3800.5118, 4083.715, 0);
      Beta.regularizedBeta((-1.7846700158234043E30), (-2692.878), Double.NaN, 1.1373425785132867E221);
      Beta.logBeta(0.0, 696.97, (-3127.727), 0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Beta.logBeta(2519.7011, 0.0);
      Beta.logBeta(0.0, 2519.7011);
      Beta.regularizedBeta(0.0, Double.NaN, (-1567.375591672969), (-2438.65899275), 0);
      Beta.regularizedBeta(0.0, (-7.461209161105275E-9), Double.NaN, (-2438.65899275));
      Beta.regularizedBeta(9.85967600992008E-305, 5.32346341339996E-260, 5.13345647019085E-10, 1.918355503889933E-7);
      Beta.regularizedBeta((-1330.078979), 199.61871326, 5.32346341339996E-260, 0);
      Beta.logBeta(0.0, (-1567.375591672969), 9.85967600992008E-305, 234);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Beta.regularizedBeta(0.0, 1.0E-14, 1322.308993);
      Beta.regularizedBeta(0.0, 0.0, 1322.308993, 0.0, (-1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Beta.regularizedBeta(1.0, 1.0, 0.0, (-1239.4802), 0);
      Beta.regularizedBeta(0.0, Double.NaN, Double.NaN, 0.0, 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Beta.regularizedBeta(Double.NaN, Double.NaN, Double.NaN);
      Beta.logBeta(Double.NaN, Double.NaN, (-187.0), 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Beta.logBeta((-1863.0), 0.0, (-1863.0), (-1560));
      Beta.regularizedBeta((-2579.82742549), (double) (-1560), 2059.8014615511247);
      Beta.regularizedBeta(0.0, (-1714.27944), 0.0, (-2368));
      Beta.regularizedBeta(4.111645931319645E-8, (-1863.0), 0.0);
      Beta.logBeta(Double.NaN, (-1870.5836125659657));
      Beta.regularizedBeta(1296.6352257871, Double.NaN, Double.NaN);
      Beta.regularizedBeta(Double.NaN, Double.NaN, 0.0, 2.0, (-1560));
      Beta.logBeta(0.008336750013465571, Double.NaN);
      Beta.regularizedBeta(2891.537, 248.4, 1.8976664543151855, (-1863.0), (-2368));
      Beta.regularizedBeta(Double.NaN, (-1863.0), 0.0, (-1560));
      Beta.logBeta(3120.547184138, 6.539175932653188E202, 406.85691242957, 710);
      Beta.regularizedBeta(1903.720449464733, Double.NaN, 0.3930181860923767, 1.418513298034668, (-1560));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Beta.regularizedBeta((-264.8734249173), 476.26907, Double.NaN, Double.NaN, (-1867));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Beta.logBeta(0.0, 1.0);
      Beta.regularizedBeta(0.0, 6608.8, (-235.0), (-952.23919056897));
      Beta.regularizedBeta(3156.7425, 0.0, 6608.8);
      Beta.logBeta(0.6598852872848511, 0.6598852872848511, 0.0, 1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Beta.regularizedBeta((-18.249826622), 1.0E-14, (-18.249826622), (-18.249826622), (-1955));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Beta.regularizedBeta(1.4199501303738373E-65, 1.4199501303738373E-65, 0.0);
      Beta.regularizedBeta(2.0, 2.0, 1464.76587751995, 3165.7413846294135);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Beta.logBeta(0.0, 0.0);
      Beta.logBeta(2890.1010182968, Double.NaN, 0.0, 3893);
      Beta.logBeta((double) 3893, (double) 3893, 0.0, 3893);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Beta.regularizedBeta(0.0, (-1064.0), (-1064.0), (-1378.734967808195), (-1075));
      Beta.regularizedBeta(0.0, Double.NaN, Double.NaN, Double.NaN, (-1075));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1.0E-14, (double) 0, 1.0E-14, 970);
      assertEquals(Double.NaN, double0, 0.01);
      
      Beta.regularizedBeta((-2300.0), Double.NaN, Double.NaN);
      double double1 = Beta.logBeta((-1598.323), (double) 970);
      Beta.regularizedBeta((-564.383875125931), 3745.03676255, 3.7944631664558904E-85, 0);
      Beta.regularizedBeta(Double.NaN, (-5.26498707801063E-8), Double.NaN, 3325.8995, (-3223));
      double double2 = Beta.regularizedBeta((double) 0, (-1.0), 5362.43);
      assertEquals(double2, double1, 0.01);
      
      double double3 = Beta.regularizedBeta((-1598.323), 825.900566, 4225.39892682, 9.97728609663656E32, 1948);
      assertEquals(Double.NaN, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Beta.regularizedBeta(0.0, 0.0, 0.0, (-378));
      Beta.logBeta(Double.NaN, Double.NaN);
      Beta.regularizedBeta(2048.299763, (-888.1), 1.0E-14);
      Beta.logBeta(1289.92779935, 0.0, Double.NaN, 376);
      double double0 = Beta.logBeta(1.0, 1.1805915832519531);
      assertEquals((-0.16601565458673528), double0, 0.01);
      
      double double1 = Beta.regularizedBeta((double) (-378), 905.073446122, Double.NaN, 0.0);
      Beta.logBeta(1289.92779935, 0.0, (-888.1), 376);
      Beta.regularizedBeta((double) 376, 2.417689800262451, 0.6260011196136475, 0.0);
      Beta.logBeta(2.9391280956327795E-301, (double) (-378), 1.1373305111387886, 795);
      double double2 = Beta.logBeta(Double.NaN, (-2512.22560170228));
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = Beta.regularizedBeta(1.0, 1714.4323123, 1714.4323123, 1250);
      assertEquals(1.0, double0, 0.01);
      
      Beta.regularizedBeta(1.1373425785132867E221, 1.0, 1.0);
      double double1 = Beta.logBeta(5.482208065983983E-194, Double.NaN);
      Beta.logBeta(1714.4323123, (-3362.301231511526), 4083.715, 1250);
      double double2 = Beta.logBeta(5.482208065983983E-194, 1.0, 1.0, 0);
      assertEquals(445.00000008929123, double2, 0.01);
      
      Beta.regularizedBeta((-8.054981263802322E-8), 1.1373425785132867E221, Double.NaN, 1250);
      Beta.logBeta(Double.NaN, 445.00000008929123, 2.0, 1250);
      Beta.logBeta((-2692.878), 1427.3);
      Beta.regularizedBeta((-3362.301231511526), (-2692.878), (-1.0));
      Beta.regularizedBeta(3.9776772027043775E-302, 0.0, 2.0, 1.0, 0);
      Beta.logBeta(0.0, 0.0, (-4098.3128), 1250);
      double double3 = Beta.regularizedBeta(3800.5118, (-1.0), 3800.5118, 4083.715, 0);
      assertEquals(double3, double1, 0.01);
      
      double double4 = Beta.regularizedBeta(Double.NaN, (-2692.878), Double.NaN, 1.1373425785132867E221);
      assertNotEquals(double4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = Beta.logBeta((-435.768053), 2.0, (-435.768053), (-757));
      assertEquals(Double.NaN, double0, 0.01);
      
      Beta.regularizedBeta((-435.768053), 0.0, 0.0, (-757));
      Beta.regularizedBeta((double) (-757), 0.41647201776504517, (-435.768053), 2.0);
      Beta.regularizedBeta(5.1500902632092514E-8, (-435.768053), 0.0, 0.0, 1218);
      double double1 = Beta.regularizedBeta(4.71524479659295E-8, 1118.796, 2.0, 4.71524479659295E-8);
      assertEquals(0.0, double1, 0.01);
      
      Beta.regularizedBeta(746.082025, 6.610611940107793E-8, 2971.325511639769, (-1656.557142041));
      double double2 = Beta.logBeta(2345.25, 0.24859806895256042);
      assertEquals((-0.6351517212588078), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = Beta.regularizedBeta(0.0, 0.0, 0.0, (-1378.734967808195), (-1075));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = Beta.regularizedBeta(0.0, (double) (-1075), Double.NaN, Double.NaN, (-1075));
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = Beta.logBeta((-2136.44), (-3036.4983));
      Beta.logBeta(1.0450615121235744E99, (-3535.47446));
      Beta.regularizedBeta((-2250.1342), 0.0, 5.814040618670345E-62, 569);
      Beta.regularizedBeta((-5818.833271116), 0.0, 0.0, (-75));
      Beta.regularizedBeta(0.0, 442.34115374165, (-2250.1342), 1.0450615121235744E99, 569);
      Beta.regularizedBeta((double) 569, (-3535.47446), (-3036.4983));
      Beta.regularizedBeta(0.0, 0.0, (-1831.8219732276568), (-75));
      double double1 = Beta.logBeta(153.55612104, 1.0);
      assertEquals((-5.034066109589617), double1, 0.01);
      
      Beta.logBeta(864.8921471271, (-2250.1342));
      double double2 = Beta.regularizedBeta((-1704.36), 1.0450615121235744E99, 393.386090255);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:27:54 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.BinomialDistribution;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.distribution.PascalDistribution;
import org.apache.commons.math3.distribution.PoissonDistribution;
import org.apache.commons.math3.distribution.UniformIntegerDistribution;
import org.apache.commons.math3.distribution.ZipfDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

public class AbstractIntegerDistribution_ESTest_EvoSuite extends AbstractIntegerDistribution_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 668);
      uniformIntegerDistribution0.cumulativeProbability(0, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistribution poissonDistribution0 = new PoissonDistribution(1333.72, 0);
      poissonDistribution0.solveInverseCumulativeProbability((-204.10917892421), 0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(0, 909);
      uniformIntegerDistribution0.solveInverseCumulativeProbability((-2145L), 909, 2151);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-684), (-266));
      uniformIntegerDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution((-684), (-266));
      uniformIntegerDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(79, 79, 79);
      hypergeometricDistribution0.cumulativeProbability((-1416), 1677);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UniformIntegerDistribution uniformIntegerDistribution0 = new UniformIntegerDistribution(11, 56);
      uniformIntegerDistribution0.inverseCumulativeProbability(0.3346569538116455);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 0, 2);
      hypergeometricDistribution0.inverseCumulativeProbability(0.3333333333333333);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2743, 0.0);
      pascalDistribution0.inverseCumulativeProbability(4.523982262003404E-81);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(0, 0);
      int int0 = binomialDistribution0.solveInverseCumulativeProbability(0, (-1727483681), 0);
      assertEquals((-1727483680), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(457, 1.8122539547625083E-230);
      int int0 = binomialDistribution0.sample();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1, 1);
      int[] intArray0 = zipfDistribution0.sample(1);
      assertArrayEquals(new int[] {1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinomialDistribution binomialDistribution0 = new BinomialDistribution(2, Double.NaN);
      int int0 = binomialDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZipfDistribution zipfDistribution0 = new ZipfDistribution(1, 1);
      int int0 = zipfDistribution0.inverseCumulativeProbability(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2743, 0.0);
      int int0 = pascalDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2743, 0.0);
      int int0 = pascalDistribution0.sample();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PascalDistribution pascalDistribution0 = new PascalDistribution(2743, 0.0);
      pascalDistribution0.reseedRandomGenerator(2743);
      assertEquals(0.0, pascalDistribution0.getProbabilityOfSuccess(), 0.01);
  }
}

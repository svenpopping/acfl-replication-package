/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:50:19 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.FixedDateTimeZone;

public class Days_ESTest_EvoSuite extends Days_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.FIVE;
      Days days1 = Days.days(9);
      boolean boolean0 = days1.isLessThan(days0);
      assertFalse(boolean0);
      assertEquals(9, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      LocalTime localTime0 = LocalTime.fromMillisOfDay(4600L);
      Days days1 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      boolean boolean0 = days0.isGreaterThan(days1);
      assertFalse(boolean0);
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      boolean boolean0 = days0.isGreaterThan((Days) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Days days0 = weeks0.toStandardDays();
      Weeks weeks1 = days0.toStandardWeeks();
      assertEquals(14, days0.getDays());
      assertEquals(2, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Days days1 = days0.plus(Integer.MIN_VALUE);
      Weeks weeks0 = days1.toStandardWeeks();
      assertEquals((-306783377), weeks0.getWeeks());
      assertEquals((-2147483641), days1.getDays());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.FIVE;
      Seconds seconds0 = days0.SEVEN.toStandardSeconds();
      assertEquals(604800, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.days(22);
      Days days1 = days0.ONE.negated();
      Seconds seconds0 = days1.toStandardSeconds();
      assertEquals((-86400), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Days days0 = Days.FIVE;
      Minutes minutes0 = days0.toStandardMinutes();
      assertEquals(7200, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Days days0 = Days.TWO;
      Hours hours0 = days0.ZERO.toStandardHours();
      assertEquals(1, hours0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.FOUR;
      Hours hours0 = days0.toStandardHours();
      assertEquals(96, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Days days1 = days0.negated();
      Hours hours0 = days1.toStandardHours();
      assertEquals((-168), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.TWO;
      Days days1 = days0.ZERO.minus(1440);
      Days days2 = Days.standardDaysIn(days1);
      assertEquals((-1440), days2.getDays());
      assertTrue(days2.equals((Object)days1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Days days0 = Days.TWO;
      Days days1 = days0.ZERO.minus(1440);
      Days days2 = days0.plus(days1);
      assertEquals((-1438), days2.getDays());
      assertEquals((-1440), days1.getDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.parseDays("P-2147483648D");
      assertEquals(Integer.MIN_VALUE, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Duration duration0 = new Duration(dateMidnight0, dateMidnight0);
      Days days0 = duration0.toStandardDays();
      days0.negated();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Days days0 = Days.FOUR;
      Days days1 = days0.multipliedBy(76);
      assertEquals(304, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Days days0 = Days.TWO;
      Days days1 = days0.ONE.multipliedBy((-318));
      assertEquals((-318), days1.getDays());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Days days0 = Days.days(2662);
      Days days1 = days0.minus(2662);
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      Days days1 = days0.MIN_VALUE.minus(0);
      assertEquals(Integer.MIN_VALUE, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Instant instant0 = Instant.now();
      Interval interval0 = duration0.toIntervalFrom(instant0);
      Days days0 = Days.daysIn(interval0);
      int int0 = days0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Period period0 = Period.millis(1384);
      Period period1 = period0.withDays((-2791));
      Minutes minutes0 = period1.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      int int0 = days0.getDays();
      assertEquals((-2791), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Days days0 = Days.ONE;
      Days days1 = days0.dividedBy(1);
      assertEquals(1, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Days days1 = days0.MIN_VALUE.dividedBy(1440);
      assertEquals((-1491308), days1.getDays());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) ethiopicChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(1);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime1, (ReadablePartial) localDateTime0);
      assertEquals(730500, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(2860L, (Chronology) gJChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(1);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime1);
      assertEquals((-7), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Days days0 = Days.TWO;
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withPeriodAdded(days0, 59);
      Days days1 = Days.daysBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime1);
      assertEquals(118, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.plusYears(198);
      Days days0 = Days.daysBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      assertEquals((-72317), days0.getDays());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = days0.plus(0);
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Days days0 = Days.days(3);
      assertEquals(3, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.days(6);
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Days days0 = Days.days(0);
      boolean boolean0 = days0.isLessThan((Days) null);
      assertFalse(boolean0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Days days0 = Days.days(2);
      assertEquals(2, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Days days0 = Days.days(7);
      assertEquals(7, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Days days0 = Days.days(4);
      assertEquals(4, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Days days0 = Days.days(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Days days0 = Days.days(5);
      assertEquals(5, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Days days0 = Days.THREE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertEquals("days", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Days days0 = Days.FOUR;
      Days days1 = days0.ZERO.minus((-114));
      assertEquals(114, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Days days0 = Days.FOUR;
      Days days1 = Days.SEVEN;
      boolean boolean0 = days0.isLessThan(days1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Days days0 = Days.days((-1632));
      boolean boolean0 = days0.isLessThan((Days) null);
      assertEquals((-1632), days0.getDays());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Days days0 = Days.days(1843);
      boolean boolean0 = days0.isLessThan((Days) null);
      assertFalse(boolean0);
      assertEquals(1843, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Days days0 = Days.TWO;
      boolean boolean0 = days0.isLessThan(days0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Days days1 = days0.minus(days0);
      boolean boolean0 = days0.isGreaterThan(days1);
      assertEquals(0, days1.getDays());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Days days0 = Days.days(1059);
      boolean boolean0 = days0.isGreaterThan((Days) null);
      assertTrue(boolean0);
      assertEquals(1059, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1609);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      boolean boolean0 = days0.isGreaterThan((Days) null);
      assertEquals(0, days0.getDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Days days0 = Days.SEVEN;
      boolean boolean0 = days0.isGreaterThan(days0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 0L, (PeriodType) null);
      Days days0 = Days.standardDaysIn(mutablePeriod0);
      Days days1 = days0.dividedBy(1);
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Days days0 = Days.days(1843);
      Days days1 = days0.minus((Days) null);
      assertEquals(1843, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Period period0 = Period.millis(1384);
      Minutes minutes0 = period0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      days0.SEVEN.plus((Days) null);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(2860L, (Chronology) gJChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Days days0 = weeks0.toStandardDays();
      Days days1 = days0.plus(days0);
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Days days0 = Days.parseDays((String) null);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Days days0 = Days.daysIn((ReadableInterval) null);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Days days0 = Days.daysBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Days days0 = Days.parseDays("P2147483647D");
      assertEquals(Integer.MAX_VALUE, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Days days0 = hours0.toStandardDays();
      Days days1 = days0.SIX.negated();
      Days days2 = days1.negated();
      assertEquals(6, days2.getDays());
      assertEquals(0, days0.getDays());
      assertEquals((-6), days1.getDays());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(2860L, (Chronology) gJChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Days days0 = weeks0.toStandardDays();
      Days days1 = days0.TWO.plus(1);
      assertEquals(0, days0.getDays());
      assertEquals(3, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Days days0 = Days.TWO;
      Duration duration0 = days0.toStandardDuration();
      Days days1 = duration0.toStandardDays();
      assertEquals(172800000L, duration0.getMillis());
      assertSame(days1, days0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 730500, dateTimeZone0);
      Duration duration0 = Duration.standardMinutes(2860L);
      Interval interval0 = new Interval(mutableDateTime0, duration0);
      Days days0 = Days.daysIn(interval0);
      assertEquals(1, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Days days1 = days0.plus(Integer.MIN_VALUE);
      Days days2 = days1.minus(days0);
      assertEquals(Integer.MIN_VALUE, days2.getDays());
      assertEquals((-2147483641), days1.getDays());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Days days0 = Days.TWO;
      int int0 = days0.getDays();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Days days0 = hours0.toStandardDays();
      Duration duration0 = days0.toStandardDuration();
      assertEquals(0L, duration0.getStandardHours());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(2860L, (Chronology) gJChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Days days0 = weeks0.toStandardDays();
      Weeks weeks1 = days0.toStandardWeeks();
      assertEquals(0, days0.getDays());
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Days days0 = hours0.toStandardDays();
      Days days1 = days0.multipliedBy(0);
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Days days0 = Days.FOUR;
      Days days1 = days0.negated();
      Minutes minutes0 = days1.toStandardMinutes();
      assertEquals((-5760), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Days days0 = hours0.toStandardDays();
      days0.toStandardSeconds();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Days days0 = Days.FOUR;
      Days days1 = Days.standardDaysIn(days0);
      assertSame(days1, days0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(2860L, (Chronology) gJChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Days days0 = weeks0.toStandardDays();
      days0.FOUR.getPeriodType();
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      Days days0 = Days.daysBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Minutes minutes0 = days0.ZERO.toStandardMinutes();
      assertEquals(1, minutes0.size());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Days days0 = Days.FIVE;
      String string0 = days0.toString();
      assertEquals("P5D", string0);
  }
}

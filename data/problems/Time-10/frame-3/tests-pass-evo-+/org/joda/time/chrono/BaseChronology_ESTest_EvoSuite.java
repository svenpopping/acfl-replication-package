/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:53:32 GMT 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;

public class BaseChronology_ESTest_EvoSuite extends BaseChronology_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1885).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = LocalTime.parse("", dateTimeFormatter0);
      Seconds seconds0 = Seconds.MIN_VALUE;
      LocalTime localTime1 = localTime0.plus(seconds0);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Months months0 = Months.SIX;
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) months0, (long) 1, 2551440384L);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 1, islamicChronology0);
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(29L, dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(zonedChronology0);
      DateTime dateTime0 = new DateTime(3, 5, 0, (-1), 5, 410, lenientChronology0);
      assertEquals((-62062418890000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      DurationField durationField0 = zonedChronology0.years();
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = copticChronology0.yearOfEra();
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeField dateTimeField0 = gregorianChronology0.yearOfCentury();
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      DateTimeField dateTimeField0 = islamicChronology0.year();
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      Chronology chronology0 = islamicChronology0.withZone(dateTimeZone0);
      assertSame(islamicChronology0, chronology0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Chronology chronology0 = gJChronology0.withUTC();
      assertSame(chronology0, gJChronology0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DurationField durationField0 = gregorianChronology0.weekyears();
      assertEquals("weekyears", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      DateTimeField dateTimeField0 = islamicChronology0.weekyearOfCentury();
      assertEquals(1, dateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = copticChronology0.weekyear();
      assertEquals("weekyear", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DurationField durationField0 = gJChronology0.weeks();
      assertTrue(durationField0.isPrecise());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = gJChronology0.weekOfWeekyear();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      String string0 = iSOChronology0.toString();
      assertEquals("ISOChronology[UTC]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalTime localTime0 = new LocalTime(0L, dateTimeZone0);
      long long0 = iSOChronology0.set(localTime0, (-1L));
      assertEquals((-86400000L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(zonedChronology0);
      DurationField durationField0 = strictChronology0.seconds();
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTimeField dateTimeField0 = islamicChronology0.secondOfMinute();
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = islamicChronology0.secondOfDay();
      assertEquals("secondOfDay", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = iSOChronology0.months();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeField dateTimeField0 = islamicChronology0.monthOfYear();
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DurationField durationField0 = gJChronology0.minutes();
      assertEquals("minutes", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeField dateTimeField0 = ethiopicChronology0.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = ethiopicChronology0.minuteOfDay();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      DateTimeField dateTimeField0 = gJChronology0.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = ethiopicChronology0.millisOfDay();
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DurationField durationField0 = gregorianChronology0.millis();
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DurationField durationField0 = ethiopicChronology0.hours();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType((-1743), (-1743));
      IslamicChronology islamicChronology0 = new IslamicChronology(lenientChronology0, (Object) null, islamicChronology_LeapYearPatternType0);
      DateTimeField dateTimeField0 = islamicChronology0.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeField dateTimeField0 = gregorianChronology0.hourOfDay();
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = ethiopicChronology0.halfdays();
      assertEquals("halfdays", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = copticChronology0.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      long long0 = copticChronology0.getDateTimeMillis((-4530L), 0, 0, 0, 0);
      assertEquals((-86400000L), long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      long long0 = islamicChronology0.getDateTimeMillis(5558, 1, 1, 3484);
      assertEquals(127618588803484L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      long long0 = iSOChronology0.getDateTimeMillis(1, 1, 1, 0);
      assertEquals((-62135596800000L), long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DurationField durationField0 = julianChronology0.eras();
      assertFalse(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = ethiopicChronology0.era();
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DurationField durationField0 = copticChronology0.days();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeField dateTimeField0 = iSOChronology0.dayOfYear();
      assertEquals("dayOfYear", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      DateTimeField dateTimeField0 = chronology0.dayOfWeek();
      assertFalse(dateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = iSOChronology0.clockhourOfHalfday();
      assertEquals(1, dateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = ethiopicChronology0.clockhourOfDay();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DurationField durationField0 = julianChronology0.centuries();
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Minutes minutes0 = Minutes.ONE;
      Days days0 = minutes0.toStandardDays();
      long long0 = gJChronology0.add((ReadablePeriod) days0, (long) 0, (-241));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      long long0 = buddhistChronology0.add(0L, (-428L), 1291);
      assertEquals((-552548L), long0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Period period0 = Period.hours(1);
      long long0 = buddhistChronology0.add((ReadablePeriod) period0, 1267L, 32);
      assertEquals(115201267L, long0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1605));
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      Duration duration0 = new Duration(dateMidnight0, dateMidnight0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateMidnight0, duration0, periodType0);
      long long0 = buddhistChronology0.add((ReadablePeriod) mutablePeriod0, (long) (-1605), (-1297));
      assertEquals((-1605L), long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Duration duration0 = Duration.standardHours(100000000L);
      Days days0 = Days.days(0);
      PeriodType periodType0 = days0.getPeriodType();
      Period period0 = duration0.toPeriod(periodType0);
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) period0, 1333L, 1283L);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Period period0 = new Period(1, 1, 1, 60000, 0, 1123, 0, 60000);
      int[] intArray0 = copticChronology0.get((ReadablePeriod) period0, 0L, 0L);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      Partial partial0 = new Partial(dateTimeFieldType0, 1, lenientChronology0);
      int[] intArray0 = new int[1];
      intArray0[0] = 91;
      lenientChronology0.validate(partial0, intArray0);
      assertArrayEquals(new int[] {91}, intArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      long long0 = buddhistChronology0.add(1040L, 2402L, 0);
      assertEquals(1040L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      long long0 = islamicChronology0.add(415L, 415L, (-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      long long0 = iSOChronology0.add(0L, 0L, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      long long0 = islamicChronology0.add((ReadablePeriod) null, 1L, 274);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, ethiopicChronology0, islamicChronology_LeapYearPatternType0);
      Minutes minutes0 = Minutes.MIN_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0, (PeriodType) null);
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) mutablePeriod0, (-119916374400000L));
      assertArrayEquals(new int[] {0, 0, (-198274), (-3), 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, periodType0, islamicChronology0);
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) mutablePeriod0, 0L);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      long long0 = islamicChronology0.set(localDateTime0, (-1));
      assertEquals(19114777281320L, long0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      int[] intArray0 = chronology0.get((ReadablePartial) localDateTime0, (-1965L));
      assertArrayEquals(new int[] {1969, 12, 31, 86398035}, intArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      long long0 = lenientChronology0.getDateTimeMillis(3121, 5, 1, 1328);
      assertEquals(53014521601328L, long0);
  }
}

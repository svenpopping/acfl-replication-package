/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:55:28 GMT 2020
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.MonthDay;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.field.FieldUtils;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.tz.FixedDateTimeZone;

public class FieldUtils_ESTest_EvoSuite extends FieldUtils_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(Integer.MIN_VALUE, (-735), 365);
      assertEquals(337, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldUtils.verifyValueBounds("@`],qW#<l+", 0, 0, 589);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldUtils.verifyValueBounds("K*3(Lk{W&p", 4, (-488), 4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FieldUtils.verifyValueBounds((DateTimeFieldType) null, 290, 18, 290);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = FieldUtils.safeToInt(2147483647L);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply(Integer.MIN_VALUE, 1);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = FieldUtils.safeAdd(1730, 607);
      assertEquals(2337, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = FieldUtils.safeToInt(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract(21600000L, 36266400000L);
      assertEquals((-36244800000L), long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = FieldUtils.safeNegate(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = FieldUtils.safeNegate((-2146400700));
      assertEquals(2146400700, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt(2, 2);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt(2758L, (-2698));
      assertEquals((-7441084), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 1, 2564L);
      assertEquals(2564L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = FieldUtils.safeAdd(0, (-735));
      assertEquals((-735), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, 0, 0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, 0, Integer.MIN_VALUE, 0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(1389, (-2554), (-2554), 1389);
      assertEquals((-1165), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(197136, 0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(2147483543, (-2147483543), Integer.MAX_VALUE);
      assertEquals((-2147483543), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      FieldUtils.verifyValueBounds(dateTimeFieldType0, 0, 0, 99);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(copticChronology0);
      FieldUtils.verifyValueBounds(dateTimeField0, 1, 0, 1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = FieldUtils.safeToInt(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(0L, (-872L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((-2379L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract((-2147483631L), (-2147483631L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      boolean boolean0 = FieldUtils.equals(object0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals((Object) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals(object0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField0, 0);
      MonthDay monthDay0 = new MonthDay((-2528L));
      int[] intArray0 = new int[4];
      intArray0[0] = (-1488);
      int[] intArray1 = skipDateTimeField0.addWrapField((ReadablePartial) monthDay0, 0, intArray0, 1321);
      assertArrayEquals(new int[] {1, 1, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt(1296L, 0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 2337, (long) (-1604));
      assertEquals((-3748548L), long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((-862L), (long) 1);
      assertEquals((-862L), long0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((-1031L), 1);
      assertEquals((-1031L), long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((-2379000000000000L), 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((-1917L), (-1604));
      assertEquals(3074868L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(0L, (-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply(607, 629);
      assertEquals(381803, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Duration duration0 = new Duration((-2192L));
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = DateTime.now((DateTimeZone) fixedDateTimeZone0);
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0, periodType0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract(0L, (-785L));
      assertEquals(785L, long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(196L, (-322L));
      assertEquals((-126L), long0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(1L, (long) 1682);
      assertEquals(1683L, long0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = FieldUtils.safeAdd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = FieldUtils.safeNegate(1682);
      assertEquals((-1682), int0);
  }
}

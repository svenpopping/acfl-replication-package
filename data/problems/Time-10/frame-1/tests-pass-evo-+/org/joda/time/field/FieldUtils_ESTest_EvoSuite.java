/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:55:21 GMT 2020
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.field.FieldUtils;

public class FieldUtils_ESTest_EvoSuite extends FieldUtils_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue((-194), 16, 25);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(Integer.MIN_VALUE, 0, 2068);
      assertEquals(2340, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldUtils.verifyValueBounds("ol+ty73tQ[8", 0, 0, 1501);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = new DateMidnight();
      Date date0 = dateMidnight0.toDate();
      date0.setTime((-2277L));
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      long long0 = gregorianChronology0.set(localDate0, (-2277));
      assertEquals((-2277L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = FieldUtils.safeToInt(2147483647L);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = FieldUtils.safeToInt((-2147483648L));
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract((-1555), (-1555L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract(4978125L, 0L);
      assertEquals(4978125L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = FieldUtils.safeNegate(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = FieldUtils.safeNegate((-3739608));
      assertEquals(3739608, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt(53, 30L);
      assertEquals(1590, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt((-2388L), 1566L);
      assertEquals((-3739608), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply(1, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply(1, Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = FieldUtils.safeAdd((-1943L), (-1943L));
      assertEquals((-3886L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = FieldUtils.safeAdd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = FieldUtils.safeAdd((-1), (-1));
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, 0, (-3122), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(4978125, 4978125, (-2277), 1);
      assertEquals((-701), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, 0, 1310);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      FieldUtils.verifyValueBounds(dateTimeFieldType0, 165, 165, 165);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      FieldUtils.verifyValueBounds(dateTimeField0, 17, 1, 352831696);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = FieldUtils.safeToInt(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(0L, (-2989L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply(3476, 3476);
      assertEquals(12082576, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract(650L, 3409L);
      assertEquals((-2759L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals(object0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals((Object) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = FieldUtils.equals((Object) "Cannot parse \"", (Object) "Cannot parse \"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      boolean boolean0 = FieldUtils.equals((Object) gregorianChronology0, (Object) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(1, Integer.MIN_VALUE, 0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue((-1890), 333, 1890);
      assertEquals(1226, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FieldUtils.verifyValueBounds((String) null, (-1383), (-1582), (-1383));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(4803L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((-4294967296L), 1070510L);
      assertEquals((-4597805440040960L), long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 1, (long) 119);
      assertEquals(119L, long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 4978125, (long) 1);
      assertEquals(4978125L, long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 43, 1);
      assertEquals(43L, long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) (-1383), 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((-2759L), 3476);
      assertEquals((-9590284L), long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 1481089, (-1));
      assertEquals((-1481089L), long0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract((-3739608), 3241L);
      assertEquals((-3742849L), long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long long0 = FieldUtils.safeAdd((-30L), (long) 168);
      assertEquals(138L, long0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = FieldUtils.safeAdd((-2450), Integer.MAX_VALUE);
      assertEquals(2147481197, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = FieldUtils.safeNegate(3510);
      assertEquals((-3510), int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(1123, 0, (-3510), 1940);
      assertEquals(1123, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt(0L, (-2722L));
      assertEquals(0, int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:51:24 GMT 2020
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;

public class BaseSingleFieldPeriod_ESTest_EvoSuite extends BaseSingleFieldPeriod_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Years years0 = Years.THREE;
      Years years1 = Years.ZERO;
      boolean boolean0 = years0.equals(years1);
      assertEquals(3, years0.getYears());
      assertFalse(years1.equals((Object)years0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) lenientChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withTime(1, 1, 1, 1);
      Years years0 = Years.yearsBetween((ReadablePartial) localDateTime1, (ReadablePartial) localDateTime0);
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, (-1201));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.SIX;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 2760L);
      assertEquals(187826, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.SIX;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, (-1201));
      assertEquals((-431640), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      int int0 = seconds0.getValue(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Days days0 = Days.days(2116);
      days0.getPeriodType();
      assertEquals(2116, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.days((-2461));
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals((-2461), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      Interval interval0 = new Interval(0L, 1178L, dateTimeZone0);
      Weeks weeks0 = Weeks.weeksIn(interval0);
      Period period0 = weeks0.toPeriod();
      BaseSingleFieldPeriod.between(localDate0, localDate0, period0);
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      Duration duration0 = Duration.ZERO;
      PeriodType periodType0 = PeriodType.minutes();
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateMidnight0, periodType0);
      Hours hours0 = period0.toStandardHours();
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(16, 0);
      DateMidnight dateMidnight0 = new DateMidnight((long) 0, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(0);
      DateTime dateTime0 = dateMidnight1.toDateTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateMidnight0, durationFieldType0);
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.millis((-37L));
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Days days0 = Days.SIX;
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = days0.get(durationFieldType0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Period period0 = hours0.toPeriod();
      Minutes minutes0 = period0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      int int0 = days0.getValue(0);
      assertEquals(300, minutes0.getMinutes());
      assertEquals(5, hours0.getHours());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType(0);
      assertEquals("seconds", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      int int0 = hours0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      Months months1 = Months.TWO;
      int int0 = months1.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(2, months1.getMonths());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Hours hours0 = Hours.hours(2147);
      Minutes minutes0 = Minutes.TWO;
      Hours hours1 = minutes0.toStandardHours();
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours1);
      assertEquals(1, int0);
      assertEquals(2147, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hours hours0 = Hours.hours(2147);
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(0, int0);
      assertEquals(2147, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = Years.ZERO;
      boolean boolean0 = years1.equals(years0);
      assertFalse(years0.equals((Object)years1));
      assertEquals(1, years0.getYears());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      boolean boolean0 = days0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Days days0 = Days.SIX;
      boolean boolean0 = days0.equals(days0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      Weeks weeks0 = Weeks.ONE;
      boolean boolean0 = weeks0.equals(hours0);
      assertFalse(boolean0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      Seconds seconds0 = hours0.toStandardSeconds();
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      Seconds seconds0 = hours0.toStandardSeconds();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertEquals(0, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2267L), (PeriodType) null);
      Hours hours0 = Hours.standardHoursIn(mutablePeriod0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Years years0 = Years.years((-4172));
      years0.toMutablePeriod();
      assertEquals((-4172), years0.getYears());
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Years years0 = Years.years((-4172));
      years0.hashCode();
      assertEquals((-4172), years0.getYears());
  }

}

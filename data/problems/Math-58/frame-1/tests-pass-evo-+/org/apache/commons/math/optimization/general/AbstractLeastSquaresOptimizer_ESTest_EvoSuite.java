/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:45:37 GMT 2020
 */

package org.apache.commons.math.optimization.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
import org.apache.commons.math.analysis.MultivariateMatrixFunction;
import org.apache.commons.math.optimization.general.GaussNewtonOptimizer;
import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class AbstractLeastSquaresOptimizer_ESTest_EvoSuite extends AbstractLeastSquaresOptimizer_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      levenbergMarquardtOptimizer0.rows = (-1);
      levenbergMarquardtOptimizer0.cost = 887.090665888779;
      double double0 = levenbergMarquardtOptimizer0.getRMS();
      assertEquals(786929.8495069973, levenbergMarquardtOptimizer0.getChiSquare(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-525.0568), (-525.0568), 1161.31541219445, 3956.533639002694, 3956.533639002694);
      levenbergMarquardtOptimizer0.cols = (-1409);
      int int0 = levenbergMarquardtOptimizer0.getJacobianEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, 0.0, 0.0, (-1624.879929412547), (-1624.879929412547));
      levenbergMarquardtOptimizer0.rows = 560;
      int int0 = levenbergMarquardtOptimizer0.getJacobianEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      levenbergMarquardtOptimizer0.rows = (-370);
      double double0 = levenbergMarquardtOptimizer0.getRMS();
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      levenbergMarquardtOptimizer0.cost = 887.090665888779;
      double double0 = levenbergMarquardtOptimizer0.getRMS();
      assertEquals(786929.8495069973, levenbergMarquardtOptimizer0.getChiSquare(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, 0.0, 0.0, 0.0, 0.0);
      levenbergMarquardtOptimizer0.cost = 802.61927747;
      double double0 = levenbergMarquardtOptimizer0.getChiSquare();
      assertEquals(644197.7045664649, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, 0.0, 0.0, 0.0, 0.0);
      double double0 = levenbergMarquardtOptimizer0.getChiSquare();
      assertEquals(0.0, double0, 0.01);
  }

}

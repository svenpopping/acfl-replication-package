/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:46:03 GMT 2020
 */

package org.apache.commons.math.optimization.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
import org.apache.commons.math.analysis.MultivariateMatrixFunction;
import org.apache.commons.math.optimization.general.GaussNewtonOptimizer;
import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class AbstractLeastSquaresOptimizer_ESTest_EvoSuite extends AbstractLeastSquaresOptimizer_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      levenbergMarquardtOptimizer0.cols = 37;
      int int0 = levenbergMarquardtOptimizer0.getJacobianEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, 0.0, 4084.44, 0.0, 0.0);
      levenbergMarquardtOptimizer0.rows = (-973);
      int int0 = levenbergMarquardtOptimizer0.getJacobianEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, (-3668.688171849416), (-3668.688171849416), 6456.52285, 0.0);
      levenbergMarquardtOptimizer0.rows = (-1);
      double double0 = levenbergMarquardtOptimizer0.getRMS();
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      levenbergMarquardtOptimizer0.cost = (-813.62982);
      double double0 = levenbergMarquardtOptimizer0.getRMS();
      assertEquals(661993.4839932324, levenbergMarquardtOptimizer0.getChiSquare(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-20.0), (-20.0), 0.0, 0.0, 0.0);
      levenbergMarquardtOptimizer0.cost = 1179.575;
      double double0 = levenbergMarquardtOptimizer0.getChiSquare();
      assertEquals(1391397.180625, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer(0.0, (-3668.688171849416), (-3668.688171849416), 6456.52285, 0.0);
      double double0 = levenbergMarquardtOptimizer0.getChiSquare();
      assertEquals(0.0, double0, 0.01);
  }

}

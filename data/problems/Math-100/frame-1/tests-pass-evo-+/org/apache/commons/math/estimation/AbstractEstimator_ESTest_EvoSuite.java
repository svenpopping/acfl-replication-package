/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:44:41 GMT 2020
 */

package org.apache.commons.math.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.EstimationProblem;
import org.apache.commons.math.estimation.GaussNewtonEstimator;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.apache.commons.math.estimation.SimpleEstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class AbstractEstimator_ESTest_EvoSuite extends AbstractEstimator_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      levenbergMarquardtEstimator0.cols = (-3);
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn((-492.5117325511815)).when(weightedMeasurement0).getResidual();
      doReturn(0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(542, 542, 542);
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      gaussNewtonEstimator0.initializeEstimate(simpleEstimationProblem0);
      double double0 = gaussNewtonEstimator0.getRMS(simpleEstimationProblem0);
      assertEquals(0, gaussNewtonEstimator0.getJacobianEvaluations());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      levenbergMarquardtEstimator0.rows = (-14);
      levenbergMarquardtEstimator0.updateResidualsAndCost();
      assertEquals(1, levenbergMarquardtEstimator0.getCostEvaluations());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      levenbergMarquardtEstimator0.setMaxCostEval(1);
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      assertEquals(1, levenbergMarquardtEstimator0.getCostEvaluations());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightedMeasurement0).getResidual();
      doReturn(0.0, 0.0, 0.0).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      WeightedMeasurement weightedMeasurement1 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(weightedMeasurement1).getResidual();
      doReturn(0.0, 988.951550617866, 1.0).when(weightedMeasurement1).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement1);
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      assertEquals(1, levenbergMarquardtEstimator0.getJacobianEvaluations());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      levenbergMarquardtEstimator0.rows = (-14);
      levenbergMarquardtEstimator0.updateJacobian();
      assertEquals(1, levenbergMarquardtEstimator0.getCostEvaluations());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      levenbergMarquardtEstimator0.estimate(simpleEstimationProblem0);
      int int0 = levenbergMarquardtEstimator0.getJacobianEvaluations();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(955, (-865.55), 0.0);
      gaussNewtonEstimator0.updateResidualsAndCost();
      int int0 = gaussNewtonEstimator0.getCostEvaluations();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn((-492.5117325511815), (double)(-3)).when(weightedMeasurement0).getResidual();
      doReturn(0.0, (double)(-3)).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = levenbergMarquardtEstimator0.getChiSquare(simpleEstimationProblem0);
      assertEquals((-3.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator((-1528), (-1528), (-1528));
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      double double0 = gaussNewtonEstimator0.getChiSquare(simpleEstimationProblem0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      WeightedMeasurement weightedMeasurement0 = mock(WeightedMeasurement.class, new ViolatedAssumptionAnswer());
      doReturn((double)2).when(weightedMeasurement0).getResidual();
      doReturn((double)2).when(weightedMeasurement0).getWeight();
      simpleEstimationProblem0.addMeasurement(weightedMeasurement0);
      double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
      assertEquals(2.8284271247461903, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LevenbergMarquardtEstimator levenbergMarquardtEstimator0 = new LevenbergMarquardtEstimator();
      SimpleEstimationProblem simpleEstimationProblem0 = new SimpleEstimationProblem();
      double double0 = levenbergMarquardtEstimator0.getRMS(simpleEstimationProblem0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(21, 0.0, 21);
      gaussNewtonEstimator0.incrementJacobianEvaluationsCounter();
      assertEquals(1, gaussNewtonEstimator0.getJacobianEvaluations());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(10, 10, 10);
      int int0 = gaussNewtonEstimator0.getJacobianEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GaussNewtonEstimator gaussNewtonEstimator0 = new GaussNewtonEstimator(10, 10, 10);
      int int0 = gaussNewtonEstimator0.getCostEvaluations();
      assertEquals(0, int0);
  }
}

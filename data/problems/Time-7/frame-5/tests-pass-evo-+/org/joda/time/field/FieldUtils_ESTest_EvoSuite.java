/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:48:16 GMT 2020
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.FieldUtils;

public class FieldUtils_ESTest_EvoSuite extends FieldUtils_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue((-1970), (-1), 870);
      assertEquals(646, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, 0, Integer.MIN_VALUE, 0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FieldUtils.verifyValueBounds("~`", 1445, 1445, 4035);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      FieldUtils.verifyValueBounds(dateTimeFieldType0, (-1970), (-1970), 3205);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      FieldUtils.verifyValueBounds(dateTimeFieldType0, 3118, 3118, 3118);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = FieldUtils.safeToInt(2147483647L);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract((-1), (-1L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract(3635L, 100000L);
      assertEquals((-96365L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = FieldUtils.safeAdd(1430, 1430);
      assertEquals(2860, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = FieldUtils.safeToInt(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = FieldUtils.safeToInt((-2147483648L));
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract(961L, 961L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = FieldUtils.safeNegate(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = FieldUtils.safeNegate((-498));
      assertEquals(498, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt((-4421), (-8842));
      assertEquals(39090482, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt((-1892), 269);
      assertEquals((-508948), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(10000000000L, (-1496));
      assertEquals((-14960000000000L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply((-1693), (-1693));
      assertEquals(2866249, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(1605L, (long) 727);
      assertEquals(2332L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = FieldUtils.safeAdd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(1391, (-1383), (-1), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(727, 0, 727, 2295);
      assertEquals(727, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(671, Integer.MIN_VALUE, 506);
      assertEquals((-2147482470), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, 0, 1319);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FieldUtils.verifyValueBounds((DateTimeField) null, 2339, 2339, 2339);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(4L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = FieldUtils.equals(object0, object1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals((Object) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = FieldUtils.equals((Object) "America/Sao_Paulo", (Object) "America/Sao_Paulo");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals(object0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FieldUtils.verifyValueBounds("", 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(2147488430L, 2147488430L);
      assertEquals(4611706556983864900L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 0, (long) (-51));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(1L, (-395L));
      assertEquals((-395L), long0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(0L, 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(31557600000L, 1);
      assertEquals(31557600000L, long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(1L, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(0L, (-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply((-750), 751);
      assertEquals((-563250), int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract(273L, 0L);
      assertEquals(273L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(0L, (long) (-1383));
      assertEquals((-1383L), long0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = FieldUtils.safeAdd(1763, Integer.MIN_VALUE);
      assertEquals((-2147481885), int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = FieldUtils.safeNegate(2606);
      assertEquals((-2606), int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(2403, 891, (-2879), 0);
      assertEquals((-2466), int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt(30L, 0L);
      assertEquals(0, int0);
  }
}

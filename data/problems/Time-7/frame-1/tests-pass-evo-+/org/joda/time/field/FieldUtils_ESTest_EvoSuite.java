/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 24 16:47:10 GMT 2020
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationFieldType;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.FieldUtils;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.UnsupportedDateTimeField;

public class FieldUtils_ESTest_EvoSuite extends FieldUtils_ESTest_scaffolding_EvoSuite {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, 0, Integer.MIN_VALUE, 0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FieldUtils.verifyValueBounds("B\"1?6:R", 0, (-5191), 48);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = FieldUtils.safeToInt(2147483647L);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = FieldUtils.safeToInt((-2147483648L));
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply(Integer.MIN_VALUE, 1);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract((-1L), (-2208L));
      assertEquals(2207L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = FieldUtils.safeAdd(1875, 3546);
      assertEquals(5421, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = FieldUtils.safeToInt(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract((-319404L), 1L);
      assertEquals((-319405L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = FieldUtils.safeNegate(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = FieldUtils.safeNegate(641);
      assertEquals((-641), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt(2440L, 236);
      assertEquals(575840, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt(827L, (-2426));
      assertEquals((-2006302), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(1L, (-2095L));
      assertEquals((-2095L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((-692L), (-2146775374));
      assertEquals(1485568558808L, long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply(0, (-1702));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply((-1899), 4373);
      assertEquals((-8304327), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(0L, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(45L, 45L);
      assertEquals(90L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = FieldUtils.safeAdd(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue((-1840), 1840, (-195), 5235);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(0, (-1899), (-1899), (-1233));
      assertEquals((-1899), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue((-2146775374), (-2146775374), 2241);
      assertEquals((-2146775374), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue(1341, 1341, 4978125);
      assertEquals(1341, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      FieldUtils.verifyValueBounds(dateTimeFieldType0, 1014, 1014, 1014);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 506L);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, preciseDurationField0);
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(unsupportedDateTimeField0);
      FieldUtils.verifyValueBounds((DateTimeField) delegatedDateTimeField0, 1014, 1014, 1014);
      assertEquals("dayOfMonth", delegatedDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 2228, 21904L);
      assertEquals(48802112L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) (-1899), (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = FieldUtils.equals((Object) "", (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals(object0, (Object) "uHQh1=kYR3:=x5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = FieldUtils.equals((Object) "}sizU2x", (Object) "}sizU2x");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = FieldUtils.equals((Object) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue((-512), 115, 1584);
      assertEquals(958, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = FieldUtils.getWrappedValue((-1142), 0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FieldUtils.verifyValueBounds("}sizU2x", 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = FieldUtils.safeMultiplyToInt((-1283), 0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((long) 2896804, 1L);
      assertEquals(2896804L, long0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply((-4418L), 1);
      assertEquals((-4418L), long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(1L, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = FieldUtils.safeMultiply(174L, (-1));
      assertEquals((-174L), long0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = FieldUtils.safeMultiply((-1702), (-1702));
      assertEquals(2896804, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = FieldUtils.safeSubtract((-1L), (-1L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long long0 = FieldUtils.safeAdd(0L, (-1283L));
      assertEquals((-1283L), long0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = FieldUtils.safeAdd(0, (-426));
      assertEquals((-426), int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = FieldUtils.safeNegate((-1004));
      assertEquals(1004, int0);
  }
}

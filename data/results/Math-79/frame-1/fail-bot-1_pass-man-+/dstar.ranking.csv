name;suspiciousness_value;ranking
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#equals(java.lang.Object):86;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(java.util.Random):40;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(java.util.Random):41;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#KMeansPlusPlusClusterer(java.util.Random):42;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):56;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):57;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):60;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):61;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):62;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):63;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):64;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):65;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):66;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):67;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):69;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):70;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):71;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#cluster(java.util.Collection,int,int):74;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#assignPointsToClusters(java.util.Collection,java.util.Collection):89;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#assignPointsToClusters(java.util.Collection,java.util.Collection):90;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#assignPointsToClusters(java.util.Collection,java.util.Collection):91;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#assignPointsToClusters(java.util.Collection,java.util.Collection):92;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#assignPointsToClusters(java.util.Collection,java.util.Collection):93;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#chooseInitialCenters(java.util.Collection,int,java.util.Random):107;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#chooseInitialCenters(java.util.Collection,int,java.util.Random):108;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#chooseInitialCenters(java.util.Collection,int,java.util.Random):111;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#chooseInitialCenters(java.util.Collection,int,java.util.Random):112;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#chooseInitialCenters(java.util.Collection,int,java.util.Random):114;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#chooseInitialCenters(java.util.Collection,int,java.util.Random):115;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#chooseInitialCenters(java.util.Collection,int,java.util.Random):139;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#getNearestCluster(java.util.Collection,org.apache.commons.math.stat.clustering.Clusterable):153;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#getNearestCluster(java.util.Collection,org.apache.commons.math.stat.clustering.Clusterable):154;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#getNearestCluster(java.util.Collection,org.apache.commons.math.stat.clustering.Clusterable):155;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#getNearestCluster(java.util.Collection,org.apache.commons.math.stat.clustering.Clusterable):156;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#getNearestCluster(java.util.Collection,org.apache.commons.math.stat.clustering.Clusterable):157;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#getNearestCluster(java.util.Collection,org.apache.commons.math.stat.clustering.Clusterable):158;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#getNearestCluster(java.util.Collection,org.apache.commons.math.stat.clustering.Clusterable):159;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#getNearestCluster(java.util.Collection,org.apache.commons.math.stat.clustering.Clusterable):161;1.0;1
org.apache.commons.math.stat.clustering$KMeansPlusPlusClusterer#getNearestCluster(java.util.Collection,org.apache.commons.math.stat.clustering.Clusterable):162;1.0;1
org.apache.commons.math.stat.clustering$Cluster#Cluster(org.apache.commons.math.stat.clustering.Clusterable):45;1.0;1
org.apache.commons.math.stat.clustering$Cluster#Cluster(org.apache.commons.math.stat.clustering.Clusterable):46;1.0;1
org.apache.commons.math.stat.clustering$Cluster#Cluster(org.apache.commons.math.stat.clustering.Clusterable):47;1.0;1
org.apache.commons.math.stat.clustering$Cluster#Cluster(org.apache.commons.math.stat.clustering.Clusterable):48;1.0;1
org.apache.commons.math.stat.clustering$Cluster#addPoint(org.apache.commons.math.stat.clustering.Clusterable):55;1.0;1
org.apache.commons.math.stat.clustering$Cluster#addPoint(org.apache.commons.math.stat.clustering.Clusterable):56;1.0;1
org.apache.commons.math.stat.clustering$Cluster#getPoints():63;1.0;1
org.apache.commons.math.stat.clustering$Cluster#getCenter():71;1.0;1
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#distanceFrom(org.apache.commons.math.stat.clustering.EuclideanIntegerPoint):57;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#centroidOf(java.util.Collection):62;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#centroidOf(java.util.Collection):63;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#centroidOf(java.util.Collection):64;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#centroidOf(java.util.Collection):65;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#centroidOf(java.util.Collection):67;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#centroidOf(java.util.Collection):68;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#centroidOf(java.util.Collection):69;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#centroidOf(java.util.Collection):71;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#equals(java.lang.Object):77;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#equals(java.lang.Object):80;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#equals(java.lang.Object):81;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#equals(java.lang.Object):84;0.5;2
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#equals(java.lang.Object):85;0.5;2
org.apache.commons.math.util$MathUtils#distance(int[],int[]):1624;0.3333333333333333;3
org.apache.commons.math.util$MathUtils#distance(int[],int[]):1625;0.3333333333333333;3
org.apache.commons.math.util$MathUtils#distance(int[],int[]):1626;0.3333333333333333;3
org.apache.commons.math.util$MathUtils#distance(int[],int[]):1627;0.3333333333333333;3
org.apache.commons.math.util$MathUtils#distance(int[],int[]):1629;0.3333333333333333;3
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#EuclideanIntegerPoint(int[]):43;0.2;4
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#EuclideanIntegerPoint(int[]):44;0.2;4
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#EuclideanIntegerPoint(int[]):45;0.2;4
org.apache.commons.math.stat.clustering$EuclideanIntegerPoint#getPoint():52;0.2;4
